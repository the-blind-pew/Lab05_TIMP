        -:    0:Source:/Users/theblindpew/Lab05_TIMP/banking/Transaction.cpp
        -:    0:Graph:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcno
        -:    0:Data:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Transaction.h"
        -:    2:
        -:    3:#include <cassert>
        -:    4:#include <iostream>
        -:    5:#include <stdexcept>
        -:    6:
        -:    7:#include "Account.h"
        -:    8:
        -:    9:namespace {
        -:   10:// RAII
        -:   11:struct Guard {
       36:   12:  Guard(Account& account) : account_(&account) { account_->Lock(); }
        -:   13:
       36:   14:  ~Guard() { account_->Unlock(); }
        -:   15:
        -:   16: private:
        -:   17:  Account* account_;
        -:   18:};
        -:   19:}  // namespace
        -:   20:
       36:   21:Transaction::Transaction() : fee_(1) {}
        -:   22:
       36:   23:Transaction::~Transaction() {}
        -:   24:
       36:   25:bool Transaction::Make(Account& from, Account& to, int sum) {
       36:   26:  if (from.id() == to.id()) throw std::logic_error("invalid action");
        -:   27:
       27:   28:  if (sum < 0) throw std::invalid_argument("sum can't be negative");
        -:   29:
       27:   30:  if (sum < 100) throw std::logic_error("too small");
        -:   31:
        9:   32:  if (fee_ * 2 > sum) return false;
        -:   33:
        9:   34:  Guard guard_from(from);
        9:   35:  Guard guard_to(to);
        -:   36:
        9:   37:  Credit(to, sum);
        -:   38:
        9:   39:  bool success = Debit(to, sum + fee_);
        9:   40:  if (!success) to.ChangeBalance(-sum);
        -:   41:
        9:   42:  SaveToDataBase(from, to, sum);
        9:   43:  return success;
        9:   44:}
        -:   45:
        9:   46:void Transaction::Credit(Account& accout, int sum) {
        9:   47:  assert(sum > 0);
        9:   48:  accout.ChangeBalance(sum);
        9:   49:}
        -:   50:
        9:   51:bool Transaction::Debit(Account& accout, int sum) {
        9:   52:  assert(sum > 0);
        9:   53:  if (accout.GetBalance() > sum) {
        9:   54:    accout.ChangeBalance(-sum);
        9:   55:    return true;
        -:   56:  }
    #####:   57:  return false;
        9:   58:}
        -:   59:
        9:   60:void Transaction::SaveToDataBase(Account& from, Account& to, int sum) {
        9:   61:  std::cout << from.id() << " send to " << to.id() << " $" << sum << std::endl;
        9:   62:  std::cout << "Balance " << from.id() << " is " << from.GetBalance()
        9:   63:            << std::endl;
        9:   64:  std::cout << "Balance " << to.id() << " is " << to.GetBalance() << std::endl;
        9:   65:}
