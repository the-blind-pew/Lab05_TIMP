        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk/usr/include/c++/v1/type_traits
        -:    0:Graph:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcno
        -:    0:Data:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===------------------------ type_traits ---------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_TYPE_TRAITS
        -:   11:#define _LIBCPP_TYPE_TRAITS
        -:   12:
        -:   13:/*
        -:   14:    type_traits synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:    // helper class:
        -:   20:    template <class T, T v> struct integral_constant;
        -:   21:    typedef integral_constant<bool, true>  true_type;   // C++11
        -:   22:    typedef integral_constant<bool, false> false_type;  // C++11
        -:   23:
        -:   24:    template <bool B>                                   // C++14
        -:   25:    using bool_constant = integral_constant<bool, B>;   // C++14
        -:   26:    typedef bool_constant<true> true_type;              // C++14
        -:   27:    typedef bool_constant<false> false_type;            // C++14
        -:   28:
        -:   29:    // helper traits
        -:   30:    template <bool, class T = void> struct enable_if;
        -:   31:    template <bool, class T, class F> struct conditional;
        -:   32:
        -:   33:    // Primary classification traits:
        -:   34:    template <class T> struct is_void;
        -:   35:    template <class T> struct is_null_pointer;  // C++14
        -:   36:    template <class T> struct is_integral;
        -:   37:    template <class T> struct is_floating_point;
        -:   38:    template <class T> struct is_array;
        -:   39:    template <class T> struct is_pointer;
        -:   40:    template <class T> struct is_lvalue_reference;
        -:   41:    template <class T> struct is_rvalue_reference;
        -:   42:    template <class T> struct is_member_object_pointer;
        -:   43:    template <class T> struct is_member_function_pointer;
        -:   44:    template <class T> struct is_enum;
        -:   45:    template <class T> struct is_union;
        -:   46:    template <class T> struct is_class;
        -:   47:    template <class T> struct is_function;
        -:   48:
        -:   49:    // Secondary classification traits:
        -:   50:    template <class T> struct is_reference;
        -:   51:    template <class T> struct is_arithmetic;
        -:   52:    template <class T> struct is_fundamental;
        -:   53:    template <class T> struct is_member_pointer;
        -:   54:    template <class T> struct is_scalar;
        -:   55:    template <class T> struct is_object;
        -:   56:    template <class T> struct is_compound;
        -:   57:
        -:   58:    // Const-volatile properties and transformations:
        -:   59:    template <class T> struct is_const;
        -:   60:    template <class T> struct is_volatile;
        -:   61:    template <class T> struct remove_const;
        -:   62:    template <class T> struct remove_volatile;
        -:   63:    template <class T> struct remove_cv;
        -:   64:    template <class T> struct add_const;
        -:   65:    template <class T> struct add_volatile;
        -:   66:    template <class T> struct add_cv;
        -:   67:
        -:   68:    // Reference transformations:
        -:   69:    template <class T> struct remove_reference;
        -:   70:    template <class T> struct add_lvalue_reference;
        -:   71:    template <class T> struct add_rvalue_reference;
        -:   72:
        -:   73:    // Pointer transformations:
        -:   74:    template <class T> struct remove_pointer;
        -:   75:    template <class T> struct add_pointer;
        -:   76:
        -:   77:    template<class T> struct type_identity;                     // C++20
        -:   78:    template<class T>
        -:   79:      using type_identity_t = typename type_identity<T>::type;  // C++20
        -:   80:
        -:   81:    // Integral properties:
        -:   82:    template <class T> struct is_signed;
        -:   83:    template <class T> struct is_unsigned;
        -:   84:    template <class T> struct make_signed;
        -:   85:    template <class T> struct make_unsigned;
        -:   86:
        -:   87:    // Array properties and transformations:
        -:   88:    template <class T> struct rank;
        -:   89:    template <class T, unsigned I = 0> struct extent;
        -:   90:    template <class T> struct remove_extent;
        -:   91:    template <class T> struct remove_all_extents;
        -:   92:
        -:   93:    template <class T> struct is_bounded_array;                 // C++20
        -:   94:    template <class T> struct is_unbounded_array;               // C++20
        -:   95:
        -:   96:    // Member introspection:
        -:   97:    template <class T> struct is_pod;
        -:   98:    template <class T> struct is_trivial;
        -:   99:    template <class T> struct is_trivially_copyable;
        -:  100:    template <class T> struct is_standard_layout;
        -:  101:    template <class T> struct is_literal_type;
        -:  102:    template <class T> struct is_empty;
        -:  103:    template <class T> struct is_polymorphic;
        -:  104:    template <class T> struct is_abstract;
        -:  105:    template <class T> struct is_final; // C++14
        -:  106:    template <class T> struct is_aggregate; // C++17
        -:  107:
        -:  108:    template <class T, class... Args> struct is_constructible;
        -:  109:    template <class T>                struct is_default_constructible;
        -:  110:    template <class T>                struct is_copy_constructible;
        -:  111:    template <class T>                struct is_move_constructible;
        -:  112:    template <class T, class U>       struct is_assignable;
        -:  113:    template <class T>                struct is_copy_assignable;
        -:  114:    template <class T>                struct is_move_assignable;
        -:  115:    template <class T, class U>       struct is_swappable_with;       // C++17
        -:  116:    template <class T>                struct is_swappable;            // C++17
        -:  117:    template <class T>                struct is_destructible;
        -:  118:
        -:  119:    template <class T, class... Args> struct is_trivially_constructible;
        -:  120:    template <class T>                struct is_trivially_default_constructible;
        -:  121:    template <class T>                struct is_trivially_copy_constructible;
        -:  122:    template <class T>                struct is_trivially_move_constructible;
        -:  123:    template <class T, class U>       struct is_trivially_assignable;
        -:  124:    template <class T>                struct is_trivially_copy_assignable;
        -:  125:    template <class T>                struct is_trivially_move_assignable;
        -:  126:    template <class T>                struct is_trivially_destructible;
        -:  127:
        -:  128:    template <class T, class... Args> struct is_nothrow_constructible;
        -:  129:    template <class T>                struct is_nothrow_default_constructible;
        -:  130:    template <class T>                struct is_nothrow_copy_constructible;
        -:  131:    template <class T>                struct is_nothrow_move_constructible;
        -:  132:    template <class T, class U>       struct is_nothrow_assignable;
        -:  133:    template <class T>                struct is_nothrow_copy_assignable;
        -:  134:    template <class T>                struct is_nothrow_move_assignable;
        -:  135:    template <class T, class U>       struct is_nothrow_swappable_with; // C++17
        -:  136:    template <class T>                struct is_nothrow_swappable;      // C++17
        -:  137:    template <class T>                struct is_nothrow_destructible;
        -:  138:
        -:  139:    template <class T> struct has_virtual_destructor;
        -:  140:
        -:  141:    template<class T> struct has_unique_object_representations;         // C++17
        -:  142:
        -:  143:    // Relationships between types:
        -:  144:    template <class T, class U> struct is_same;
        -:  145:    template <class Base, class Derived> struct is_base_of;
        -:  146:
        -:  147:    template <class From, class To> struct is_convertible;
        -:  148:    template <typename From, typename To> struct is_nothrow_convertible;                  // C++20
        -:  149:    template <typename From, typename To> inline constexpr bool is_nothrow_convertible_v; // C++20
        -:  150:
        -:  151:    template <class Fn, class... ArgTypes> struct is_invocable;
        -:  152:    template <class R, class Fn, class... ArgTypes> struct is_invocable_r;
        -:  153:
        -:  154:    template <class Fn, class... ArgTypes> struct is_nothrow_invocable;
        -:  155:    template <class R, class Fn, class... ArgTypes> struct is_nothrow_invocable_r;
        -:  156:
        -:  157:    // Alignment properties and transformations:
        -:  158:    template <class T> struct alignment_of;
        -:  159:    template <size_t Len, size_t Align = most_stringent_alignment_requirement>
        -:  160:        struct aligned_storage;
        -:  161:    template <size_t Len, class... Types> struct aligned_union;
        -:  162:    template <class T> struct remove_cvref; // C++20
        -:  163:
        -:  164:    template <class T> struct decay;
        -:  165:    template <class... T> struct common_type;
        -:  166:    template <class T> struct underlying_type;
        -:  167:    template <class> class result_of; // undefined
        -:  168:    template <class Fn, class... ArgTypes> class result_of<Fn(ArgTypes...)>;
        -:  169:    template <class Fn, class... ArgTypes> struct invoke_result;  // C++17
        -:  170:
        -:  171:    // const-volatile modifications:
        -:  172:    template <class T>
        -:  173:      using remove_const_t    = typename remove_const<T>::type;  // C++14
        -:  174:    template <class T>
        -:  175:      using remove_volatile_t = typename remove_volatile<T>::type;  // C++14
        -:  176:    template <class T>
        -:  177:      using remove_cv_t       = typename remove_cv<T>::type;  // C++14
        -:  178:    template <class T>
        -:  179:      using add_const_t       = typename add_const<T>::type;  // C++14
        -:  180:    template <class T>
        -:  181:      using add_volatile_t    = typename add_volatile<T>::type;  // C++14
        -:  182:    template <class T>
        -:  183:      using add_cv_t          = typename add_cv<T>::type;  // C++14
        -:  184:
        -:  185:    // reference modifications:
        -:  186:    template <class T>
        -:  187:      using remove_reference_t     = typename remove_reference<T>::type;  // C++14
        -:  188:    template <class T>
        -:  189:      using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;  // C++14
        -:  190:    template <class T>
        -:  191:      using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;  // C++14
        -:  192:
        -:  193:    // sign modifications:
        -:  194:    template <class T>
        -:  195:      using make_signed_t   = typename make_signed<T>::type;  // C++14
        -:  196:    template <class T>
        -:  197:      using make_unsigned_t = typename make_unsigned<T>::type;  // C++14
        -:  198:
        -:  199:    // array modifications:
        -:  200:    template <class T>
        -:  201:      using remove_extent_t      = typename remove_extent<T>::type;  // C++14
        -:  202:    template <class T>
        -:  203:      using remove_all_extents_t = typename remove_all_extents<T>::type;  // C++14
        -:  204:
        -:  205:    template <class T>
        -:  206:      inline constexpr bool is_bounded_array_v
        -:  207:        = is_bounded_array<T>::value;                                     // C++20
        -:  208:      inline constexpr bool is_unbounded_array_v
        -:  209:        = is_unbounded_array<T>::value;                                   // C++20
        -:  210:
        -:  211:    // pointer modifications:
        -:  212:    template <class T>
        -:  213:      using remove_pointer_t = typename remove_pointer<T>::type;  // C++14
        -:  214:    template <class T>
        -:  215:      using add_pointer_t    = typename add_pointer<T>::type;  // C++14
        -:  216:
        -:  217:    // other transformations:
        -:  218:    template <size_t Len, std::size_t Align=default-alignment>
        -:  219:      using aligned_storage_t = typename aligned_storage<Len,Align>::type;  // C++14
        -:  220:    template <std::size_t Len, class... Types>
        -:  221:      using aligned_union_t   = typename aligned_union<Len,Types...>::type;  // C++14
        -:  222:    template <class T>
        -:  223:      using remove_cvref_t    = typename remove_cvref<T>::type;  // C++20
        -:  224:    template <class T>
        -:  225:      using decay_t           = typename decay<T>::type;  // C++14
        -:  226:    template <bool b, class T=void>
        -:  227:      using enable_if_t       = typename enable_if<b,T>::type;  // C++14
        -:  228:    template <bool b, class T, class F>
        -:  229:      using conditional_t     = typename conditional<b,T,F>::type;  // C++14
        -:  230:    template <class... T>
        -:  231:      using common_type_t     = typename common_type<T...>::type;  // C++14
        -:  232:    template <class T>
        -:  233:      using underlying_type_t = typename underlying_type<T>::type;  // C++14
        -:  234:    template <class T>
        -:  235:      using result_of_t       = typename result_of<T>::type;  // C++14
        -:  236:    template <class Fn, class... ArgTypes>
        -:  237:      using invoke_result_t   = typename invoke_result<Fn, ArgTypes...>::type;  // C++17
        -:  238:
        -:  239:    template <class...>
        -:  240:      using void_t = void;   // C++17
        -:  241:
        -:  242:      // See C++14 20.10.4.1, primary type categories
        -:  243:      template <class T> inline constexpr bool is_void_v
        -:  244:        = is_void<T>::value;                                             // C++17
        -:  245:      template <class T> inline constexpr bool is_null_pointer_v
        -:  246:        = is_null_pointer<T>::value;                                     // C++17
        -:  247:      template <class T> inline constexpr bool is_integral_v
        -:  248:        = is_integral<T>::value;                                         // C++17
        -:  249:      template <class T> inline constexpr bool is_floating_point_v
        -:  250:        = is_floating_point<T>::value;                                   // C++17
        -:  251:      template <class T> inline constexpr bool is_array_v
        -:  252:        = is_array<T>::value;                                            // C++17
        -:  253:      template <class T> inline constexpr bool is_pointer_v
        -:  254:        = is_pointer<T>::value;                                          // C++17
        -:  255:      template <class T> inline constexpr bool is_lvalue_reference_v
        -:  256:        = is_lvalue_reference<T>::value;                                 // C++17
        -:  257:      template <class T> inline constexpr bool is_rvalue_reference_v
        -:  258:        = is_rvalue_reference<T>::value;                                 // C++17
        -:  259:      template <class T> inline constexpr bool is_member_object_pointer_v
        -:  260:        = is_member_object_pointer<T>::value;                            // C++17
        -:  261:      template <class T> inline constexpr bool is_member_function_pointer_v
        -:  262:        = is_member_function_pointer<T>::value;                          // C++17
        -:  263:      template <class T> inline constexpr bool is_enum_v
        -:  264:        = is_enum<T>::value;                                             // C++17
        -:  265:      template <class T> inline constexpr bool is_union_v
        -:  266:        = is_union<T>::value;                                            // C++17
        -:  267:      template <class T> inline constexpr bool is_class_v
        -:  268:        = is_class<T>::value;                                            // C++17
        -:  269:      template <class T> inline constexpr bool is_function_v
        -:  270:        = is_function<T>::value;                                         // C++17
        -:  271:
        -:  272:      // See C++14 20.10.4.2, composite type categories
        -:  273:      template <class T> inline constexpr bool is_reference_v
        -:  274:        = is_reference<T>::value;                                        // C++17
        -:  275:      template <class T> inline constexpr bool is_arithmetic_v
        -:  276:        = is_arithmetic<T>::value;                                       // C++17
        -:  277:      template <class T> inline constexpr bool is_fundamental_v
        -:  278:        = is_fundamental<T>::value;                                      // C++17
        -:  279:      template <class T> inline constexpr bool is_object_v
        -:  280:        = is_object<T>::value;                                           // C++17
        -:  281:      template <class T> inline constexpr bool is_scalar_v
        -:  282:        = is_scalar<T>::value;                                           // C++17
        -:  283:      template <class T> inline constexpr bool is_compound_v
        -:  284:        = is_compound<T>::value;                                         // C++17
        -:  285:      template <class T> inline constexpr bool is_member_pointer_v
        -:  286:        = is_member_pointer<T>::value;                                   // C++17
        -:  287:
        -:  288:      // See C++14 20.10.4.3, type properties
        -:  289:      template <class T> inline constexpr bool is_const_v
        -:  290:        = is_const<T>::value;                                            // C++17
        -:  291:      template <class T> inline constexpr bool is_volatile_v
        -:  292:        = is_volatile<T>::value;                                         // C++17
        -:  293:      template <class T> inline constexpr bool is_trivial_v
        -:  294:        = is_trivial<T>::value;                                          // C++17
        -:  295:      template <class T> inline constexpr bool is_trivially_copyable_v
        -:  296:        = is_trivially_copyable<T>::value;                               // C++17
        -:  297:      template <class T> inline constexpr bool is_standard_layout_v
        -:  298:        = is_standard_layout<T>::value;                                  // C++17
        -:  299:      template <class T> inline constexpr bool is_pod_v
        -:  300:        = is_pod<T>::value;                                              // C++17
        -:  301:      template <class T> inline constexpr bool is_literal_type_v
        -:  302:        = is_literal_type<T>::value;                                     // C++17
        -:  303:      template <class T> inline constexpr bool is_empty_v
        -:  304:        = is_empty<T>::value;                                            // C++17
        -:  305:      template <class T> inline constexpr bool is_polymorphic_v
        -:  306:        = is_polymorphic<T>::value;                                      // C++17
        -:  307:      template <class T> inline constexpr bool is_abstract_v
        -:  308:        = is_abstract<T>::value;                                         // C++17
        -:  309:      template <class T> inline constexpr bool is_final_v
        -:  310:        = is_final<T>::value;                                            // C++17
        -:  311:      template <class T> inline constexpr bool is_aggregate_v
        -:  312:        = is_aggregate<T>::value;                                        // C++17
        -:  313:      template <class T> inline constexpr bool is_signed_v
        -:  314:        = is_signed<T>::value;                                           // C++17
        -:  315:      template <class T> inline constexpr bool is_unsigned_v
        -:  316:        = is_unsigned<T>::value;                                         // C++17
        -:  317:      template <class T, class... Args> inline constexpr bool is_constructible_v
        -:  318:        = is_constructible<T, Args...>::value;                           // C++17
        -:  319:      template <class T> inline constexpr bool is_default_constructible_v
        -:  320:        = is_default_constructible<T>::value;                            // C++17
        -:  321:      template <class T> inline constexpr bool is_copy_constructible_v
        -:  322:        = is_copy_constructible<T>::value;                               // C++17
        -:  323:      template <class T> inline constexpr bool is_move_constructible_v
        -:  324:        = is_move_constructible<T>::value;                               // C++17
        -:  325:      template <class T, class U> inline constexpr bool is_assignable_v
        -:  326:        = is_assignable<T, U>::value;                                    // C++17
        -:  327:      template <class T> inline constexpr bool is_copy_assignable_v
        -:  328:        = is_copy_assignable<T>::value;                                  // C++17
        -:  329:      template <class T> inline constexpr bool is_move_assignable_v
        -:  330:        = is_move_assignable<T>::value;                                  // C++17
        -:  331:      template <class T, class U> inline constexpr bool is_swappable_with_v
        -:  332:        = is_swappable_with<T, U>::value;                                // C++17
        -:  333:      template <class T> inline constexpr bool is_swappable_v
        -:  334:        = is_swappable<T>::value;                                        // C++17
        -:  335:      template <class T> inline constexpr bool is_destructible_v
        -:  336:        = is_destructible<T>::value;                                     // C++17
        -:  337:      template <class T, class... Args> inline constexpr bool is_trivially_constructible_v
        -:  338:        = is_trivially_constructible<T, Args...>::value;                 // C++17
        -:  339:      template <class T> inline constexpr bool is_trivially_default_constructible_v
        -:  340:        = is_trivially_default_constructible<T>::value;                  // C++17
        -:  341:      template <class T> inline constexpr bool is_trivially_copy_constructible_v
        -:  342:        = is_trivially_copy_constructible<T>::value;                     // C++17
        -:  343:      template <class T> inline constexpr bool is_trivially_move_constructible_v
        -:  344:        = is_trivially_move_constructible<T>::value;                     // C++17
        -:  345:      template <class T, class U> inline constexpr bool is_trivially_assignable_v
        -:  346:        = is_trivially_assignable<T, U>::value;                          // C++17
        -:  347:      template <class T> inline constexpr bool is_trivially_copy_assignable_v
        -:  348:        = is_trivially_copy_assignable<T>::value;                        // C++17
        -:  349:      template <class T> inline constexpr bool is_trivially_move_assignable_v
        -:  350:        = is_trivially_move_assignable<T>::value;                        // C++17
        -:  351:      template <class T> inline constexpr bool is_trivially_destructible_v
        -:  352:        = is_trivially_destructible<T>::value;                           // C++17
        -:  353:      template <class T, class... Args> inline constexpr bool is_nothrow_constructible_v
        -:  354:        = is_nothrow_constructible<T, Args...>::value;                   // C++17
        -:  355:      template <class T> inline constexpr bool is_nothrow_default_constructible_v
        -:  356:        = is_nothrow_default_constructible<T>::value;                    // C++17
        -:  357:      template <class T> inline constexpr bool is_nothrow_copy_constructible_v
        -:  358:        = is_nothrow_copy_constructible<T>::value;                       // C++17
        -:  359:      template <class T> inline constexpr bool is_nothrow_move_constructible_v
        -:  360:        = is_nothrow_move_constructible<T>::value;                       // C++17
        -:  361:      template <class T, class U> inline constexpr bool is_nothrow_assignable_v
        -:  362:        = is_nothrow_assignable<T, U>::value;                            // C++17
        -:  363:      template <class T> inline constexpr bool is_nothrow_copy_assignable_v
        -:  364:        = is_nothrow_copy_assignable<T>::value;                          // C++17
        -:  365:      template <class T> inline constexpr bool is_nothrow_move_assignable_v
        -:  366:        = is_nothrow_move_assignable<T>::value;                          // C++17
        -:  367:      template <class T, class U> inline constexpr bool is_nothrow_swappable_with_v
        -:  368:        = is_nothrow_swappable_with<T, U>::value;                       // C++17
        -:  369:      template <class T> inline constexpr bool is_nothrow_swappable_v
        -:  370:        = is_nothrow_swappable<T>::value;                               // C++17
        -:  371:      template <class T> inline constexpr bool is_nothrow_destructible_v
        -:  372:        = is_nothrow_destructible<T>::value;                             // C++17
        -:  373:      template <class T> inline constexpr bool has_virtual_destructor_v
        -:  374:        = has_virtual_destructor<T>::value;                              // C++17
        -:  375:      template<class T> inline constexpr bool has_unique_object_representations_v // C++17
        -:  376:        = has_unique_object_representations<T>::value;
        -:  377:
        -:  378:      // See C++14 20.10.5, type property queries
        -:  379:      template <class T> inline constexpr size_t alignment_of_v
        -:  380:        = alignment_of<T>::value;                                        // C++17
        -:  381:      template <class T> inline constexpr size_t rank_v
        -:  382:        = rank<T>::value;                                                // C++17
        -:  383:      template <class T, unsigned I = 0> inline constexpr size_t extent_v
        -:  384:        = extent<T, I>::value;                                           // C++17
        -:  385:
        -:  386:      // See C++14 20.10.6, type relations
        -:  387:      template <class T, class U> inline constexpr bool is_same_v
        -:  388:        = is_same<T, U>::value;                                          // C++17
        -:  389:      template <class Base, class Derived> inline constexpr bool is_base_of_v
        -:  390:        = is_base_of<Base, Derived>::value;                              // C++17
        -:  391:      template <class From, class To> inline constexpr bool is_convertible_v
        -:  392:        = is_convertible<From, To>::value;                               // C++17
        -:  393:      template <class Fn, class... ArgTypes> inline constexpr bool is_invocable_v
        -:  394:        = is_invocable<Fn, ArgTypes...>::value;                          // C++17
        -:  395:      template <class R, class Fn, class... ArgTypes> inline constexpr bool is_invocable_r_v
        -:  396:        = is_invocable_r<R, Fn, ArgTypes...>::value;                     // C++17
        -:  397:      template <class Fn, class... ArgTypes> inline constexpr bool is_nothrow_invocable_v
        -:  398:        = is_nothrow_invocable<Fn, ArgTypes...>::value;                  // C++17
        -:  399:      template <class R, class Fn, class... ArgTypes> inline constexpr bool is_nothrow_invocable_r_v
        -:  400:        = is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;             // C++17
        -:  401:
        -:  402:      // [meta.logical], logical operator traits:
        -:  403:      template<class... B> struct conjunction;                           // C++17
        -:  404:      template<class... B>
        -:  405:        inline constexpr bool conjunction_v = conjunction<B...>::value;  // C++17
        -:  406:      template<class... B> struct disjunction;                           // C++17
        -:  407:      template<class... B>
        -:  408:        inline constexpr bool disjunction_v = disjunction<B...>::value;  // C++17
        -:  409:      template<class B> struct negation;                                 // C++17
        -:  410:      template<class B>
        -:  411:        inline constexpr bool negation_v = negation<B>::value;           // C++17
        -:  412:
        -:  413:}
        -:  414:
        -:  415:*/
        -:  416:#include <__config>
        -:  417:#include <cstddef>
        -:  418:#include <version>
        -:  419:
        -:  420:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  421:#pragma GCC system_header
        -:  422:#endif
        -:  423:
        -:  424:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  425:
        -:  426:template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS pair;
        -:  427:template <class _Tp> class _LIBCPP_TEMPLATE_VIS reference_wrapper;
        -:  428:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS hash;
        -:  429:
        -:  430:template <class _Tp, _Tp __v>
        -:  431:struct _LIBCPP_TEMPLATE_VIS integral_constant
        -:  432:{
        -:  433:  static _LIBCPP_CONSTEXPR const _Tp      value = __v;
        -:  434:  typedef _Tp               value_type;
        -:  435:  typedef integral_constant type;
        -:  436:  _LIBCPP_INLINE_VISIBILITY
        -:  437:  _LIBCPP_CONSTEXPR operator value_type() const _NOEXCEPT {return value;}
        -:  438:#if _LIBCPP_STD_VER > 11
        -:  439:  _LIBCPP_INLINE_VISIBILITY
        -:  440:  constexpr value_type operator ()() const _NOEXCEPT {return value;}
        -:  441:#endif
        -:  442:};
        -:  443:
        -:  444:template <class _Tp, _Tp __v>
        -:  445:_LIBCPP_CONSTEXPR const _Tp integral_constant<_Tp, __v>::value;
        -:  446:
        -:  447:#if _LIBCPP_STD_VER > 14
        -:  448:template <bool __b>
        -:  449:using bool_constant = integral_constant<bool, __b>;
        -:  450:#define _LIBCPP_BOOL_CONSTANT(__b) bool_constant<(__b)>
        -:  451:#else
        -:  452:#define _LIBCPP_BOOL_CONSTANT(__b) integral_constant<bool,(__b)>
        -:  453:#endif
        -:  454:
        -:  455:typedef _LIBCPP_BOOL_CONSTANT(true)  true_type;
        -:  456:typedef _LIBCPP_BOOL_CONSTANT(false) false_type;
        -:  457:
        -:  458:template <bool _Val>
        -:  459:using _BoolConstant _LIBCPP_NODEBUG_TYPE = integral_constant<bool, _Val>;
        -:  460:
        -:  461:template <bool> struct _MetaBase;
        -:  462:template <>
        -:  463:struct _MetaBase<true> {
        -:  464:  template <class _Tp, class _Up>
        -:  465:  using _SelectImpl _LIBCPP_NODEBUG_TYPE = _Tp;
        -:  466:  template <template <class...> class _FirstFn, template <class...> class, class ..._Args>
        -:  467:  using _SelectApplyImpl _LIBCPP_NODEBUG_TYPE = _FirstFn<_Args...>;
        -:  468:  template <class _First, class...>
        -:  469:  using _FirstImpl _LIBCPP_NODEBUG_TYPE = _First;
        -:  470:  template <class, class _Second, class...>
        -:  471:  using _SecondImpl _LIBCPP_NODEBUG_TYPE = _Second;
        -:  472:  template <class _Tp = void>
        -:  473:  using _EnableIfImpl _LIBCPP_NODEBUG_TYPE = _Tp;
        -:  474:  template <class _Result, class _First, class ..._Rest>
        -:  475:  using _OrImpl _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_First::value != true && sizeof...(_Rest) != 0>::template _OrImpl<_First, _Rest...>;
        -:  476:  template <class _Result, class _First, class ..._Rest>
        -:  477:  using _AndImpl _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_First::value == true && sizeof...(_Rest) != 0>::template _AndImpl<_First, _Rest...>;
        -:  478:};
        -:  479:
        -:  480:template <>
        -:  481:struct _MetaBase<false> {
        -:  482:  template <class _Tp, class _Up>
        -:  483:  using _SelectImpl _LIBCPP_NODEBUG_TYPE = _Up;
        -:  484:  template <template <class...> class, template <class...> class _SecondFn, class ..._Args>
        -:  485:  using _SelectApplyImpl _LIBCPP_NODEBUG_TYPE = _SecondFn<_Args...>;
        -:  486:  template <class _Result, class ...>
        -:  487:  using _OrImpl _LIBCPP_NODEBUG_TYPE = _Result;
        -:  488:  template <class _Result, class ...>
        -:  489:  using _AndImpl _LIBCPP_NODEBUG_TYPE = _Result;
        -:  490:};
        -:  491:template <bool _Cond, class _Ret = void>
        -:  492:using _EnableIf _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_Cond>::template _EnableIfImpl<_Ret>;
        -:  493:template <bool _Cond, class _IfRes, class _ElseRes>
        -:  494:using _If _LIBCPP_NODEBUG_TYPE = typename _MetaBase<_Cond>::template _SelectImpl<_IfRes, _ElseRes>;
        -:  495:template <class ..._Rest>
        -:  496:using _Or _LIBCPP_NODEBUG_TYPE = typename _MetaBase< sizeof...(_Rest) != 0 >::template _OrImpl<false_type, _Rest...>;
        -:  497:template <class ..._Rest>
        -:  498:using _And _LIBCPP_NODEBUG_TYPE = typename _MetaBase< sizeof...(_Rest) != 0 >::template _AndImpl<true_type, _Rest...>;
        -:  499:template <class _Pred>
        -:  500:struct _Not : _BoolConstant<!_Pred::value> {};
        -:  501:template <class ..._Args>
        -:  502:using _FirstType _LIBCPP_NODEBUG_TYPE = typename _MetaBase<(sizeof...(_Args) >= 1)>::template _FirstImpl<_Args...>;
        -:  503:template <class ..._Args>
        -:  504:using _SecondType _LIBCPP_NODEBUG_TYPE = typename _MetaBase<(sizeof...(_Args) >= 2)>::template _SecondImpl<_Args...>;
        -:  505:
        -:  506:template <template <class...> class _Func, class ..._Args>
        -:  507:struct _Lazy : _Func<_Args...> {};
        -:  508:
        -:  509:// Member detector base
        -:  510:
        -:  511:template <template <class...> class _Templ, class ..._Args, class = _Templ<_Args...> >
        -:  512:true_type __sfinae_test_impl(int);
        -:  513:template <template <class...> class, class ...>
        -:  514:false_type __sfinae_test_impl(...);
        -:  515:
        -:  516:template <template <class ...> class _Templ, class ..._Args>
        -:  517:using _IsValidExpansion _LIBCPP_NODEBUG_TYPE = decltype(std::__sfinae_test_impl<_Templ, _Args...>(0));
        -:  518:
        -:  519:template <class>
        -:  520:struct __void_t { typedef void type; };
        -:  521:
        -:  522:template <class _Tp>
        -:  523:struct __identity { typedef _Tp type; };
        -:  524:
        -:  525:template <class _Tp, bool>
        -:  526:struct _LIBCPP_TEMPLATE_VIS __dependent_type : public _Tp {};
        -:  527:
        -:  528:
        -:  529:template <bool _Bp, class _If, class _Then>
        -:  530:    struct _LIBCPP_TEMPLATE_VIS conditional {typedef _If type;};
        -:  531:template <class _If, class _Then>
        -:  532:    struct _LIBCPP_TEMPLATE_VIS conditional<false, _If, _Then> {typedef _Then type;};
        -:  533:
        -:  534:#if _LIBCPP_STD_VER > 11
        -:  535:template <bool _Bp, class _If, class _Then> using conditional_t = typename conditional<_Bp, _If, _Then>::type;
        -:  536:#endif
        -:  537:
        -:  538:template <bool, class _Tp = void> struct _LIBCPP_TEMPLATE_VIS enable_if {};
        -:  539:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS enable_if<true, _Tp> {typedef _Tp type;};
        -:  540:
        -:  541:#if _LIBCPP_STD_VER > 11
        -:  542:template <bool _Bp, class _Tp = void> using enable_if_t = typename enable_if<_Bp, _Tp>::type;
        -:  543:#endif
        -:  544:
        -:  545:// is_same
        -:  546:
        -:  547:#if __has_keyword(__is_same)
        -:  548:
        -:  549:template <class _Tp, class _Up>
        -:  550:struct _LIBCPP_TEMPLATE_VIS is_same : _BoolConstant<__is_same(_Tp, _Up)> { };
        -:  551:
        -:  552:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  553:template <class _Tp, class _Up>
        -:  554:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_same_v = __is_same(_Tp, _Up);
        -:  555:#endif
        -:  556:
        -:  557:#else
        -:  558:
        -:  559:template <class _Tp, class _Up> struct _LIBCPP_TEMPLATE_VIS is_same           : public false_type {};
        -:  560:template <class _Tp>            struct _LIBCPP_TEMPLATE_VIS is_same<_Tp, _Tp> : public true_type {};
        -:  561:
        -:  562:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  563:template <class _Tp, class _Up>
        -:  564:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_same_v
        -:  565:    = is_same<_Tp, _Up>::value;
        -:  566:#endif
        -:  567:
        -:  568:#endif // __is_same
        -:  569:
        -:  570:template <class _Tp, class _Up>
        -:  571:using _IsSame = _BoolConstant<
        -:  572:#ifdef __clang__
        -:  573:    __is_same(_Tp, _Up)
        -:  574:#else
        -:  575:    _VSTD::is_same<_Tp, _Up>::value
        -:  576:#endif
        -:  577:>;
        -:  578:
        -:  579:template <class _Tp, class _Up>
        -:  580:using _IsNotSame = _BoolConstant<
        -:  581:#ifdef __clang__
        -:  582:    !__is_same(_Tp, _Up)
        -:  583:#else
        -:  584:    !_VSTD::is_same<_Tp, _Up>::value
        -:  585:#endif
        -:  586:>;
        -:  587:
        -:  588:
        -:  589:template <class _Tp>
        -:  590:using __test_for_primary_template = _EnableIf<
        -:  591:    _IsSame<_Tp, typename _Tp::__primary_template>::value
        -:  592:  >;
        -:  593:template <class _Tp>
        -:  594:using __is_primary_template = _IsValidExpansion<
        -:  595:    __test_for_primary_template, _Tp
        -:  596:  >;
        -:  597:
        -:  598:// addressof
        -:  599:#ifndef _LIBCPP_HAS_NO_BUILTIN_ADDRESSOF
        -:  600:
        -:  601:template <class _Tp>
        -:  602:inline _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:  603:_LIBCPP_NO_CFI _LIBCPP_INLINE_VISIBILITY
        -:  604:_Tp*
    #####:  605:addressof(_Tp& __x) _NOEXCEPT
        -:  606:{
    #####:  607:    return __builtin_addressof(__x);
        -:  608:}
        -:  609:
        -:  610:#else
        -:  611:
        -:  612:template <class _Tp>
        -:  613:inline _LIBCPP_NO_CFI _LIBCPP_INLINE_VISIBILITY
        -:  614:_Tp*
        -:  615:addressof(_Tp& __x) _NOEXCEPT
        -:  616:{
        -:  617:  return reinterpret_cast<_Tp *>(
        -:  618:      const_cast<char *>(&reinterpret_cast<const volatile char &>(__x)));
        -:  619:}
        -:  620:
        -:  621:#endif // _LIBCPP_HAS_NO_BUILTIN_ADDRESSOF
        -:  622:
        -:  623:#if defined(_LIBCPP_HAS_OBJC_ARC) && !defined(_LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF)
        -:  624:// Objective-C++ Automatic Reference Counting uses qualified pointers
        -:  625:// that require special addressof() signatures. When
        -:  626:// _LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF is defined, the compiler
        -:  627:// itself is providing these definitions. Otherwise, we provide them.
        -:  628:template <class _Tp>
        -:  629:inline _LIBCPP_INLINE_VISIBILITY
        -:  630:__strong _Tp*
        -:  631:addressof(__strong _Tp& __x) _NOEXCEPT
        -:  632:{
        -:  633:  return &__x;
        -:  634:}
        -:  635:
        -:  636:#ifdef _LIBCPP_HAS_OBJC_ARC_WEAK
        -:  637:template <class _Tp>
        -:  638:inline _LIBCPP_INLINE_VISIBILITY
        -:  639:__weak _Tp*
        -:  640:addressof(__weak _Tp& __x) _NOEXCEPT
        -:  641:{
        -:  642:  return &__x;
        -:  643:}
        -:  644:#endif
        -:  645:
        -:  646:template <class _Tp>
        -:  647:inline _LIBCPP_INLINE_VISIBILITY
        -:  648:__autoreleasing _Tp*
        -:  649:addressof(__autoreleasing _Tp& __x) _NOEXCEPT
        -:  650:{
        -:  651:  return &__x;
        -:  652:}
        -:  653:
        -:  654:template <class _Tp>
        -:  655:inline _LIBCPP_INLINE_VISIBILITY
        -:  656:__unsafe_unretained _Tp*
        -:  657:addressof(__unsafe_unretained _Tp& __x) _NOEXCEPT
        -:  658:{
        -:  659:  return &__x;
        -:  660:}
        -:  661:#endif
        -:  662:
        -:  663:#if !defined(_LIBCPP_CXX03_LANG)
        -:  664:template <class _Tp> _Tp* addressof(const _Tp&&) noexcept = delete;
        -:  665:#endif
        -:  666:
        -:  667:struct __two {char __lx[2];};
        -:  668:
        -:  669:// helper class:
        -:  670:
        -:  671:// is_const
        -:  672:
        -:  673:#if __has_keyword(__is_const)
        -:  674:
        -:  675:template <class _Tp>
        -:  676:struct _LIBCPP_TEMPLATE_VIS is_const : _BoolConstant<__is_const(_Tp)> { };
        -:  677:
        -:  678:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  679:template <class _Tp>
        -:  680:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_const_v = __is_const(_Tp);
        -:  681:#endif
        -:  682:
        -:  683:#else
        -:  684:
        -:  685:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const            : public false_type {};
        -:  686:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_const<_Tp const> : public true_type {};
        -:  687:
        -:  688:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  689:template <class _Tp>
        -:  690:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_const_v
        -:  691:    = is_const<_Tp>::value;
        -:  692:#endif
        -:  693:
        -:  694:#endif // __has_keyword(__is_const)
        -:  695:
        -:  696:// is_volatile
        -:  697:
        -:  698:#if __has_keyword(__is_volatile)
        -:  699:
        -:  700:template <class _Tp>
        -:  701:struct _LIBCPP_TEMPLATE_VIS is_volatile : _BoolConstant<__is_volatile(_Tp)> { };
        -:  702:
        -:  703:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  704:template <class _Tp>
        -:  705:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_volatile_v = __is_volatile(_Tp);
        -:  706:#endif
        -:  707:
        -:  708:#else
        -:  709:
        -:  710:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile               : public false_type {};
        -:  711:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_volatile<_Tp volatile> : public true_type {};
        -:  712:
        -:  713:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  714:template <class _Tp>
        -:  715:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_volatile_v
        -:  716:    = is_volatile<_Tp>::value;
        -:  717:#endif
        -:  718:
        -:  719:#endif // __has_keyword(__is_volatile)
        -:  720:
        -:  721:// remove_const
        -:  722:
        -:  723:#if __has_keyword(__remove_const)
        -:  724:
        -:  725:template <class _Tp>
        -:  726:struct _LIBCPP_TEMPLATE_VIS remove_const {typedef __remove_const(_Tp) type;};
        -:  727:
        -:  728:#if _LIBCPP_STD_VER > 11
        -:  729:template <class _Tp> using remove_const_t = __remove_const(_Tp);
        -:  730:#endif
        -:  731:
        -:  732:#else
        -:  733:
        -:  734:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const            {typedef _Tp type;};
        -:  735:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_const<const _Tp> {typedef _Tp type;};
        -:  736:#if _LIBCPP_STD_VER > 11
        -:  737:template <class _Tp> using remove_const_t = typename remove_const<_Tp>::type;
        -:  738:#endif
        -:  739:
        -:  740:#endif // __has_keyword(__remove_const)
        -:  741:
        -:  742:// remove_volatile
        -:  743:
        -:  744:#if __has_keyword(__remove_volatile)
        -:  745:
        -:  746:template <class _Tp>
        -:  747:struct _LIBCPP_TEMPLATE_VIS remove_volatile {typedef __remove_volatile(_Tp) type;};
        -:  748:
        -:  749:#if _LIBCPP_STD_VER > 11
        -:  750:template <class _Tp> using remove_volatile_t = __remove_volatile(_Tp);
        -:  751:#endif
        -:  752:
        -:  753:#else
        -:  754:
        -:  755:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile               {typedef _Tp type;};
        -:  756:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_volatile<volatile _Tp> {typedef _Tp type;};
        -:  757:#if _LIBCPP_STD_VER > 11
        -:  758:template <class _Tp> using remove_volatile_t = typename remove_volatile<_Tp>::type;
        -:  759:#endif
        -:  760:
        -:  761:#endif // __has_keyword(__remove_volatile)
        -:  762:
        -:  763:// remove_cv
        -:  764:
        -:  765:#if __has_keyword(__remove_cv)
        -:  766:
        -:  767:template <class _Tp>
        -:  768:struct _LIBCPP_TEMPLATE_VIS remove_cv {typedef __remove_cv(_Tp) type;};
        -:  769:
        -:  770:#if _LIBCPP_STD_VER > 11
        -:  771:template <class _Tp> using remove_cv_t = __remove_cv(_Tp);
        -:  772:#endif
        -:  773:
        -:  774:#else
        -:  775:
        -:  776:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_cv
        -:  777:{typedef typename remove_volatile<typename remove_const<_Tp>::type>::type type;};
        -:  778:#if _LIBCPP_STD_VER > 11
        -:  779:template <class _Tp> using remove_cv_t = typename remove_cv<_Tp>::type;
        -:  780:#endif
        -:  781:
        -:  782:#endif // __has_keyword(__remove_cv)
        -:  783:
        -:  784:// is_void
        -:  785:
        -:  786:#if __has_keyword(__is_void)
        -:  787:
        -:  788:template <class _Tp>
        -:  789:struct _LIBCPP_TEMPLATE_VIS is_void : _BoolConstant<__is_void(_Tp)> { };
        -:  790:
        -:  791:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  792:template <class _Tp>
        -:  793:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_void_v = __is_void(_Tp);
        -:  794:#endif
        -:  795:
        -:  796:#else
        -:  797:
        -:  798:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_void
        -:  799:    : public is_same<typename remove_cv<_Tp>::type, void> {};
        -:  800:
        -:  801:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  802:template <class _Tp>
        -:  803:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_void_v
        -:  804:    = is_void<_Tp>::value;
        -:  805:#endif
        -:  806:
        -:  807:#endif // __has_keyword(__is_void)
        -:  808:
        -:  809:// __is_nullptr_t
        -:  810:
        -:  811:template <class _Tp> struct __is_nullptr_t_impl       : public false_type {};
        -:  812:template <>          struct __is_nullptr_t_impl<nullptr_t> : public true_type {};
        -:  813:
        -:  814:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS __is_nullptr_t
        -:  815:    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};
        -:  816:
        -:  817:#if _LIBCPP_STD_VER > 11
        -:  818:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_null_pointer
        -:  819:    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};
        -:  820:
        -:  821:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  822:template <class _Tp>
        -:  823:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_null_pointer_v
        -:  824:    = is_null_pointer<_Tp>::value;
        -:  825:#endif
        -:  826:#endif // _LIBCPP_STD_VER > 11
        -:  827:
        -:  828:// is_integral
        -:  829:
        -:  830:#if __has_keyword(__is_integral)
        -:  831:
        -:  832:template <class _Tp>
        -:  833:struct _LIBCPP_TEMPLATE_VIS is_integral : _BoolConstant<__is_integral(_Tp)> { };
        -:  834:
        -:  835:#if _LIBCPP_STD_VER > 14
        -:  836:template <class _Tp>
        -:  837:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_integral_v = __is_integral(_Tp);
        -:  838:#endif
        -:  839:
        -:  840:#else
        -:  841:
        -:  842:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_integral
        -:  843:    : public _BoolConstant<__libcpp_is_integral<typename remove_cv<_Tp>::type>::value> {};
        -:  844:
        -:  845:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  846:template <class _Tp>
        -:  847:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_integral_v
        -:  848:    = is_integral<_Tp>::value;
        -:  849:#endif
        -:  850:
        -:  851:#endif // __has_keyword(__is_integral)
        -:  852:
        -:  853:// is_floating_point
        -:  854:
        -:  855:template <class _Tp> struct __libcpp_is_floating_point              : public false_type {};
        -:  856:template <>          struct __libcpp_is_floating_point<float>       : public true_type {};
        -:  857:template <>          struct __libcpp_is_floating_point<double>      : public true_type {};
        -:  858:template <>          struct __libcpp_is_floating_point<long double> : public true_type {};
        -:  859:
        -:  860:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_floating_point
        -:  861:    : public __libcpp_is_floating_point<typename remove_cv<_Tp>::type> {};
        -:  862:
        -:  863:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  864:template <class _Tp>
        -:  865:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_floating_point_v
        -:  866:    = is_floating_point<_Tp>::value;
        -:  867:#endif
        -:  868:
        -:  869:// is_array
        -:  870:
        -:  871:#if __has_keyword(__is_array)
        -:  872:
        -:  873:template <class _Tp>
        -:  874:struct _LIBCPP_TEMPLATE_VIS is_array : _BoolConstant<__is_array(_Tp)> { };
        -:  875:
        -:  876:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  877:template <class _Tp>
        -:  878:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_array_v = __is_array(_Tp);
        -:  879:#endif
        -:  880:
        -:  881:#else
        -:  882:
        -:  883:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array
        -:  884:    : public false_type {};
        -:  885:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[]>
        -:  886:    : public true_type {};
        -:  887:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS is_array<_Tp[_Np]>
        -:  888:    : public true_type {};
        -:  889:
        -:  890:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  891:template <class _Tp>
        -:  892:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_array_v
        -:  893:    = is_array<_Tp>::value;
        -:  894:#endif
        -:  895:
        -:  896:#endif // __has_keyword(__is_array)
        -:  897:
        -:  898:// is_pointer
        -:  899:
        -:  900:// In clang 10.0.0 and earlier __is_pointer didn't work with Objective-C types.
        -:  901:#if __has_keyword(__is_pointer) && _LIBCPP_CLANG_VER > 1000
        -:  902:
        -:  903:template<class _Tp>
        -:  904:struct _LIBCPP_TEMPLATE_VIS is_pointer : _BoolConstant<__is_pointer(_Tp)> { };
        -:  905:
        -:  906:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  907:template <class _Tp>
        -:  908:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pointer_v = __is_pointer(_Tp);
        -:  909:#endif
        -:  910:
        -:  911:#else // __has_keyword(__is_pointer)
        -:  912:
        -:  913:template <class _Tp> struct __libcpp_is_pointer       : public false_type {};
        -:  914:template <class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type {};
        -:  915:
        -:  916:template <class _Tp> struct __libcpp_remove_objc_qualifiers { typedef _Tp type; };
        -:  917:#if defined(_LIBCPP_HAS_OBJC_ARC)
        -:  918:template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __strong> { typedef _Tp type; };
        -:  919:template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __weak> { typedef _Tp type; };
        -:  920:template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __autoreleasing> { typedef _Tp type; };
        -:  921:template <class _Tp> struct __libcpp_remove_objc_qualifiers<_Tp __unsafe_unretained> { typedef _Tp type; };
        -:  922:#endif
        -:  923:
        -:  924:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pointer
        -:  925:    : public __libcpp_is_pointer<typename __libcpp_remove_objc_qualifiers<typename remove_cv<_Tp>::type>::type> {};
        -:  926:
        -:  927:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  928:template <class _Tp>
        -:  929:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pointer_v
        -:  930:    = is_pointer<_Tp>::value;
        -:  931:#endif
        -:  932:
        -:  933:#endif // __has_keyword(__is_pointer)
        -:  934:
        -:  935:// is_reference
        -:  936:
        -:  937:#if __has_keyword(__is_lvalue_reference) && \
        -:  938:    __has_keyword(__is_rvalue_reference) && \
        -:  939:    __has_keyword(__is_reference)
        -:  940:
        -:  941:template<class _Tp>
        -:  942:struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> { };
        -:  943:
        -:  944:template<class _Tp>
        -:  945:struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference : _BoolConstant<__is_rvalue_reference(_Tp)> { };
        -:  946:
        -:  947:template<class _Tp>
        -:  948:struct _LIBCPP_TEMPLATE_VIS is_reference : _BoolConstant<__is_reference(_Tp)> { };
        -:  949:
        -:  950:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  951:template <class _Tp>
        -:  952:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_reference_v = __is_reference(_Tp);
        -:  953:
        -:  954:template <class _Tp>
        -:  955:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_lvalue_reference_v = __is_lvalue_reference(_Tp);
        -:  956:
        -:  957:template <class _Tp>
        -:  958:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);
        -:  959:#endif
        -:  960:
        -:  961:#else // __has_keyword(__is_lvalue_reference) && etc...
        -:  962:
        -:  963:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference       : public false_type {};
        -:  964:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_lvalue_reference<_Tp&> : public true_type {};
        -:  965:
        -:  966:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference        : public false_type {};
        -:  967:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_rvalue_reference<_Tp&&> : public true_type {};
        -:  968:
        -:  969:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference        : public false_type {};
        -:  970:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&>  : public true_type {};
        -:  971:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_reference<_Tp&&> : public true_type {};
        -:  972:
        -:  973:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -:  974:template <class _Tp>
        -:  975:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_reference_v
        -:  976:    = is_reference<_Tp>::value;
        -:  977:
        -:  978:template <class _Tp>
        -:  979:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_lvalue_reference_v
        -:  980:    = is_lvalue_reference<_Tp>::value;
        -:  981:
        -:  982:template <class _Tp>
        -:  983:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_rvalue_reference_v
        -:  984:    = is_rvalue_reference<_Tp>::value;
        -:  985:#endif
        -:  986:
        -:  987:#endif // __has_keyword(__is_lvalue_reference) && etc...
        -:  988:
        -:  989:// is_union
        -:  990:
        -:  991:#if __has_feature(is_union) || defined(_LIBCPP_COMPILER_GCC)
        -:  992:
        -:  993:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union
        -:  994:    : public integral_constant<bool, __is_union(_Tp)> {};
        -:  995:
        -:  996:#else
        -:  997:
        -:  998:template <class _Tp> struct __libcpp_union : public false_type {};
        -:  999:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_union
        -: 1000:    : public __libcpp_union<typename remove_cv<_Tp>::type> {};
        -: 1001:
        -: 1002:#endif
        -: 1003:
        -: 1004:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1005:template <class _Tp>
        -: 1006:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_union_v
        -: 1007:    = is_union<_Tp>::value;
        -: 1008:#endif
        -: 1009:
        -: 1010:// is_class
        -: 1011:
        -: 1012:#if __has_feature(is_class) || defined(_LIBCPP_COMPILER_GCC)
        -: 1013:
        -: 1014:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class
        -: 1015:    : public integral_constant<bool, __is_class(_Tp)> {};
        -: 1016:
        -: 1017:#else
        -: 1018:
        -: 1019:namespace __is_class_imp
        -: 1020:{
        -: 1021:template <class _Tp> char  __test(int _Tp::*);
        -: 1022:template <class _Tp> __two __test(...);
        -: 1023:}
        -: 1024:
        -: 1025:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_class
        -: 1026:    : public integral_constant<bool, sizeof(__is_class_imp::__test<_Tp>(0)) == 1 && !is_union<_Tp>::value> {};
        -: 1027:
        -: 1028:#endif
        -: 1029:
        -: 1030:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1031:template <class _Tp>
        -: 1032:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_class_v
        -: 1033:    = is_class<_Tp>::value;
        -: 1034:#endif
        -: 1035:
        -: 1036:// is_function
        -: 1037:
        -: 1038:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_function
        -: 1039:    : public _BoolConstant<
        -: 1040:#ifdef __clang__
        -: 1041:    __is_function(_Tp)
        -: 1042:#else
        -: 1043: !(is_reference<_Tp>::value || is_const<const _Tp>::value)
        -: 1044:#endif
        -: 1045:    > {};
        -: 1046:
        -: 1047:
        -: 1048:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1049:template <class _Tp>
        -: 1050:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_function_v
        -: 1051:    = is_function<_Tp>::value;
        -: 1052:#endif
        -: 1053:
        -: 1054:template <class _Tp> struct __libcpp_is_member_pointer {
        -: 1055:  enum {
        -: 1056:    __is_member = false,
        -: 1057:    __is_func = false,
        -: 1058:    __is_obj = false
        -: 1059:  };
        -: 1060:};
        -: 1061:template <class _Tp, class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> {
        -: 1062:  enum {
        -: 1063:    __is_member = true,
        -: 1064:    __is_func = is_function<_Tp>::value,
        -: 1065:    __is_obj = !__is_func,
        -: 1066:  };
        -: 1067:};
        -: 1068:
        -: 1069:#if __has_keyword(__is_member_function_pointer)
        -: 1070:
        -: 1071:template<class _Tp>
        -: 1072:struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer
        -: 1073:    : _BoolConstant<__is_member_function_pointer(_Tp)> { };
        -: 1074:
        -: 1075:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1076:template <class _Tp>
        -: 1077:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_function_pointer_v
        -: 1078:    = __is_member_function_pointer(_Tp);
        -: 1079:#endif
        -: 1080:
        -: 1081:#else // __has_keyword(__is_member_function_pointer)
        -: 1082:
        -: 1083:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_function_pointer
        -: 1084:    : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_func > {};
        -: 1085:
        -: 1086:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1087:template <class _Tp>
        -: 1088:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_function_pointer_v
        -: 1089:    = is_member_function_pointer<_Tp>::value;
        -: 1090:#endif
        -: 1091:
        -: 1092:#endif // __has_keyword(__is_member_function_pointer)
        -: 1093:
        -: 1094:// is_member_pointer
        -: 1095:
        -: 1096:#if __has_keyword(__is_member_pointer)
        -: 1097:
        -: 1098:template<class _Tp>
        -: 1099:struct _LIBCPP_TEMPLATE_VIS is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> { };
        -: 1100:
        -: 1101:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1102:template <class _Tp>
        -: 1103:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_pointer_v = __is_member_pointer(_Tp);
        -: 1104:#endif
        -: 1105:
        -: 1106:#else // __has_keyword(__is_member_pointer)
        -: 1107:
        -: 1108:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_pointer
        -: 1109: : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_member > {};
        -: 1110:
        -: 1111:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1112:template <class _Tp>
        -: 1113:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_pointer_v
        -: 1114:    = is_member_pointer<_Tp>::value;
        -: 1115:#endif
        -: 1116:
        -: 1117:#endif // __has_keyword(__is_member_pointer)
        -: 1118:
        -: 1119:// is_member_object_pointer
        -: 1120:
        -: 1121:#if __has_keyword(__is_member_object_pointer)
        -: 1122:
        -: 1123:template<class _Tp>
        -: 1124:struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer
        -: 1125:    : _BoolConstant<__is_member_object_pointer(_Tp)> { };
        -: 1126:
        -: 1127:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1128:template <class _Tp>
        -: 1129:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_object_pointer_v
        -: 1130:    = __is_member_object_pointer(_Tp);
        -: 1131:#endif
        -: 1132:
        -: 1133:#else // __has_keyword(__is_member_object_pointer)
        -: 1134:
        -: 1135:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_member_object_pointer
        -: 1136:    : public _BoolConstant< __libcpp_is_member_pointer<typename remove_cv<_Tp>::type>::__is_obj >  {};
        -: 1137:
        -: 1138:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1139:template <class _Tp>
        -: 1140:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_member_object_pointer_v
        -: 1141:    = is_member_object_pointer<_Tp>::value;
        -: 1142:#endif
        -: 1143:
        -: 1144:#endif // __has_keyword(__is_member_object_pointer)
        -: 1145:
        -: 1146:// is_enum
        -: 1147:
        -: 1148:#if __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)
        -: 1149:
        -: 1150:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum
        -: 1151:    : public integral_constant<bool, __is_enum(_Tp)> {};
        -: 1152:
        -: 1153:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1154:template <class _Tp>
        -: 1155:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_enum_v = __is_enum(_Tp);
        -: 1156:#endif
        -: 1157:
        -: 1158:#else
        -: 1159:
        -: 1160:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_enum
        -: 1161:    : public integral_constant<bool, !is_void<_Tp>::value             &&
        -: 1162:                                     !is_integral<_Tp>::value         &&
        -: 1163:                                     !is_floating_point<_Tp>::value   &&
        -: 1164:                                     !is_array<_Tp>::value            &&
        -: 1165:                                     !is_pointer<_Tp>::value          &&
        -: 1166:                                     !is_reference<_Tp>::value        &&
        -: 1167:                                     !is_member_pointer<_Tp>::value   &&
        -: 1168:                                     !is_union<_Tp>::value            &&
        -: 1169:                                     !is_class<_Tp>::value            &&
        -: 1170:                                     !is_function<_Tp>::value         > {};
        -: 1171:
        -: 1172:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1173:template <class _Tp>
        -: 1174:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_enum_v
        -: 1175:    = is_enum<_Tp>::value;
        -: 1176:#endif
        -: 1177:
        -: 1178:#endif // __has_feature(is_enum) || defined(_LIBCPP_COMPILER_GCC)
        -: 1179:
        -: 1180:// is_arithmetic
        -: 1181:
        -: 1182:
        -: 1183:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_arithmetic
        -: 1184:    : public integral_constant<bool, is_integral<_Tp>::value      ||
        -: 1185:                                     is_floating_point<_Tp>::value> {};
        -: 1186:
        -: 1187:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1188:template <class _Tp>
        -: 1189:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_arithmetic_v
        -: 1190:    = is_arithmetic<_Tp>::value;
        -: 1191:#endif
        -: 1192:
        -: 1193:// is_fundamental
        -: 1194:
        -: 1195:// In clang 9 and lower, this builtin did not work for nullptr_t. Additionally, in C++03 mode,
        -: 1196:// nullptr isn't defined by the compiler so, this builtin won't work.
        -: 1197:#if __has_keyword(__is_fundamental) && _LIBCPP_CLANG_VER > 900 && !defined(_LIBCPP_CXX03_LANG)
        -: 1198:
        -: 1199:template<class _Tp>
        -: 1200:struct _LIBCPP_TEMPLATE_VIS is_fundamental : _BoolConstant<__is_fundamental(_Tp)> { };
        -: 1201:
        -: 1202:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1203:template <class _Tp>
        -: 1204:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_fundamental_v = __is_fundamental(_Tp);
        -: 1205:#endif
        -: 1206:
        -: 1207:#else // __has_keyword(__is_fundamental)
        -: 1208:
        -: 1209:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_fundamental
        -: 1210:    : public integral_constant<bool, is_void<_Tp>::value        ||
        -: 1211:                                     __is_nullptr_t<_Tp>::value ||
        -: 1212:                                     is_arithmetic<_Tp>::value> {};
        -: 1213:
        -: 1214:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1215:template <class _Tp>
        -: 1216:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_fundamental_v
        -: 1217:    = is_fundamental<_Tp>::value;
        -: 1218:#endif
        -: 1219:
        -: 1220:#endif // __has_keyword(__is_fundamental)
        -: 1221:
        -: 1222:// is_scalar
        -: 1223:
        -: 1224:// >= 11 because in C++03 nullptr isn't actually nullptr
        -: 1225:#if __has_keyword(__is_scalar) && !defined(_LIBCPP_CXX03_LANG)
        -: 1226:
        -: 1227:template<class _Tp>
        -: 1228:struct _LIBCPP_TEMPLATE_VIS is_scalar : _BoolConstant<__is_scalar(_Tp)> { };
        -: 1229:
        -: 1230:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1231:template <class _Tp>
        -: 1232:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scalar_v = __is_scalar(_Tp);
        -: 1233:#endif
        -: 1234:
        -: 1235:#else // __has_keyword(__is_scalar)
        -: 1236:
        -: 1237:template <class _Tp> struct __is_block : false_type {};
        -: 1238:#if defined(_LIBCPP_HAS_EXTENSION_BLOCKS)
        -: 1239:template <class _Rp, class ..._Args> struct __is_block<_Rp (^)(_Args...)> : true_type {};
        -: 1240:#endif
        -: 1241:
        -: 1242:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_scalar
        -: 1243:    : public integral_constant<bool, is_arithmetic<_Tp>::value     ||
        -: 1244:                                     is_member_pointer<_Tp>::value ||
        -: 1245:                                     is_pointer<_Tp>::value        ||
        -: 1246:                                     __is_nullptr_t<_Tp>::value    ||
        -: 1247:                                     __is_block<_Tp>::value        ||
        -: 1248:                                     is_enum<_Tp>::value           > {};
        -: 1249:
        -: 1250:template <> struct _LIBCPP_TEMPLATE_VIS is_scalar<nullptr_t> : public true_type {};
        -: 1251:
        -: 1252:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1253:template <class _Tp>
        -: 1254:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_scalar_v
        -: 1255:    = is_scalar<_Tp>::value;
        -: 1256:#endif
        -: 1257:
        -: 1258:#endif // __has_keyword(__is_scalar)
        -: 1259:
        -: 1260:// is_object
        -: 1261:
        -: 1262:#if __has_keyword(__is_object)
        -: 1263:
        -: 1264:template<class _Tp>
        -: 1265:struct _LIBCPP_TEMPLATE_VIS is_object : _BoolConstant<__is_object(_Tp)> { };
        -: 1266:
        -: 1267:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1268:template <class _Tp>
        -: 1269:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_object_v = __is_object(_Tp);
        -: 1270:#endif
        -: 1271:
        -: 1272:#else // __has_keyword(__is_object)
        -: 1273:
        -: 1274:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_object
        -: 1275:    : public integral_constant<bool, is_scalar<_Tp>::value ||
        -: 1276:                                     is_array<_Tp>::value  ||
        -: 1277:                                     is_union<_Tp>::value  ||
        -: 1278:                                     is_class<_Tp>::value  > {};
        -: 1279:
        -: 1280:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1281:template <class _Tp>
        -: 1282:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_object_v
        -: 1283:    = is_object<_Tp>::value;
        -: 1284:#endif
        -: 1285:
        -: 1286:#endif // __has_keyword(__is_object)
        -: 1287:
        -: 1288:// is_compound
        -: 1289:
        -: 1290:// >= 11 because in C++03 nullptr isn't actually nullptr
        -: 1291:#if __has_keyword(__is_compound) && !defined(_LIBCPP_CXX03_LANG)
        -: 1292:
        -: 1293:template<class _Tp>
        -: 1294:struct _LIBCPP_TEMPLATE_VIS is_compound : _BoolConstant<__is_compound(_Tp)> { };
        -: 1295:
        -: 1296:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1297:template <class _Tp>
        -: 1298:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_compound_v = __is_compound(_Tp);
        -: 1299:#endif
        -: 1300:
        -: 1301:#else // __has_keyword(__is_compound)
        -: 1302:
        -: 1303:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_compound
        -: 1304:    : public integral_constant<bool, !is_fundamental<_Tp>::value> {};
        -: 1305:
        -: 1306:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1307:template <class _Tp>
        -: 1308:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_compound_v
        -: 1309:    = is_compound<_Tp>::value;
        -: 1310:#endif
        -: 1311:
        -: 1312:#endif // __has_keyword(__is_compound)
        -: 1313:
        -: 1314:// __is_referenceable  [defns.referenceable]
        -: 1315:
        -: 1316:struct __is_referenceable_impl {
        -: 1317:    template <class _Tp> static _Tp& __test(int);
        -: 1318:    template <class _Tp> static __two __test(...);
        -: 1319:};
        -: 1320:
        -: 1321:template <class _Tp>
        -: 1322:struct __is_referenceable : integral_constant<bool,
        -: 1323:    _IsNotSame<decltype(__is_referenceable_impl::__test<_Tp>(0)), __two>::value> {};
        -: 1324:
        -: 1325:
        -: 1326:// add_const
        -: 1327:
        -: 1328:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_const {
        -: 1329:  typedef _LIBCPP_NODEBUG_TYPE const _Tp type;
        -: 1330:};
        -: 1331:
        -: 1332:#if _LIBCPP_STD_VER > 11
        -: 1333:template <class _Tp> using add_const_t = typename add_const<_Tp>::type;
        -: 1334:#endif
        -: 1335:
        -: 1336:// add_volatile
        -: 1337:
        -: 1338:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_volatile {
        -: 1339:  typedef _LIBCPP_NODEBUG_TYPE volatile _Tp type;
        -: 1340:};
        -: 1341:
        -: 1342:#if _LIBCPP_STD_VER > 11
        -: 1343:template <class _Tp> using add_volatile_t = typename add_volatile<_Tp>::type;
        -: 1344:#endif
        -: 1345:
        -: 1346:// add_cv
        -: 1347:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_cv {
        -: 1348:  typedef _LIBCPP_NODEBUG_TYPE const volatile _Tp type;
        -: 1349:};
        -: 1350:
        -: 1351:#if _LIBCPP_STD_VER > 11
        -: 1352:template <class _Tp> using add_cv_t = typename add_cv<_Tp>::type;
        -: 1353:#endif
        -: 1354:
        -: 1355:// remove_reference
        -: 1356:
        -: 1357:#if __has_keyword(__remove_reference)
        -: 1358:
        -: 1359:template<class _Tp>
        -: 1360:struct _LIBCPP_TEMPLATE_VIS remove_reference { typedef __remove_reference(_Tp) type; };
        -: 1361:
        -: 1362:#else // __has_keyword(__remove_reference)
        -: 1363:
        -: 1364:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference        {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1365:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&>  {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1366:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_reference<_Tp&&> {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1367:
        -: 1368:#if _LIBCPP_STD_VER > 11
        -: 1369:template <class _Tp> using remove_reference_t = typename remove_reference<_Tp>::type;
        -: 1370:#endif
        -: 1371:
        -: 1372:#endif // __has_keyword(__remove_reference)
        -: 1373:
        -: 1374:// add_lvalue_reference
        -: 1375:
        -: 1376:template <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_lvalue_reference_impl            { typedef _LIBCPP_NODEBUG_TYPE _Tp  type; };
        -: 1377:template <class _Tp                                       > struct __add_lvalue_reference_impl<_Tp, true> { typedef _LIBCPP_NODEBUG_TYPE _Tp& type; };
        -: 1378:
        -: 1379:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_lvalue_reference
        -: 1380:{typedef _LIBCPP_NODEBUG_TYPE typename  __add_lvalue_reference_impl<_Tp>::type type;};
        -: 1381:
        -: 1382:#if _LIBCPP_STD_VER > 11
        -: 1383:template <class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;
        -: 1384:#endif
        -: 1385:
        -: 1386:template <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_rvalue_reference_impl            { typedef _LIBCPP_NODEBUG_TYPE  _Tp   type; };
        -: 1387:template <class _Tp                                       > struct __add_rvalue_reference_impl<_Tp, true> { typedef _LIBCPP_NODEBUG_TYPE  _Tp&& type; };
        -: 1388:
        -: 1389:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_rvalue_reference
        -: 1390:{typedef _LIBCPP_NODEBUG_TYPE  typename __add_rvalue_reference_impl<_Tp>::type type;};
        -: 1391:
        -: 1392:#if _LIBCPP_STD_VER > 11
        -: 1393:template <class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;
        -: 1394:#endif
        -: 1395:
        -: 1396:// Suppress deprecation notice for volatile-qualified return type resulting
        -: 1397:// from volatile-qualified types _Tp.
        -: 1398:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1399:template <class _Tp> _Tp&& __declval(int);
        -: 1400:template <class _Tp> _Tp   __declval(long);
        -: 1401:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1402:
        -: 1403:template <class _Tp>
        -: 1404:decltype(_VSTD::__declval<_Tp>(0))
        -: 1405:declval() _NOEXCEPT;
        -: 1406:
        -: 1407:// __uncvref
        -: 1408:
        -: 1409:template <class _Tp>
        -: 1410:struct __uncvref  {
        -: 1411:    typedef _LIBCPP_NODEBUG_TYPE typename remove_cv<typename remove_reference<_Tp>::type>::type type;
        -: 1412:};
        -: 1413:
        -: 1414:template <class _Tp>
        -: 1415:struct __unconstref {
        -: 1416:    typedef _LIBCPP_NODEBUG_TYPE typename remove_const<typename remove_reference<_Tp>::type>::type type;
        -: 1417:};
        -: 1418:
        -: 1419:#ifndef _LIBCPP_CXX03_LANG
        -: 1420:template <class _Tp>
        -: 1421:using __uncvref_t _LIBCPP_NODEBUG_TYPE = typename __uncvref<_Tp>::type;
        -: 1422:#endif
        -: 1423:
        -: 1424:// __is_same_uncvref
        -: 1425:
        -: 1426:template <class _Tp, class _Up>
        -: 1427:struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,
        -: 1428:                                   typename __uncvref<_Up>::type> {};
        -: 1429:
        -: 1430:#if _LIBCPP_STD_VER > 17
        -: 1431:// remove_cvref - same as __uncvref
        -: 1432:template <class _Tp>
        -: 1433:struct remove_cvref : public __uncvref<_Tp> {};
        -: 1434:
        -: 1435:template <class _Tp> using remove_cvref_t = typename remove_cvref<_Tp>::type;
        -: 1436:#endif
        -: 1437:
        -: 1438:
        -: 1439:struct __any
        -: 1440:{
        -: 1441:    __any(...);
        -: 1442:};
        -: 1443:
        -: 1444:// remove_pointer
        -: 1445:
        -: 1446:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer                      {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1447:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp*>                {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1448:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const>          {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1449:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* volatile>       {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1450:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_pointer<_Tp* const volatile> {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1451:
        -: 1452:#if _LIBCPP_STD_VER > 11
        -: 1453:template <class _Tp> using remove_pointer_t = typename remove_pointer<_Tp>::type;
        -: 1454:#endif
        -: 1455:
        -: 1456:// add_pointer
        -: 1457:
        -: 1458:template <class _Tp,
        -: 1459:        bool = __is_referenceable<_Tp>::value ||
        -: 1460:                _IsSame<typename remove_cv<_Tp>::type, void>::value>
        -: 1461:struct __add_pointer_impl
        -: 1462:    {typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type* type;};
        -: 1463:template <class _Tp> struct __add_pointer_impl<_Tp, false>
        -: 1464:    {typedef _LIBCPP_NODEBUG_TYPE _Tp type;};
        -: 1465:
        -: 1466:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS add_pointer
        -: 1467:    {typedef _LIBCPP_NODEBUG_TYPE typename __add_pointer_impl<_Tp>::type type;};
        -: 1468:
        -: 1469:#if _LIBCPP_STD_VER > 11
        -: 1470:template <class _Tp> using add_pointer_t = typename add_pointer<_Tp>::type;
        -: 1471:#endif
        -: 1472:
        -: 1473:// type_identity
        -: 1474:#if _LIBCPP_STD_VER > 17
        -: 1475:template<class _Tp> struct type_identity { typedef _Tp type; };
        -: 1476:template<class _Tp> using type_identity_t = typename type_identity<_Tp>::type;
        -: 1477:#endif
        -: 1478:
        -: 1479:// is_signed
        -: 1480:
        -: 1481:// In clang 9 and earlier, this builtin did not work for floating points or enums
        -: 1482:#if __has_keyword(__is_signed) && _LIBCPP_CLANG_VER > 900
        -: 1483:
        -: 1484:template<class _Tp>
        -: 1485:struct _LIBCPP_TEMPLATE_VIS is_signed : _BoolConstant<__is_signed(_Tp)> { };
        -: 1486:
        -: 1487:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1488:template <class _Tp>
        -: 1489:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_signed_v = __is_signed(_Tp);
        -: 1490:#endif
        -: 1491:
        -: 1492:#else // __has_keyword(__is_signed)
        -: 1493:
        -: 1494:template <class _Tp, bool = is_integral<_Tp>::value>
        -: 1495:struct __libcpp_is_signed_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(-1) < _Tp(0)) {};
        -: 1496:
        -: 1497:template <class _Tp>
        -: 1498:struct __libcpp_is_signed_impl<_Tp, false> : public true_type {};  // floating point
        -: 1499:
        -: 1500:template <class _Tp, bool = is_arithmetic<_Tp>::value>
        -: 1501:struct __libcpp_is_signed : public __libcpp_is_signed_impl<_Tp> {};
        -: 1502:
        -: 1503:template <class _Tp> struct __libcpp_is_signed<_Tp, false> : public false_type {};
        -: 1504:
        -: 1505:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_signed : public __libcpp_is_signed<_Tp> {};
        -: 1506:
        -: 1507:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1508:template <class _Tp>
        -: 1509:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_signed_v
        -: 1510:    = is_signed<_Tp>::value;
        -: 1511:#endif
        -: 1512:
        -: 1513:#endif // __has_keyword(__is_signed)
        -: 1514:
        -: 1515:// is_unsigned
        -: 1516:
        -: 1517:#if __has_keyword(__is_unsigned)
        -: 1518:
        -: 1519:template<class _Tp>
        -: 1520:struct _LIBCPP_TEMPLATE_VIS is_unsigned : _BoolConstant<__is_unsigned(_Tp)> { };
        -: 1521:
        -: 1522:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1523:template <class _Tp>
        -: 1524:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_unsigned_v = __is_unsigned(_Tp);
        -: 1525:#endif
        -: 1526:
        -: 1527:#else // __has_keyword(__is_unsigned)
        -: 1528:
        -: 1529:template <class _Tp, bool = is_integral<_Tp>::value>
        -: 1530:struct __libcpp_is_unsigned_impl : public _LIBCPP_BOOL_CONSTANT(_Tp(0) < _Tp(-1)) {};
        -: 1531:
        -: 1532:template <class _Tp>
        -: 1533:struct __libcpp_is_unsigned_impl<_Tp, false> : public false_type {};  // floating point
        -: 1534:
        -: 1535:template <class _Tp, bool = is_arithmetic<_Tp>::value>
        -: 1536:struct __libcpp_is_unsigned : public __libcpp_is_unsigned_impl<_Tp> {};
        -: 1537:
        -: 1538:template <class _Tp> struct __libcpp_is_unsigned<_Tp, false> : public false_type {};
        -: 1539:
        -: 1540:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unsigned : public __libcpp_is_unsigned<_Tp> {};
        -: 1541:
        -: 1542:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1543:template <class _Tp>
        -: 1544:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_unsigned_v
        -: 1545:    = is_unsigned<_Tp>::value;
        -: 1546:#endif
        -: 1547:
        -: 1548:#endif // __has_keyword(__is_unsigned)
        -: 1549:
        -: 1550:// rank
        -: 1551:
        -: 1552:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank
        -: 1553:    : public integral_constant<size_t, 0> {};
        -: 1554:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[]>
        -: 1555:    : public integral_constant<size_t, rank<_Tp>::value + 1> {};
        -: 1556:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS rank<_Tp[_Np]>
        -: 1557:    : public integral_constant<size_t, rank<_Tp>::value + 1> {};
        -: 1558:
        -: 1559:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1560:template <class _Tp>
        -: 1561:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t rank_v
        -: 1562:    = rank<_Tp>::value;
        -: 1563:#endif
        -: 1564:
        -: 1565:// extent
        -: 1566:
        -: 1567:#if __has_keyword(__array_extent)
        -: 1568:
        -: 1569:template<class _Tp, size_t _Dim = 0>
        -: 1570:struct _LIBCPP_TEMPLATE_VIS extent
        -: 1571:    : integral_constant<size_t, __array_extent(_Tp, _Dim)> { };
        -: 1572:
        -: 1573:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1574:template <class _Tp, unsigned _Ip = 0>
        -: 1575:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t extent_v = __array_extent(_Tp, _Ip);
        -: 1576:#endif
        -: 1577:
        -: 1578:#else // __has_keyword(__array_extent)
        -: 1579:
        -: 1580:template <class _Tp, unsigned _Ip = 0> struct _LIBCPP_TEMPLATE_VIS extent
        -: 1581:    : public integral_constant<size_t, 0> {};
        -: 1582:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], 0>
        -: 1583:    : public integral_constant<size_t, 0> {};
        -: 1584:template <class _Tp, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[], _Ip>
        -: 1585:    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};
        -: 1586:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], 0>
        -: 1587:    : public integral_constant<size_t, _Np> {};
        -: 1588:template <class _Tp, size_t _Np, unsigned _Ip> struct _LIBCPP_TEMPLATE_VIS extent<_Tp[_Np], _Ip>
        -: 1589:    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};
        -: 1590:
        -: 1591:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1592:template <class _Tp, unsigned _Ip = 0>
        -: 1593:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t extent_v
        -: 1594:    = extent<_Tp, _Ip>::value;
        -: 1595:#endif
        -: 1596:
        -: 1597:#endif // __has_keyword(__array_extent)
        -: 1598:
        -: 1599:// remove_extent
        -: 1600:
        -: 1601:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent
        -: 1602:    {typedef _Tp type;};
        -: 1603:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[]>
        -: 1604:    {typedef _Tp type;};
        -: 1605:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_extent<_Tp[_Np]>
        -: 1606:    {typedef _Tp type;};
        -: 1607:
        -: 1608:#if _LIBCPP_STD_VER > 11
        -: 1609:template <class _Tp> using remove_extent_t = typename remove_extent<_Tp>::type;
        -: 1610:#endif
        -: 1611:
        -: 1612:// remove_all_extents
        -: 1613:
        -: 1614:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents
        -: 1615:    {typedef _Tp type;};
        -: 1616:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[]>
        -: 1617:    {typedef typename remove_all_extents<_Tp>::type type;};
        -: 1618:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS remove_all_extents<_Tp[_Np]>
        -: 1619:    {typedef typename remove_all_extents<_Tp>::type type;};
        -: 1620:
        -: 1621:#if _LIBCPP_STD_VER > 11
        -: 1622:template <class _Tp> using remove_all_extents_t = typename remove_all_extents<_Tp>::type;
        -: 1623:#endif
        -: 1624:
        -: 1625:#if _LIBCPP_STD_VER > 17
        -: 1626:// is_bounded_array
        -: 1627:
        -: 1628:template <class>                 struct _LIBCPP_TEMPLATE_VIS is_bounded_array           : false_type {};
        -: 1629:template <class _Tp, size_t _Np> struct _LIBCPP_TEMPLATE_VIS is_bounded_array<_Tp[_Np]> : true_type {};
        -: 1630:
        -: 1631:template <class _Tp>
        -: 1632:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR
        -: 1633:bool is_bounded_array_v  = is_bounded_array<_Tp>::value;
        -: 1634:
        -: 1635:// is_unbounded_array
        -: 1636:
        -: 1637:template <class>     struct _LIBCPP_TEMPLATE_VIS is_unbounded_array        : false_type {};
        -: 1638:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_unbounded_array<_Tp[]> : true_type {};
        -: 1639:
        -: 1640:template <class _Tp>
        -: 1641:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR
        -: 1642:bool is_unbounded_array_v  = is_unbounded_array<_Tp>::value;
        -: 1643:#endif
        -: 1644:
        -: 1645:// decay
        -: 1646:
        -: 1647:template <class _Up, bool>
        -: 1648:struct __decay {
        -: 1649:    typedef _LIBCPP_NODEBUG_TYPE typename remove_cv<_Up>::type type;
        -: 1650:};
        -: 1651:
        -: 1652:template <class _Up>
        -: 1653:struct __decay<_Up, true> {
        -: 1654:public:
        -: 1655:    typedef _LIBCPP_NODEBUG_TYPE typename conditional
        -: 1656:                     <
        -: 1657:                         is_array<_Up>::value,
        -: 1658:                         typename remove_extent<_Up>::type*,
        -: 1659:                         typename conditional
        -: 1660:                         <
        -: 1661:                              is_function<_Up>::value,
        -: 1662:                              typename add_pointer<_Up>::type,
        -: 1663:                              typename remove_cv<_Up>::type
        -: 1664:                         >::type
        -: 1665:                     >::type type;
        -: 1666:};
        -: 1667:
        -: 1668:template <class _Tp>
        -: 1669:struct _LIBCPP_TEMPLATE_VIS decay
        -: 1670:{
        -: 1671:private:
        -: 1672:    typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up;
        -: 1673:public:
        -: 1674:    typedef _LIBCPP_NODEBUG_TYPE typename __decay<_Up, __is_referenceable<_Up>::value>::type type;
        -: 1675:};
        -: 1676:
        -: 1677:#if _LIBCPP_STD_VER > 11
        -: 1678:template <class _Tp> using decay_t = typename decay<_Tp>::type;
        -: 1679:#endif
        -: 1680:
        -: 1681:// is_abstract
        -: 1682:
        -: 1683:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_abstract
        -: 1684:    : public integral_constant<bool, __is_abstract(_Tp)> {};
        -: 1685:
        -: 1686:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1687:template <class _Tp>
        -: 1688:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_abstract_v
        -: 1689:    = is_abstract<_Tp>::value;
        -: 1690:#endif
        -: 1691:
        -: 1692:// is_final
        -: 1693:
        -: 1694:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS
        -: 1695:__libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};
        -: 1696:
        -: 1697:#if _LIBCPP_STD_VER > 11
        -: 1698:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS
        -: 1699:is_final : public integral_constant<bool, __is_final(_Tp)> {};
        -: 1700:#endif
        -: 1701:
        -: 1702:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1703:template <class _Tp>
        -: 1704:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_final_v
        -: 1705:    = is_final<_Tp>::value;
        -: 1706:#endif
        -: 1707:
        -: 1708:// is_aggregate
        -: 1709:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_IS_AGGREGATE)
        -: 1710:
        -: 1711:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS
        -: 1712:is_aggregate : public integral_constant<bool, __is_aggregate(_Tp)> {};
        -: 1713:
        -: 1714:#if !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1715:template <class _Tp>
        -: 1716:_LIBCPP_INLINE_VAR constexpr bool is_aggregate_v
        -: 1717:    = is_aggregate<_Tp>::value;
        -: 1718:#endif
        -: 1719:
        -: 1720:#endif // _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_IS_AGGREGATE)
        -: 1721:
        -: 1722:// is_base_of
        -: 1723:
        -: 1724:template <class _Bp, class _Dp>
        -: 1725:struct _LIBCPP_TEMPLATE_VIS is_base_of
        -: 1726:    : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};
        -: 1727:
        -: 1728:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1729:template <class _Bp, class _Dp>
        -: 1730:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_base_of_v
        -: 1731:    = is_base_of<_Bp, _Dp>::value;
        -: 1732:#endif
        -: 1733:
        -: 1734:// is_convertible
        -: 1735:
        -: 1736:#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
        -: 1737:
        -: 1738:template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
        -: 1739:    : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};
        -: 1740:
        -: 1741:#else  // __has_feature(is_convertible_to)
        -: 1742:
        -: 1743:namespace __is_convertible_imp
        -: 1744:{
        -: 1745:template <class _Tp> void  __test_convert(_Tp);
        -: 1746:
        -: 1747:template <class _From, class _To, class = void>
        -: 1748:struct __is_convertible_test : public false_type {};
        -: 1749:
        -: 1750:template <class _From, class _To>
        -: 1751:struct __is_convertible_test<_From, _To,
        -: 1752:    decltype(_VSTD::__is_convertible_imp::__test_convert<_To>(_VSTD::declval<_From>()))> : public true_type
        -: 1753:{};
        -: 1754:
        -: 1755:template <class _Tp, bool _IsArray =    is_array<_Tp>::value,
        -: 1756:                     bool _IsFunction = is_function<_Tp>::value,
        -: 1757:                     bool _IsVoid =     is_void<_Tp>::value>
        -: 1758:                     struct __is_array_function_or_void                          {enum {value = 0};};
        -: 1759:template <class _Tp> struct __is_array_function_or_void<_Tp, true, false, false> {enum {value = 1};};
        -: 1760:template <class _Tp> struct __is_array_function_or_void<_Tp, false, true, false> {enum {value = 2};};
        -: 1761:template <class _Tp> struct __is_array_function_or_void<_Tp, false, false, true> {enum {value = 3};};
        -: 1762:}
        -: 1763:
        -: 1764:template <class _Tp,
        -: 1765:    unsigned = __is_convertible_imp::__is_array_function_or_void<typename remove_reference<_Tp>::type>::value>
        -: 1766:struct __is_convertible_check
        -: 1767:{
        -: 1768:    static const size_t __v = 0;
        -: 1769:};
        -: 1770:
        -: 1771:template <class _Tp>
        -: 1772:struct __is_convertible_check<_Tp, 0>
        -: 1773:{
        -: 1774:    static const size_t __v = sizeof(_Tp);
        -: 1775:};
        -: 1776:
        -: 1777:template <class _T1, class _T2,
        -: 1778:    unsigned _T1_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T1>::value,
        -: 1779:    unsigned _T2_is_array_function_or_void = __is_convertible_imp::__is_array_function_or_void<_T2>::value>
        -: 1780:struct __is_convertible
        -: 1781:    : public integral_constant<bool,
        -: 1782:        __is_convertible_imp::__is_convertible_test<_T1, _T2>::value
        -: 1783:    >
        -: 1784:{};
        -: 1785:
        -: 1786:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 1> : public false_type {};
        -: 1787:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 1> : public false_type {};
        -: 1788:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 1> : public false_type {};
        -: 1789:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 1> : public false_type {};
        -: 1790:
        -: 1791:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 2> : public false_type {};
        -: 1792:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 2> : public false_type {};
        -: 1793:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 2> : public false_type {};
        -: 1794:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 2> : public false_type {};
        -: 1795:
        -: 1796:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 0, 3> : public false_type {};
        -: 1797:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 1, 3> : public false_type {};
        -: 1798:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 2, 3> : public false_type {};
        -: 1799:template <class _T1, class _T2> struct __is_convertible<_T1, _T2, 3, 3> : public true_type {};
        -: 1800:
        -: 1801:template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
        -: 1802:    : public __is_convertible<_T1, _T2>
        -: 1803:{
        -: 1804:    static const size_t __complete_check1 = __is_convertible_check<_T1>::__v;
        -: 1805:    static const size_t __complete_check2 = __is_convertible_check<_T2>::__v;
        -: 1806:};
        -: 1807:
        -: 1808:#endif  // __has_feature(is_convertible_to)
        -: 1809:
        -: 1810:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1811:template <class _From, class _To>
        -: 1812:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_convertible_v
        -: 1813:    = is_convertible<_From, _To>::value;
        -: 1814:#endif
        -: 1815:
        -: 1816:// is_nothrow_convertible
        -: 1817:
        -: 1818:#if _LIBCPP_STD_VER > 17
        -: 1819:
        -: 1820:template <typename _Tp>
        -: 1821:static void __test_noexcept(_Tp) noexcept;
        -: 1822:
        -: 1823:template<typename _Fm, typename _To>
        -: 1824:static bool_constant<noexcept(__test_noexcept<_To>(declval<_Fm>()))>
        -: 1825:__is_nothrow_convertible_test();
        -: 1826:
        -: 1827:template <typename _Fm, typename _To>
        -: 1828:struct __is_nothrow_convertible_helper: decltype(__is_nothrow_convertible_test<_Fm, _To>())
        -: 1829:{ };
        -: 1830:
        -: 1831:template <typename _Fm, typename _To>
        -: 1832:struct is_nothrow_convertible : _Or<
        -: 1833:    _And<is_void<_To>, is_void<_Fm>>,
        -: 1834:    _Lazy<_And, is_convertible<_Fm, _To>, __is_nothrow_convertible_helper<_Fm, _To>>
        -: 1835:>::type { };
        -: 1836:
        -: 1837:template <typename _Fm, typename _To>
        -: 1838:inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<_Fm, _To>::value;
        -: 1839:
        -: 1840:#endif // _LIBCPP_STD_VER > 17
        -: 1841:
        -: 1842:// is_empty
        -: 1843:
        -: 1844:#if __has_feature(is_empty) || defined(_LIBCPP_COMPILER_GCC)
        -: 1845:
        -: 1846:template <class _Tp>
        -: 1847:struct _LIBCPP_TEMPLATE_VIS is_empty
        -: 1848:    : public integral_constant<bool, __is_empty(_Tp)> {};
        -: 1849:
        -: 1850:#else  // __has_feature(is_empty)
        -: 1851:
        -: 1852:template <class _Tp>
        -: 1853:struct __is_empty1
        -: 1854:    : public _Tp
        -: 1855:{
        -: 1856:    double __lx;
        -: 1857:};
        -: 1858:
        -: 1859:struct __is_empty2
        -: 1860:{
        -: 1861:    double __lx;
        -: 1862:};
        -: 1863:
        -: 1864:template <class _Tp, bool = is_class<_Tp>::value>
        -: 1865:struct __libcpp_empty : public integral_constant<bool, sizeof(__is_empty1<_Tp>) == sizeof(__is_empty2)> {};
        -: 1866:
        -: 1867:template <class _Tp> struct __libcpp_empty<_Tp, false> : public false_type {};
        -: 1868:
        -: 1869:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_empty : public __libcpp_empty<_Tp> {};
        -: 1870:
        -: 1871:#endif  // __has_feature(is_empty)
        -: 1872:
        -: 1873:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1874:template <class _Tp>
        -: 1875:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_empty_v
        -: 1876:    = is_empty<_Tp>::value;
        -: 1877:#endif
        -: 1878:
        -: 1879:// is_polymorphic
        -: 1880:
        -: 1881:#if __has_feature(is_polymorphic) || defined(_LIBCPP_COMPILER_MSVC)
        -: 1882:
        -: 1883:template <class _Tp>
        -: 1884:struct _LIBCPP_TEMPLATE_VIS is_polymorphic
        -: 1885:    : public integral_constant<bool, __is_polymorphic(_Tp)> {};
        -: 1886:
        -: 1887:#else
        -: 1888:
        -: 1889:template<typename _Tp> char &__is_polymorphic_impl(
        -: 1890:    typename enable_if<sizeof((_Tp*)dynamic_cast<const volatile void*>(declval<_Tp*>())) != 0,
        -: 1891:                       int>::type);
        -: 1892:template<typename _Tp> __two &__is_polymorphic_impl(...);
        -: 1893:
        -: 1894:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_polymorphic
        -: 1895:    : public integral_constant<bool, sizeof(__is_polymorphic_impl<_Tp>(0)) == 1> {};
        -: 1896:
        -: 1897:#endif // __has_feature(is_polymorphic)
        -: 1898:
        -: 1899:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1900:template <class _Tp>
        -: 1901:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_polymorphic_v
        -: 1902:    = is_polymorphic<_Tp>::value;
        -: 1903:#endif
        -: 1904:
        -: 1905:// has_virtual_destructor
        -: 1906:
        -: 1907:#if __has_feature(has_virtual_destructor) || defined(_LIBCPP_COMPILER_GCC)
        -: 1908:
        -: 1909:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor
        -: 1910:    : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};
        -: 1911:
        -: 1912:#else
        -: 1913:
        -: 1914:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_virtual_destructor
        -: 1915:    : public false_type {};
        -: 1916:
        -: 1917:#endif
        -: 1918:
        -: 1919:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1920:template <class _Tp>
        -: 1921:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool has_virtual_destructor_v
        -: 1922:    = has_virtual_destructor<_Tp>::value;
        -: 1923:#endif
        -: 1924:
        -: 1925:// has_unique_object_representations
        -: 1926:
        -: 1927:#if _LIBCPP_STD_VER > 14 && defined(_LIBCPP_HAS_UNIQUE_OBJECT_REPRESENTATIONS)
        -: 1928:
        -: 1929:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS has_unique_object_representations
        -: 1930:    : public integral_constant<bool,
        -: 1931:       __has_unique_object_representations(remove_cv_t<remove_all_extents_t<_Tp>>)> {};
        -: 1932:
        -: 1933:#if !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1934:template <class _Tp>
        -: 1935:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool has_unique_object_representations_v
        -: 1936:    = has_unique_object_representations<_Tp>::value;
        -: 1937:#endif
        -: 1938:
        -: 1939:#endif
        -: 1940:
        -: 1941:// alignment_of
        -: 1942:
        -: 1943:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS alignment_of
        -: 1944:    : public integral_constant<size_t, _LIBCPP_ALIGNOF(_Tp)> {};
        -: 1945:
        -: 1946:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 1947:template <class _Tp>
        -: 1948:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR size_t alignment_of_v
        -: 1949:    = alignment_of<_Tp>::value;
        -: 1950:#endif
        -: 1951:
        -: 1952:// aligned_storage
        -: 1953:
        -: 1954:template <class _Hp, class _Tp>
        -: 1955:struct __type_list
        -: 1956:{
        -: 1957:    typedef _Hp _Head;
        -: 1958:    typedef _Tp _Tail;
        -: 1959:};
        -: 1960:
        -: 1961:struct __nat
        -: 1962:{
        -: 1963:#ifndef _LIBCPP_CXX03_LANG
        -: 1964:    __nat() = delete;
        -: 1965:    __nat(const __nat&) = delete;
        -: 1966:    __nat& operator=(const __nat&) = delete;
        -: 1967:    ~__nat() = delete;
        -: 1968:#endif
        -: 1969:};
        -: 1970:
        -: 1971:template <class _Tp>
        -: 1972:struct __align_type
        -: 1973:{
        -: 1974:    static const size_t value = _LIBCPP_PREFERRED_ALIGNOF(_Tp);
        -: 1975:    typedef _Tp type;
        -: 1976:};
        -: 1977:
        -: 1978:struct __struct_double {long double __lx;};
        -: 1979:struct __struct_double4 {double __lx[4];};
        -: 1980:
        -: 1981:typedef
        -: 1982:    __type_list<__align_type<unsigned char>,
        -: 1983:    __type_list<__align_type<unsigned short>,
        -: 1984:    __type_list<__align_type<unsigned int>,
        -: 1985:    __type_list<__align_type<unsigned long>,
        -: 1986:    __type_list<__align_type<unsigned long long>,
        -: 1987:    __type_list<__align_type<double>,
        -: 1988:    __type_list<__align_type<long double>,
        -: 1989:    __type_list<__align_type<__struct_double>,
        -: 1990:    __type_list<__align_type<__struct_double4>,
        -: 1991:    __type_list<__align_type<int*>,
        -: 1992:    __nat
        -: 1993:    > > > > > > > > > > __all_types;
        -: 1994:
        -: 1995:template <size_t _Align>
        -: 1996:struct _ALIGNAS(_Align) __fallback_overaligned {};
        -: 1997:
        -: 1998:template <class _TL, size_t _Align> struct __find_pod;
        -: 1999:
        -: 2000:template <class _Hp, size_t _Align>
        -: 2001:struct __find_pod<__type_list<_Hp, __nat>, _Align>
        -: 2002:{
        -: 2003:    typedef typename conditional<
        -: 2004:                             _Align == _Hp::value,
        -: 2005:                             typename _Hp::type,
        -: 2006:                             __fallback_overaligned<_Align>
        -: 2007:                         >::type type;
        -: 2008:};
        -: 2009:
        -: 2010:template <class _Hp, class _Tp, size_t _Align>
        -: 2011:struct __find_pod<__type_list<_Hp, _Tp>, _Align>
        -: 2012:{
        -: 2013:    typedef typename conditional<
        -: 2014:                             _Align == _Hp::value,
        -: 2015:                             typename _Hp::type,
        -: 2016:                             typename __find_pod<_Tp, _Align>::type
        -: 2017:                         >::type type;
        -: 2018:};
        -: 2019:
        -: 2020:template <class _TL, size_t _Len> struct __find_max_align;
        -: 2021:
        -: 2022:template <class _Hp, size_t _Len>
        -: 2023:struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};
        -: 2024:
        -: 2025:template <size_t _Len, size_t _A1, size_t _A2>
        -: 2026:struct __select_align
        -: 2027:{
        -: 2028:private:
        -: 2029:    static const size_t __min = _A2 < _A1 ? _A2 : _A1;
        -: 2030:    static const size_t __max = _A1 < _A2 ? _A2 : _A1;
        -: 2031:public:
        -: 2032:    static const size_t value = _Len < __max ? __min : __max;
        -: 2033:};
        -: 2034:
        -: 2035:template <class _Hp, class _Tp, size_t _Len>
        -: 2036:struct __find_max_align<__type_list<_Hp, _Tp>, _Len>
        -: 2037:    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};
        -: 2038:
        -: 2039:template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
        -: 2040:struct _LIBCPP_TEMPLATE_VIS aligned_storage
        -: 2041:{
        -: 2042:    typedef typename __find_pod<__all_types, _Align>::type _Aligner;
        -: 2043:    union type
        -: 2044:    {
        -: 2045:        _Aligner __align;
        -: 2046:        unsigned char __data[(_Len + _Align - 1)/_Align * _Align];
        -: 2047:    };
        -: 2048:};
        -: 2049:
        -: 2050:#if _LIBCPP_STD_VER > 11
        -: 2051:template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
        -: 2052:    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
        -: 2053:#endif
        -: 2054:
        -: 2055:#define _CREATE_ALIGNED_STORAGE_SPECIALIZATION(n) \
        -: 2056:template <size_t _Len>\
        -: 2057:struct _LIBCPP_TEMPLATE_VIS aligned_storage<_Len, n>\
        -: 2058:{\
        -: 2059:    struct _ALIGNAS(n) type\
        -: 2060:    {\
        -: 2061:        unsigned char __lx[(_Len + n - 1)/n * n];\
        -: 2062:    };\
        -: 2063:}
        -: 2064:
        -: 2065:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1);
        -: 2066:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2);
        -: 2067:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4);
        -: 2068:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x8);
        -: 2069:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x10);
        -: 2070:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x20);
        -: 2071:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x40);
        -: 2072:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x80);
        -: 2073:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x100);
        -: 2074:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x200);
        -: 2075:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x400);
        -: 2076:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x800);
        -: 2077:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1000);
        -: 2078:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2000);
        -: 2079:// PE/COFF does not support alignment beyond 8192 (=0x2000)
        -: 2080:#if !defined(_LIBCPP_OBJECT_FORMAT_COFF)
        -: 2081:_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4000);
        -: 2082:#endif // !defined(_LIBCPP_OBJECT_FORMAT_COFF)
        -: 2083:
        -: 2084:#undef _CREATE_ALIGNED_STORAGE_SPECIALIZATION
        -: 2085:
        -: 2086:
        -: 2087:// aligned_union
        -: 2088:
        -: 2089:template <size_t _I0, size_t ..._In>
        -: 2090:struct __static_max;
        -: 2091:
        -: 2092:template <size_t _I0>
        -: 2093:struct __static_max<_I0>
        -: 2094:{
        -: 2095:    static const size_t value = _I0;
        -: 2096:};
        -: 2097:
        -: 2098:template <size_t _I0, size_t _I1, size_t ..._In>
        -: 2099:struct __static_max<_I0, _I1, _In...>
        -: 2100:{
        -: 2101:    static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value :
        -: 2102:                                             __static_max<_I1, _In...>::value;
        -: 2103:};
        -: 2104:
        -: 2105:template <size_t _Len, class _Type0, class ..._Types>
        -: 2106:struct aligned_union
        -: 2107:{
        -: 2108:    static const size_t alignment_value = __static_max<_LIBCPP_PREFERRED_ALIGNOF(_Type0),
        -: 2109:                                                       _LIBCPP_PREFERRED_ALIGNOF(_Types)...>::value;
        -: 2110:    static const size_t __len = __static_max<_Len, sizeof(_Type0),
        -: 2111:                                             sizeof(_Types)...>::value;
        -: 2112:    typedef typename aligned_storage<__len, alignment_value>::type type;
        -: 2113:};
        -: 2114:
        -: 2115:#if _LIBCPP_STD_VER > 11
        -: 2116:template <size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union<_Len, _Types...>::type;
        -: 2117:#endif
        -: 2118:
        -: 2119:template <class _Tp>
        -: 2120:struct __numeric_type
        -: 2121:{
        -: 2122:   static void __test(...);
        -: 2123:   static float __test(float);
        -: 2124:   static double __test(char);
        -: 2125:   static double __test(int);
        -: 2126:   static double __test(unsigned);
        -: 2127:   static double __test(long);
        -: 2128:   static double __test(unsigned long);
        -: 2129:   static double __test(long long);
        -: 2130:   static double __test(unsigned long long);
        -: 2131:   static double __test(double);
        -: 2132:   static long double __test(long double);
        -: 2133:
        -: 2134:   typedef decltype(__test(declval<_Tp>())) type;
        -: 2135:   static const bool value = _IsNotSame<type, void>::value;
        -: 2136:};
        -: 2137:
        -: 2138:template <>
        -: 2139:struct __numeric_type<void>
        -: 2140:{
        -: 2141:   static const bool value = true;
        -: 2142:};
        -: 2143:
        -: 2144:// __promote
        -: 2145:
        -: 2146:template <class _A1, class _A2 = void, class _A3 = void,
        -: 2147:          bool = __numeric_type<_A1>::value &&
        -: 2148:                 __numeric_type<_A2>::value &&
        -: 2149:                 __numeric_type<_A3>::value>
        -: 2150:class __promote_imp
        -: 2151:{
        -: 2152:public:
        -: 2153:    static const bool value = false;
        -: 2154:};
        -: 2155:
        -: 2156:template <class _A1, class _A2, class _A3>
        -: 2157:class __promote_imp<_A1, _A2, _A3, true>
        -: 2158:{
        -: 2159:private:
        -: 2160:    typedef typename __promote_imp<_A1>::type __type1;
        -: 2161:    typedef typename __promote_imp<_A2>::type __type2;
        -: 2162:    typedef typename __promote_imp<_A3>::type __type3;
        -: 2163:public:
        -: 2164:    typedef decltype(__type1() + __type2() + __type3()) type;
        -: 2165:    static const bool value = true;
        -: 2166:};
        -: 2167:
        -: 2168:template <class _A1, class _A2>
        -: 2169:class __promote_imp<_A1, _A2, void, true>
        -: 2170:{
        -: 2171:private:
        -: 2172:    typedef typename __promote_imp<_A1>::type __type1;
        -: 2173:    typedef typename __promote_imp<_A2>::type __type2;
        -: 2174:public:
        -: 2175:    typedef decltype(__type1() + __type2()) type;
        -: 2176:    static const bool value = true;
        -: 2177:};
        -: 2178:
        -: 2179:template <class _A1>
        -: 2180:class __promote_imp<_A1, void, void, true>
        -: 2181:{
        -: 2182:public:
        -: 2183:    typedef typename __numeric_type<_A1>::type type;
        -: 2184:    static const bool value = true;
        -: 2185:};
        -: 2186:
        -: 2187:template <class _A1, class _A2 = void, class _A3 = void>
        -: 2188:class __promote : public __promote_imp<_A1, _A2, _A3> {};
        -: 2189:
        -: 2190:// make_signed / make_unsigned
        -: 2191:
        -: 2192:typedef
        -: 2193:    __type_list<signed char,
        -: 2194:    __type_list<signed short,
        -: 2195:    __type_list<signed int,
        -: 2196:    __type_list<signed long,
        -: 2197:    __type_list<signed long long,
        -: 2198:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2199:    __type_list<__int128_t,
        -: 2200:#endif
        -: 2201:    __nat
        -: 2202:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2203:    >
        -: 2204:#endif
        -: 2205:    > > > > > __signed_types;
        -: 2206:
        -: 2207:typedef
        -: 2208:    __type_list<unsigned char,
        -: 2209:    __type_list<unsigned short,
        -: 2210:    __type_list<unsigned int,
        -: 2211:    __type_list<unsigned long,
        -: 2212:    __type_list<unsigned long long,
        -: 2213:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2214:    __type_list<__uint128_t,
        -: 2215:#endif
        -: 2216:    __nat
        -: 2217:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2218:    >
        -: 2219:#endif
        -: 2220:    > > > > > __unsigned_types;
        -: 2221:
        -: 2222:template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)> struct __find_first;
        -: 2223:
        -: 2224:template <class _Hp, class _Tp, size_t _Size>
        -: 2225:struct __find_first<__type_list<_Hp, _Tp>, _Size, true>
        -: 2226:{
        -: 2227:    typedef _LIBCPP_NODEBUG_TYPE _Hp type;
        -: 2228:};
        -: 2229:
        -: 2230:template <class _Hp, class _Tp, size_t _Size>
        -: 2231:struct __find_first<__type_list<_Hp, _Tp>, _Size, false>
        -: 2232:{
        -: 2233:    typedef _LIBCPP_NODEBUG_TYPE typename __find_first<_Tp, _Size>::type type;
        -: 2234:};
        -: 2235:
        -: 2236:template <class _Tp, class _Up, bool = is_const<typename remove_reference<_Tp>::type>::value,
        -: 2237:                             bool = is_volatile<typename remove_reference<_Tp>::type>::value>
        -: 2238:struct __apply_cv
        -: 2239:{
        -: 2240:    typedef _LIBCPP_NODEBUG_TYPE _Up type;
        -: 2241:};
        -: 2242:
        -: 2243:template <class _Tp, class _Up>
        -: 2244:struct __apply_cv<_Tp, _Up, true, false>
        -: 2245:{
        -: 2246:    typedef _LIBCPP_NODEBUG_TYPE const _Up type;
        -: 2247:};
        -: 2248:
        -: 2249:template <class _Tp, class _Up>
        -: 2250:struct __apply_cv<_Tp, _Up, false, true>
        -: 2251:{
        -: 2252:    typedef volatile _Up type;
        -: 2253:};
        -: 2254:
        -: 2255:template <class _Tp, class _Up>
        -: 2256:struct __apply_cv<_Tp, _Up, true, true>
        -: 2257:{
        -: 2258:    typedef const volatile _Up type;
        -: 2259:};
        -: 2260:
        -: 2261:template <class _Tp, class _Up>
        -: 2262:struct __apply_cv<_Tp&, _Up, false, false>
        -: 2263:{
        -: 2264:    typedef _Up& type;
        -: 2265:};
        -: 2266:
        -: 2267:template <class _Tp, class _Up>
        -: 2268:struct __apply_cv<_Tp&, _Up, true, false>
        -: 2269:{
        -: 2270:    typedef const _Up& type;
        -: 2271:};
        -: 2272:
        -: 2273:template <class _Tp, class _Up>
        -: 2274:struct __apply_cv<_Tp&, _Up, false, true>
        -: 2275:{
        -: 2276:    typedef volatile _Up& type;
        -: 2277:};
        -: 2278:
        -: 2279:template <class _Tp, class _Up>
        -: 2280:struct __apply_cv<_Tp&, _Up, true, true>
        -: 2281:{
        -: 2282:    typedef const volatile _Up& type;
        -: 2283:};
        -: 2284:
        -: 2285:template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>
        -: 2286:struct __make_signed {};
        -: 2287:
        -: 2288:template <class _Tp>
        -: 2289:struct __make_signed<_Tp, true>
        -: 2290:{
        -: 2291:    typedef typename __find_first<__signed_types, sizeof(_Tp)>::type type;
        -: 2292:};
        -: 2293:
        -: 2294:template <> struct __make_signed<bool,               true> {};
        -: 2295:template <> struct __make_signed<  signed short,     true> {typedef short     type;};
        -: 2296:template <> struct __make_signed<unsigned short,     true> {typedef short     type;};
        -: 2297:template <> struct __make_signed<  signed int,       true> {typedef int       type;};
        -: 2298:template <> struct __make_signed<unsigned int,       true> {typedef int       type;};
        -: 2299:template <> struct __make_signed<  signed long,      true> {typedef long      type;};
        -: 2300:template <> struct __make_signed<unsigned long,      true> {typedef long      type;};
        -: 2301:template <> struct __make_signed<  signed long long, true> {typedef long long type;};
        -: 2302:template <> struct __make_signed<unsigned long long, true> {typedef long long type;};
        -: 2303:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2304:template <> struct __make_signed<__int128_t,         true> {typedef __int128_t type;};
        -: 2305:template <> struct __make_signed<__uint128_t,        true> {typedef __int128_t type;};
        -: 2306:#endif
        -: 2307:
        -: 2308:template <class _Tp>
        -: 2309:struct _LIBCPP_TEMPLATE_VIS make_signed
        -: 2310:{
        -: 2311:    typedef typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type type;
        -: 2312:};
        -: 2313:
        -: 2314:#if _LIBCPP_STD_VER > 11
        -: 2315:template <class _Tp> using make_signed_t = typename make_signed<_Tp>::type;
        -: 2316:#endif
        -: 2317:
        -: 2318:template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>
        -: 2319:struct __make_unsigned {};
        -: 2320:
        -: 2321:template <class _Tp>
        -: 2322:struct __make_unsigned<_Tp, true>
        -: 2323:{
        -: 2324:    typedef typename __find_first<__unsigned_types, sizeof(_Tp)>::type type;
        -: 2325:};
        -: 2326:
        -: 2327:template <> struct __make_unsigned<bool,               true> {};
        -: 2328:template <> struct __make_unsigned<  signed short,     true> {typedef unsigned short     type;};
        -: 2329:template <> struct __make_unsigned<unsigned short,     true> {typedef unsigned short     type;};
        -: 2330:template <> struct __make_unsigned<  signed int,       true> {typedef unsigned int       type;};
        -: 2331:template <> struct __make_unsigned<unsigned int,       true> {typedef unsigned int       type;};
        -: 2332:template <> struct __make_unsigned<  signed long,      true> {typedef unsigned long      type;};
        -: 2333:template <> struct __make_unsigned<unsigned long,      true> {typedef unsigned long      type;};
        -: 2334:template <> struct __make_unsigned<  signed long long, true> {typedef unsigned long long type;};
        -: 2335:template <> struct __make_unsigned<unsigned long long, true> {typedef unsigned long long type;};
        -: 2336:#ifndef _LIBCPP_HAS_NO_INT128
        -: 2337:template <> struct __make_unsigned<__int128_t,         true> {typedef __uint128_t        type;};
        -: 2338:template <> struct __make_unsigned<__uint128_t,        true> {typedef __uint128_t        type;};
        -: 2339:#endif
        -: 2340:
        -: 2341:template <class _Tp>
        -: 2342:struct _LIBCPP_TEMPLATE_VIS make_unsigned
        -: 2343:{
        -: 2344:    typedef typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type type;
        -: 2345:};
        -: 2346:
        -: 2347:#if _LIBCPP_STD_VER > 11
        -: 2348:template <class _Tp> using make_unsigned_t = typename make_unsigned<_Tp>::type;
        -: 2349:#endif
        -: 2350:
        -: 2351:#if _LIBCPP_STD_VER > 14
        -: 2352:template <class...> using void_t = void;
        -: 2353:#endif
        -: 2354:
        -: 2355:#if _LIBCPP_STD_VER > 17
        -: 2356:// Let COND_RES(X, Y) be:
        -: 2357:template <class _Tp, class _Up>
        -: 2358:using __cond_type = decltype(false ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>());
        -: 2359:
        -: 2360:template <class _Tp, class _Up, class = void>
        -: 2361:struct __common_type3 {};
        -: 2362:
        -: 2363:// sub-bullet 4 - "if COND_RES(CREF(D1), CREF(D2)) denotes a type..."
        -: 2364:template <class _Tp, class _Up>
        -: 2365:struct __common_type3<_Tp, _Up, void_t<__cond_type<const _Tp&, const _Up&>>>
        -: 2366:{
        -: 2367:    using type = remove_cvref_t<__cond_type<const _Tp&, const _Up&>>;
        -: 2368:};
        -: 2369:
        -: 2370:template <class _Tp, class _Up, class = void>
        -: 2371:struct __common_type2_imp : __common_type3<_Tp, _Up> {};
        -: 2372:#else
        -: 2373:template <class _Tp, class _Up, class = void>
        -: 2374:struct __common_type2_imp {};
        -: 2375:#endif
        -: 2376:
        -: 2377:// sub-bullet 3 - "if decay_t<decltype(false ? declval<D1>() : declval<D2>())> ..."
        -: 2378:template <class _Tp, class _Up>
        -: 2379:struct __common_type2_imp<_Tp, _Up,
        -: 2380:                          typename __void_t<decltype(
        -: 2381:                                            true ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>()
        -: 2382:                                            )>::type>
        -: 2383:{
        -: 2384:  typedef _LIBCPP_NODEBUG_TYPE typename decay<decltype(
        -: 2385:                         true ? _VSTD::declval<_Tp>() : _VSTD::declval<_Up>()
        -: 2386:                         )>::type type;
        -: 2387:};
        -: 2388:
        -: 2389:template <class, class = void>
        -: 2390:struct __common_type_impl {};
        -: 2391:
        -: 2392:// Clang provides variadic templates in C++03 as an extension.
        -: 2393:#if !defined(_LIBCPP_CXX03_LANG) || defined(__clang__)
        -: 2394:# define _LIBCPP_OPTIONAL_PACK(...) , __VA_ARGS__
        -: 2395:template <class... Tp>
        -: 2396:struct __common_types;
        -: 2397:template <class... _Tp>
        -: 2398:struct _LIBCPP_TEMPLATE_VIS common_type;
        -: 2399:#else
        -: 2400:# define _LIBCPP_OPTIONAL_PACK(...)
        -: 2401:struct __no_arg;
        -: 2402:template <class _Tp, class _Up, class = __no_arg>
        -: 2403:struct __common_types;
        -: 2404:template <class _Tp = __no_arg, class _Up = __no_arg, class _Vp = __no_arg,
        -: 2405:          class _Unused = __no_arg>
        -: 2406:struct common_type {
        -: 2407:  static_assert(sizeof(_Unused) == 0,
        -: 2408:                "common_type accepts at most 3 arguments in C++03");
        -: 2409:};
        -: 2410:#endif // _LIBCPP_CXX03_LANG
        -: 2411:
        -: 2412:template <class _Tp, class _Up>
        -: 2413:struct __common_type_impl<
        -: 2414:    __common_types<_Tp, _Up>,
        -: 2415:    typename __void_t<typename common_type<_Tp, _Up>::type>::type>
        -: 2416:{
        -: 2417:  typedef typename common_type<_Tp, _Up>::type type;
        -: 2418:};
        -: 2419:
        -: 2420:template <class _Tp, class _Up, class _Vp _LIBCPP_OPTIONAL_PACK(class... _Rest)>
        -: 2421:struct __common_type_impl<
        -: 2422:    __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)>,
        -: 2423:    typename __void_t<typename common_type<_Tp, _Up>::type>::type>
        -: 2424:    : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type,
        -: 2425:                                        _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)> > {
        -: 2426:};
        -: 2427:
        -: 2428:// bullet 1 - sizeof...(Tp) == 0
        -: 2429:
        -: 2430:template <>
        -: 2431:struct _LIBCPP_TEMPLATE_VIS common_type<> {};
        -: 2432:
        -: 2433:// bullet 2 - sizeof...(Tp) == 1
        -: 2434:
        -: 2435:template <class _Tp>
        -: 2436:struct _LIBCPP_TEMPLATE_VIS common_type<_Tp>
        -: 2437:    : public common_type<_Tp, _Tp> {};
        -: 2438:
        -: 2439:// bullet 3 - sizeof...(Tp) == 2
        -: 2440:
        -: 2441:// sub-bullet 1 - "If is_same_v<T1, D1> is false or ..."
        -: 2442:template <class _Tp, class _Up>
        -: 2443:struct _LIBCPP_TEMPLATE_VIS common_type<_Tp, _Up>
        -: 2444:    : conditional<
        -: 2445:        _IsSame<_Tp, typename decay<_Tp>::type>::value && _IsSame<_Up, typename decay<_Up>::type>::value,
        -: 2446:        __common_type2_imp<_Tp, _Up>,
        -: 2447:        common_type<typename decay<_Tp>::type, typename decay<_Up>::type>
        -: 2448:    >::type
        -: 2449:{};
        -: 2450:
        -: 2451:// bullet 4 - sizeof...(Tp) > 2
        -: 2452:
        -: 2453:template <class _Tp, class _Up, class _Vp _LIBCPP_OPTIONAL_PACK(class... _Rest)>
        -: 2454:struct _LIBCPP_TEMPLATE_VIS
        -: 2455:    common_type<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)>
        -: 2456:    : __common_type_impl<
        -: 2457:          __common_types<_Tp, _Up, _Vp _LIBCPP_OPTIONAL_PACK(_Rest...)> > {};
        -: 2458:
        -: 2459:#undef _LIBCPP_OPTIONAL_PACK
        -: 2460:
        -: 2461:#if _LIBCPP_STD_VER > 11
        -: 2462:template <class ..._Tp> using common_type_t = typename common_type<_Tp...>::type;
        -: 2463:#endif
        -: 2464:
        -: 2465:// is_assignable
        -: 2466:
        -: 2467:template<typename, typename _Tp> struct __select_2nd { typedef _LIBCPP_NODEBUG_TYPE _Tp type; };
        -: 2468:
        -: 2469:#if __has_keyword(__is_assignable)
        -: 2470:
        -: 2471:template<class _Tp, class _Up>
        -: 2472:struct _LIBCPP_TEMPLATE_VIS is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> { };
        -: 2473:
        -: 2474:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2475:template <class _Tp, class _Arg>
        -: 2476:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_assignable_v = __is_assignable(_Tp, _Arg);
        -: 2477:#endif
        -: 2478:
        -: 2479:#else // __has_keyword(__is_assignable)
        -: 2480:
        -: 2481:template <class _Tp, class _Arg>
        -: 2482:typename __select_2nd<decltype((_VSTD::declval<_Tp>() = _VSTD::declval<_Arg>())), true_type>::type
        -: 2483:__is_assignable_test(int);
        -: 2484:
        -: 2485:template <class, class>
        -: 2486:false_type __is_assignable_test(...);
        -: 2487:
        -: 2488:
        -: 2489:template <class _Tp, class _Arg, bool = is_void<_Tp>::value || is_void<_Arg>::value>
        -: 2490:struct __is_assignable_imp
        -: 2491:    : public decltype((_VSTD::__is_assignable_test<_Tp, _Arg>(0))) {};
        -: 2492:
        -: 2493:template <class _Tp, class _Arg>
        -: 2494:struct __is_assignable_imp<_Tp, _Arg, true>
        -: 2495:    : public false_type
        -: 2496:{
        -: 2497:};
        -: 2498:
        -: 2499:template <class _Tp, class _Arg>
        -: 2500:struct is_assignable
        -: 2501:    : public __is_assignable_imp<_Tp, _Arg> {};
        -: 2502:
        -: 2503:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2504:template <class _Tp, class _Arg>
        -: 2505:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_assignable_v
        -: 2506:    = is_assignable<_Tp, _Arg>::value;
        -: 2507:#endif
        -: 2508:
        -: 2509:#endif  // __has_keyword(__is_assignable)
        -: 2510:
        -: 2511:// is_copy_assignable
        -: 2512:
        -: 2513:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_copy_assignable
        -: 2514:    : public is_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 2515:                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
        -: 2516:
        -: 2517:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2518:template <class _Tp>
        -: 2519:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_copy_assignable_v
        -: 2520:    = is_copy_assignable<_Tp>::value;
        -: 2521:#endif
        -: 2522:
        -: 2523:// is_move_assignable
        -: 2524:
        -: 2525:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_move_assignable
        -: 2526:    : public is_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 2527:                           typename add_rvalue_reference<_Tp>::type> {};
        -: 2528:
        -: 2529:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2530:template <class _Tp>
        -: 2531:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_move_assignable_v
        -: 2532:    = is_move_assignable<_Tp>::value;
        -: 2533:#endif
        -: 2534:
        -: 2535:// is_destructible
        -: 2536:
        -: 2537:#if __has_keyword(__is_destructible)
        -: 2538:
        -: 2539:template<class _Tp>
        -: 2540:struct _LIBCPP_TEMPLATE_VIS is_destructible : _BoolConstant<__is_destructible(_Tp)> { };
        -: 2541:
        -: 2542:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2543:template <class _Tp>
        -: 2544:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_destructible_v = __is_destructible(_Tp);
        -: 2545:#endif
        -: 2546:
        -: 2547:#else // __has_keyword(__is_destructible)
        -: 2548:
        -: 2549://  if it's a reference, return true
        -: 2550://  if it's a function, return false
        -: 2551://  if it's   void,     return false
        -: 2552://  if it's an array of unknown bound, return false
        -: 2553://  Otherwise, return "std::declval<_Up&>().~_Up()" is well-formed
        -: 2554://    where _Up is remove_all_extents<_Tp>::type
        -: 2555:
        -: 2556:template <class>
        -: 2557:struct __is_destructible_apply { typedef int type; };
        -: 2558:
        -: 2559:template <typename _Tp>
        -: 2560:struct __is_destructor_wellformed {
        -: 2561:    template <typename _Tp1>
        -: 2562:    static char  __test (
        -: 2563:        typename __is_destructible_apply<decltype(_VSTD::declval<_Tp1&>().~_Tp1())>::type
        -: 2564:    );
        -: 2565:
        -: 2566:    template <typename _Tp1>
        -: 2567:    static __two __test (...);
        -: 2568:
        -: 2569:    static const bool value = sizeof(__test<_Tp>(12)) == sizeof(char);
        -: 2570:};
        -: 2571:
        -: 2572:template <class _Tp, bool>
        -: 2573:struct __destructible_imp;
        -: 2574:
        -: 2575:template <class _Tp>
        -: 2576:struct __destructible_imp<_Tp, false>
        -: 2577:   : public _VSTD::integral_constant<bool,
        -: 2578:        __is_destructor_wellformed<typename _VSTD::remove_all_extents<_Tp>::type>::value> {};
        -: 2579:
        -: 2580:template <class _Tp>
        -: 2581:struct __destructible_imp<_Tp, true>
        -: 2582:    : public _VSTD::true_type {};
        -: 2583:
        -: 2584:template <class _Tp, bool>
        -: 2585:struct __destructible_false;
        -: 2586:
        -: 2587:template <class _Tp>
        -: 2588:struct __destructible_false<_Tp, false> : public __destructible_imp<_Tp, _VSTD::is_reference<_Tp>::value> {};
        -: 2589:
        -: 2590:template <class _Tp>
        -: 2591:struct __destructible_false<_Tp, true> : public _VSTD::false_type {};
        -: 2592:
        -: 2593:template <class _Tp>
        -: 2594:struct is_destructible
        -: 2595:    : public __destructible_false<_Tp, _VSTD::is_function<_Tp>::value> {};
        -: 2596:
        -: 2597:template <class _Tp>
        -: 2598:struct is_destructible<_Tp[]>
        -: 2599:    : public _VSTD::false_type {};
        -: 2600:
        -: 2601:template <>
        -: 2602:struct is_destructible<void>
        -: 2603:    : public _VSTD::false_type {};
        -: 2604:
        -: 2605:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 2606:template <class _Tp>
        -: 2607:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_destructible_v
        -: 2608:    = is_destructible<_Tp>::value;
        -: 2609:#endif
        -: 2610:
        -: 2611:#endif // __has_keyword(__is_destructible)
        -: 2612:
        -: 2613:// move
        -: 2614:
        -: 2615:template <class _Tp>
        -: 2616:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 2617:typename remove_reference<_Tp>::type&&
        -: 2618:move(_Tp&& __t) _NOEXCEPT
        -: 2619:{
        -: 2620:    typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up;
        -: 2621:    return static_cast<_Up&&>(__t);
        -: 2622:}
        -: 2623:
        -: 2624:template <class _Tp>
        -: 2625:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 2626:_Tp&&
    #####: 2627:forward(typename remove_reference<_Tp>::type& __t) _NOEXCEPT
        -: 2628:{
    #####: 2629:    return static_cast<_Tp&&>(__t);
        -: 2630:}
        -: 2631:
        -: 2632:template <class _Tp>
        -: 2633:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 2634:_Tp&&
        -: 2635:forward(typename remove_reference<_Tp>::type&& __t) _NOEXCEPT
        -: 2636:{
        -: 2637:    static_assert(!is_lvalue_reference<_Tp>::value,
        -: 2638:                  "can not forward an rvalue as an lvalue");
        -: 2639:    return static_cast<_Tp&&>(__t);
        -: 2640:}
        -: 2641:
        -: 2642:template <class _Tp>
        -: 2643:inline _LIBCPP_INLINE_VISIBILITY
        -: 2644:typename decay<_Tp>::type
        -: 2645:__decay_copy(_Tp&& __t)
        -: 2646:{
        -: 2647:    return _VSTD::forward<_Tp>(__t);
        -: 2648:}
        -: 2649:
        -: 2650:template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>
        -: 2651:struct __member_pointer_traits_imp
        -: 2652:{
        -: 2653:};
        -: 2654:
        -: 2655:template <class _Rp, class _Class, class ..._Param>
        -: 2656:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...), true, false>
        -: 2657:{
        -: 2658:    typedef _Class _ClassType;
        -: 2659:    typedef _Rp _ReturnType;
        -: 2660:    typedef _Rp (_FnType) (_Param...);
        -: 2661:};
        -: 2662:
        -: 2663:template <class _Rp, class _Class, class ..._Param>
        -: 2664:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...), true, false>
        -: 2665:{
        -: 2666:    typedef _Class _ClassType;
        -: 2667:    typedef _Rp _ReturnType;
        -: 2668:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2669:};
        -: 2670:
        -: 2671:template <class _Rp, class _Class, class ..._Param>
        -: 2672:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const, true, false>
        -: 2673:{
        -: 2674:    typedef _Class const _ClassType;
        -: 2675:    typedef _Rp _ReturnType;
        -: 2676:    typedef _Rp (_FnType) (_Param...);
        -: 2677:};
        -: 2678:
        -: 2679:template <class _Rp, class _Class, class ..._Param>
        -: 2680:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const, true, false>
        -: 2681:{
        -: 2682:    typedef _Class const _ClassType;
        -: 2683:    typedef _Rp _ReturnType;
        -: 2684:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2685:};
        -: 2686:
        -: 2687:template <class _Rp, class _Class, class ..._Param>
        -: 2688:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile, true, false>
        -: 2689:{
        -: 2690:    typedef _Class volatile _ClassType;
        -: 2691:    typedef _Rp _ReturnType;
        -: 2692:    typedef _Rp (_FnType) (_Param...);
        -: 2693:};
        -: 2694:
        -: 2695:template <class _Rp, class _Class, class ..._Param>
        -: 2696:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile, true, false>
        -: 2697:{
        -: 2698:    typedef _Class volatile _ClassType;
        -: 2699:    typedef _Rp _ReturnType;
        -: 2700:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2701:};
        -: 2702:
        -: 2703:template <class _Rp, class _Class, class ..._Param>
        -: 2704:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile, true, false>
        -: 2705:{
        -: 2706:    typedef _Class const volatile _ClassType;
        -: 2707:    typedef _Rp _ReturnType;
        -: 2708:    typedef _Rp (_FnType) (_Param...);
        -: 2709:};
        -: 2710:
        -: 2711:template <class _Rp, class _Class, class ..._Param>
        -: 2712:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile, true, false>
        -: 2713:{
        -: 2714:    typedef _Class const volatile _ClassType;
        -: 2715:    typedef _Rp _ReturnType;
        -: 2716:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2717:};
        -: 2718:
        -: 2719:#if __has_feature(cxx_reference_qualified_functions) || defined(_LIBCPP_COMPILER_GCC)
        -: 2720:
        -: 2721:template <class _Rp, class _Class, class ..._Param>
        -: 2722:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &, true, false>
        -: 2723:{
        -: 2724:    typedef _Class& _ClassType;
        -: 2725:    typedef _Rp _ReturnType;
        -: 2726:    typedef _Rp (_FnType) (_Param...);
        -: 2727:};
        -: 2728:
        -: 2729:template <class _Rp, class _Class, class ..._Param>
        -: 2730:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &, true, false>
        -: 2731:{
        -: 2732:    typedef _Class& _ClassType;
        -: 2733:    typedef _Rp _ReturnType;
        -: 2734:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2735:};
        -: 2736:
        -: 2737:template <class _Rp, class _Class, class ..._Param>
        -: 2738:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&, true, false>
        -: 2739:{
        -: 2740:    typedef _Class const& _ClassType;
        -: 2741:    typedef _Rp _ReturnType;
        -: 2742:    typedef _Rp (_FnType) (_Param...);
        -: 2743:};
        -: 2744:
        -: 2745:template <class _Rp, class _Class, class ..._Param>
        -: 2746:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&, true, false>
        -: 2747:{
        -: 2748:    typedef _Class const& _ClassType;
        -: 2749:    typedef _Rp _ReturnType;
        -: 2750:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2751:};
        -: 2752:
        -: 2753:template <class _Rp, class _Class, class ..._Param>
        -: 2754:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&, true, false>
        -: 2755:{
        -: 2756:    typedef _Class volatile& _ClassType;
        -: 2757:    typedef _Rp _ReturnType;
        -: 2758:    typedef _Rp (_FnType) (_Param...);
        -: 2759:};
        -: 2760:
        -: 2761:template <class _Rp, class _Class, class ..._Param>
        -: 2762:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&, true, false>
        -: 2763:{
        -: 2764:    typedef _Class volatile& _ClassType;
        -: 2765:    typedef _Rp _ReturnType;
        -: 2766:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2767:};
        -: 2768:
        -: 2769:template <class _Rp, class _Class, class ..._Param>
        -: 2770:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&, true, false>
        -: 2771:{
        -: 2772:    typedef _Class const volatile& _ClassType;
        -: 2773:    typedef _Rp _ReturnType;
        -: 2774:    typedef _Rp (_FnType) (_Param...);
        -: 2775:};
        -: 2776:
        -: 2777:template <class _Rp, class _Class, class ..._Param>
        -: 2778:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&, true, false>
        -: 2779:{
        -: 2780:    typedef _Class const volatile& _ClassType;
        -: 2781:    typedef _Rp _ReturnType;
        -: 2782:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2783:};
        -: 2784:
        -: 2785:template <class _Rp, class _Class, class ..._Param>
        -: 2786:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) &&, true, false>
        -: 2787:{
        -: 2788:    typedef _Class&& _ClassType;
        -: 2789:    typedef _Rp _ReturnType;
        -: 2790:    typedef _Rp (_FnType) (_Param...);
        -: 2791:};
        -: 2792:
        -: 2793:template <class _Rp, class _Class, class ..._Param>
        -: 2794:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) &&, true, false>
        -: 2795:{
        -: 2796:    typedef _Class&& _ClassType;
        -: 2797:    typedef _Rp _ReturnType;
        -: 2798:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2799:};
        -: 2800:
        -: 2801:template <class _Rp, class _Class, class ..._Param>
        -: 2802:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&&, true, false>
        -: 2803:{
        -: 2804:    typedef _Class const&& _ClassType;
        -: 2805:    typedef _Rp _ReturnType;
        -: 2806:    typedef _Rp (_FnType) (_Param...);
        -: 2807:};
        -: 2808:
        -: 2809:template <class _Rp, class _Class, class ..._Param>
        -: 2810:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&&, true, false>
        -: 2811:{
        -: 2812:    typedef _Class const&& _ClassType;
        -: 2813:    typedef _Rp _ReturnType;
        -: 2814:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2815:};
        -: 2816:
        -: 2817:template <class _Rp, class _Class, class ..._Param>
        -: 2818:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&&, true, false>
        -: 2819:{
        -: 2820:    typedef _Class volatile&& _ClassType;
        -: 2821:    typedef _Rp _ReturnType;
        -: 2822:    typedef _Rp (_FnType) (_Param...);
        -: 2823:};
        -: 2824:
        -: 2825:template <class _Rp, class _Class, class ..._Param>
        -: 2826:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&&, true, false>
        -: 2827:{
        -: 2828:    typedef _Class volatile&& _ClassType;
        -: 2829:    typedef _Rp _ReturnType;
        -: 2830:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2831:};
        -: 2832:
        -: 2833:template <class _Rp, class _Class, class ..._Param>
        -: 2834:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&&, true, false>
        -: 2835:{
        -: 2836:    typedef _Class const volatile&& _ClassType;
        -: 2837:    typedef _Rp _ReturnType;
        -: 2838:    typedef _Rp (_FnType) (_Param...);
        -: 2839:};
        -: 2840:
        -: 2841:template <class _Rp, class _Class, class ..._Param>
        -: 2842:struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&&, true, false>
        -: 2843:{
        -: 2844:    typedef _Class const volatile&& _ClassType;
        -: 2845:    typedef _Rp _ReturnType;
        -: 2846:    typedef _Rp (_FnType) (_Param..., ...);
        -: 2847:};
        -: 2848:
        -: 2849:#endif  // __has_feature(cxx_reference_qualified_functions) || defined(_LIBCPP_COMPILER_GCC)
        -: 2850:
        -: 2851:
        -: 2852:template <class _Rp, class _Class>
        -: 2853:struct __member_pointer_traits_imp<_Rp _Class::*, false, true>
        -: 2854:{
        -: 2855:    typedef _Class _ClassType;
        -: 2856:    typedef _Rp _ReturnType;
        -: 2857:};
        -: 2858:
        -: 2859:template <class _MP>
        -: 2860:struct __member_pointer_traits
        -: 2861:    : public __member_pointer_traits_imp<typename remove_cv<_MP>::type,
        -: 2862:                    is_member_function_pointer<_MP>::value,
        -: 2863:                    is_member_object_pointer<_MP>::value>
        -: 2864:{
        -: 2865://     typedef ... _ClassType;
        -: 2866://     typedef ... _ReturnType;
        -: 2867://     typedef ... _FnType;
        -: 2868:};
        -: 2869:
        -: 2870:
        -: 2871:template <class _DecayedFp>
        -: 2872:struct __member_pointer_class_type {};
        -: 2873:
        -: 2874:template <class _Ret, class _ClassType>
        -: 2875:struct __member_pointer_class_type<_Ret _ClassType::*> {
        -: 2876:  typedef _ClassType type;
        -: 2877:};
        -: 2878:
        -: 2879:// template <class T, class... Args> struct is_constructible;
        -: 2880:
        -: 2881:namespace __is_construct
        -: 2882:{
        -: 2883:struct __nat {};
        -: 2884:}
        -: 2885:
        -: 2886:#if !defined(_LIBCPP_CXX03_LANG) && (!__has_feature(is_constructible) || \
        -: 2887:    defined(_LIBCPP_TESTING_FALLBACK_IS_CONSTRUCTIBLE))
        -: 2888:
        -: 2889:template <class _Tp, class... _Args>
        -: 2890:struct __libcpp_is_constructible;
        -: 2891:
        -: 2892:template <class _To, class _From>
        -: 2893:struct __is_invalid_base_to_derived_cast {
        -: 2894:  static_assert(is_reference<_To>::value, "Wrong specialization");
        -: 2895:  using _RawFrom = __uncvref_t<_From>;
        -: 2896:  using _RawTo = __uncvref_t<_To>;
        -: 2897:  static const bool value = _And<
        -: 2898:        _IsNotSame<_RawFrom, _RawTo>,
        -: 2899:        is_base_of<_RawFrom, _RawTo>,
        -: 2900:        _Not<__libcpp_is_constructible<_RawTo, _From>>
        -: 2901:  >::value;
        -: 2902:};
        -: 2903:
        -: 2904:template <class _To, class _From>
        -: 2905:struct __is_invalid_lvalue_to_rvalue_cast : false_type {
        -: 2906:  static_assert(is_reference<_To>::value, "Wrong specialization");
        -: 2907:};
        -: 2908:
        -: 2909:template <class _ToRef, class _FromRef>
        -: 2910:struct __is_invalid_lvalue_to_rvalue_cast<_ToRef&&, _FromRef&> {
        -: 2911:  using _RawFrom = __uncvref_t<_FromRef>;
        -: 2912:  using _RawTo = __uncvref_t<_ToRef>;
        -: 2913:  static const bool value = _And<
        -: 2914:      _Not<is_function<_RawTo>>,
        -: 2915:      _Or<
        -: 2916:        _IsSame<_RawFrom, _RawTo>,
        -: 2917:        is_base_of<_RawTo, _RawFrom>>
        -: 2918:    >::value;
        -: 2919:};
        -: 2920:
        -: 2921:struct __is_constructible_helper
        -: 2922:{
        -: 2923:    template <class _To>
        -: 2924:    static void __eat(_To);
        -: 2925:
        -: 2926:    // This overload is needed to work around a Clang bug that disallows
        -: 2927:    // static_cast<T&&>(e) for non-reference-compatible types.
        -: 2928:    // Example: static_cast<int&&>(declval<double>());
        -: 2929:    // NOTE: The static_cast implementation below is required to support
        -: 2930:    //  classes with explicit conversion operators.
        -: 2931:    template <class _To, class _From,
        -: 2932:              class = decltype(__eat<_To>(_VSTD::declval<_From>()))>
        -: 2933:    static true_type __test_cast(int);
        -: 2934:
        -: 2935:    template <class _To, class _From,
        -: 2936:              class = decltype(static_cast<_To>(_VSTD::declval<_From>()))>
        -: 2937:    static integral_constant<bool,
        -: 2938:        !__is_invalid_base_to_derived_cast<_To, _From>::value &&
        -: 2939:        !__is_invalid_lvalue_to_rvalue_cast<_To, _From>::value
        -: 2940:    > __test_cast(long);
        -: 2941:
        -: 2942:    template <class, class>
        -: 2943:    static false_type __test_cast(...);
        -: 2944:
        -: 2945:    template <class _Tp, class ..._Args,
        -: 2946:        class = decltype(_Tp(_VSTD::declval<_Args>()...))>
        -: 2947:    static true_type __test_nary(int);
        -: 2948:    template <class _Tp, class...>
        -: 2949:    static false_type __test_nary(...);
        -: 2950:
        -: 2951:    template <class _Tp, class _A0, class = decltype(::new _Tp(_VSTD::declval<_A0>()))>
        -: 2952:    static is_destructible<_Tp> __test_unary(int);
        -: 2953:    template <class, class>
        -: 2954:    static false_type __test_unary(...);
        -: 2955:};
        -: 2956:
        -: 2957:template <class _Tp, bool = is_void<_Tp>::value>
        -: 2958:struct __is_default_constructible
        -: 2959:    : decltype(__is_constructible_helper::__test_nary<_Tp>(0))
        -: 2960:{};
        -: 2961:
        -: 2962:template <class _Tp>
        -: 2963:struct __is_default_constructible<_Tp, true> : false_type {};
        -: 2964:
        -: 2965:template <class _Tp>
        -: 2966:struct __is_default_constructible<_Tp[], false> : false_type {};
        -: 2967:
        -: 2968:template <class _Tp, size_t _Nx>
        -: 2969:struct __is_default_constructible<_Tp[_Nx], false>
        -: 2970:    : __is_default_constructible<typename remove_all_extents<_Tp>::type>  {};
        -: 2971:
        -: 2972:template <class _Tp, class... _Args>
        -: 2973:struct __libcpp_is_constructible
        -: 2974:{
        -: 2975:  static_assert(sizeof...(_Args) > 1, "Wrong specialization");
        -: 2976:  typedef decltype(__is_constructible_helper::__test_nary<_Tp, _Args...>(0))
        -: 2977:      type;
        -: 2978:};
        -: 2979:
        -: 2980:template <class _Tp>
        -: 2981:struct __libcpp_is_constructible<_Tp> : __is_default_constructible<_Tp> {};
        -: 2982:
        -: 2983:template <class _Tp, class _A0>
        -: 2984:struct __libcpp_is_constructible<_Tp, _A0>
        -: 2985:    : public decltype(__is_constructible_helper::__test_unary<_Tp, _A0>(0))
        -: 2986:{};
        -: 2987:
        -: 2988:template <class _Tp, class _A0>
        -: 2989:struct __libcpp_is_constructible<_Tp&, _A0>
        -: 2990:    : public decltype(__is_constructible_helper::
        -: 2991:    __test_cast<_Tp&, _A0>(0))
        -: 2992:{};
        -: 2993:
        -: 2994:template <class _Tp, class _A0>
        -: 2995:struct __libcpp_is_constructible<_Tp&&, _A0>
        -: 2996:    : public decltype(__is_constructible_helper::
        -: 2997:    __test_cast<_Tp&&, _A0>(0))
        -: 2998:{};
        -: 2999:
        -: 3000:#endif
        -: 3001:
        -: 3002:#if __has_feature(is_constructible)
        -: 3003:template <class _Tp, class ..._Args>
        -: 3004:struct _LIBCPP_TEMPLATE_VIS is_constructible
        -: 3005:    : public integral_constant<bool, __is_constructible(_Tp, _Args...)>
        -: 3006:    {};
        -: 3007:#else
        -: 3008:template <class _Tp, class... _Args>
        -: 3009:struct _LIBCPP_TEMPLATE_VIS is_constructible
        -: 3010:    : public __libcpp_is_constructible<_Tp, _Args...>::type {};
        -: 3011:#endif
        -: 3012:
        -: 3013:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3014:template <class _Tp, class ..._Args>
        -: 3015:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_constructible_v
        -: 3016:    = is_constructible<_Tp, _Args...>::value;
        -: 3017:#endif
        -: 3018:
        -: 3019:// is_default_constructible
        -: 3020:
        -: 3021:template <class _Tp>
        -: 3022:struct _LIBCPP_TEMPLATE_VIS is_default_constructible
        -: 3023:    : public is_constructible<_Tp>
        -: 3024:    {};
        -: 3025:
        -: 3026:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3027:template <class _Tp>
        -: 3028:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_default_constructible_v
        -: 3029:    = is_default_constructible<_Tp>::value;
        -: 3030:#endif
        -: 3031:
        -: 3032:#ifndef _LIBCPP_CXX03_LANG
        -: 3033:// First of all, we can't implement this check in C++03 mode because the {}
        -: 3034:// default initialization syntax isn't valid.
        -: 3035:// Second, we implement the trait in a funny manner with two defaulted template
        -: 3036:// arguments to workaround Clang's PR43454.
        -: 3037:template <class _Tp>
        -: 3038:void __test_implicit_default_constructible(_Tp);
        -: 3039:
        -: 3040:template <class _Tp, class = void, bool = is_default_constructible<_Tp>::value>
        -: 3041:struct __is_implicitly_default_constructible
        -: 3042:    : false_type
        -: 3043:{ };
        -: 3044:
        -: 3045:template <class _Tp>
        -: 3046:struct __is_implicitly_default_constructible<_Tp, decltype(__test_implicit_default_constructible<_Tp const&>({})), true>
        -: 3047:    : true_type
        -: 3048:{ };
        -: 3049:
        -: 3050:template <class _Tp>
        -: 3051:struct __is_implicitly_default_constructible<_Tp, decltype(__test_implicit_default_constructible<_Tp const&>({})), false>
        -: 3052:    : false_type
        -: 3053:{ };
        -: 3054:#endif // !C++03
        -: 3055:
        -: 3056:// is_copy_constructible
        -: 3057:
        -: 3058:template <class _Tp>
        -: 3059:struct _LIBCPP_TEMPLATE_VIS is_copy_constructible
        -: 3060:    : public is_constructible<_Tp,
        -: 3061:                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
        -: 3062:
        -: 3063:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3064:template <class _Tp>
        -: 3065:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_copy_constructible_v
        -: 3066:    = is_copy_constructible<_Tp>::value;
        -: 3067:#endif
        -: 3068:
        -: 3069:// is_move_constructible
        -: 3070:
        -: 3071:template <class _Tp>
        -: 3072:struct _LIBCPP_TEMPLATE_VIS is_move_constructible
        -: 3073:    : public is_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>
        -: 3074:    {};
        -: 3075:
        -: 3076:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3077:template <class _Tp>
        -: 3078:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_move_constructible_v
        -: 3079:    = is_move_constructible<_Tp>::value;
        -: 3080:#endif
        -: 3081:
        -: 3082:// is_trivially_constructible
        -: 3083:
        -: 3084:#if __has_feature(is_trivially_constructible) || _GNUC_VER >= 501
        -: 3085:
        -: 3086:template <class _Tp, class... _Args>
        -: 3087:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible
        -: 3088:    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)>
        -: 3089:{
        -: 3090:};
        -: 3091:
        -: 3092:#else  // !__has_feature(is_trivially_constructible)
        -: 3093:
        -: 3094:template <class _Tp, class... _Args>
        -: 3095:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible
        -: 3096:    : false_type
        -: 3097:{
        -: 3098:};
        -: 3099:
        -: 3100:template <class _Tp>
        -: 3101:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp>
        -: 3102:#if __has_feature(has_trivial_constructor) || defined(_LIBCPP_COMPILER_GCC)
        -: 3103:    : integral_constant<bool, __has_trivial_constructor(_Tp)>
        -: 3104:#else
        -: 3105:    : integral_constant<bool, is_scalar<_Tp>::value>
        -: 3106:#endif
        -: 3107:{
        -: 3108:};
        -: 3109:
        -: 3110:template <class _Tp>
        -: 3111:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&&>
        -: 3112:    : integral_constant<bool, is_scalar<_Tp>::value>
        -: 3113:{
        -: 3114:};
        -: 3115:
        -: 3116:template <class _Tp>
        -: 3117:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, const _Tp&>
        -: 3118:    : integral_constant<bool, is_scalar<_Tp>::value>
        -: 3119:{
        -: 3120:};
        -: 3121:
        -: 3122:template <class _Tp>
        -: 3123:struct _LIBCPP_TEMPLATE_VIS is_trivially_constructible<_Tp, _Tp&>
        -: 3124:    : integral_constant<bool, is_scalar<_Tp>::value>
        -: 3125:{
        -: 3126:};
        -: 3127:
        -: 3128:#endif  // !__has_feature(is_trivially_constructible)
        -: 3129:
        -: 3130:
        -: 3131:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3132:template <class _Tp, class... _Args>
        -: 3133:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_constructible_v
        -: 3134:    = is_trivially_constructible<_Tp, _Args...>::value;
        -: 3135:#endif
        -: 3136:
        -: 3137:// is_trivially_default_constructible
        -: 3138:
        -: 3139:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_default_constructible
        -: 3140:    : public is_trivially_constructible<_Tp>
        -: 3141:    {};
        -: 3142:
        -: 3143:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3144:template <class _Tp>
        -: 3145:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_default_constructible_v
        -: 3146:    = is_trivially_default_constructible<_Tp>::value;
        -: 3147:#endif
        -: 3148:
        -: 3149:// is_trivially_copy_constructible
        -: 3150:
        -: 3151:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_constructible
        -: 3152:    : public is_trivially_constructible<_Tp, typename add_lvalue_reference<const _Tp>::type>
        -: 3153:    {};
        -: 3154:
        -: 3155:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3156:template <class _Tp>
        -: 3157:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copy_constructible_v
        -: 3158:    = is_trivially_copy_constructible<_Tp>::value;
        -: 3159:#endif
        -: 3160:
        -: 3161:// is_trivially_move_constructible
        -: 3162:
        -: 3163:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_constructible
        -: 3164:    : public is_trivially_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>
        -: 3165:    {};
        -: 3166:
        -: 3167:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3168:template <class _Tp>
        -: 3169:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_move_constructible_v
        -: 3170:    = is_trivially_move_constructible<_Tp>::value;
        -: 3171:#endif
        -: 3172:
        -: 3173:// is_trivially_assignable
        -: 3174:
        -: 3175:#if __has_feature(is_trivially_assignable) || _GNUC_VER >= 501
        -: 3176:
        -: 3177:template <class _Tp, class _Arg>
        -: 3178:struct is_trivially_assignable
        -: 3179:    : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)>
        -: 3180:{
        -: 3181:};
        -: 3182:
        -: 3183:#else  // !__has_feature(is_trivially_assignable)
        -: 3184:
        -: 3185:template <class _Tp, class _Arg>
        -: 3186:struct is_trivially_assignable
        -: 3187:    : public false_type {};
        -: 3188:
        -: 3189:template <class _Tp>
        -: 3190:struct is_trivially_assignable<_Tp&, _Tp>
        -: 3191:    : integral_constant<bool, is_scalar<_Tp>::value> {};
        -: 3192:
        -: 3193:template <class _Tp>
        -: 3194:struct is_trivially_assignable<_Tp&, _Tp&>
        -: 3195:    : integral_constant<bool, is_scalar<_Tp>::value> {};
        -: 3196:
        -: 3197:template <class _Tp>
        -: 3198:struct is_trivially_assignable<_Tp&, const _Tp&>
        -: 3199:    : integral_constant<bool, is_scalar<_Tp>::value> {};
        -: 3200:
        -: 3201:template <class _Tp>
        -: 3202:struct is_trivially_assignable<_Tp&, _Tp&&>
        -: 3203:    : integral_constant<bool, is_scalar<_Tp>::value> {};
        -: 3204:
        -: 3205:#endif  // !__has_feature(is_trivially_assignable)
        -: 3206:
        -: 3207:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3208:template <class _Tp, class _Arg>
        -: 3209:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_assignable_v
        -: 3210:    = is_trivially_assignable<_Tp, _Arg>::value;
        -: 3211:#endif
        -: 3212:
        -: 3213:// is_trivially_copy_assignable
        -: 3214:
        -: 3215:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copy_assignable
        -: 3216:    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 3217:                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
        -: 3218:
        -: 3219:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3220:template <class _Tp>
        -: 3221:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copy_assignable_v
        -: 3222:    = is_trivially_copy_assignable<_Tp>::value;
        -: 3223:#endif
        -: 3224:
        -: 3225:// is_trivially_move_assignable
        -: 3226:
        -: 3227:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_move_assignable
        -: 3228:    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 3229:                                     typename add_rvalue_reference<_Tp>::type>
        -: 3230:    {};
        -: 3231:
        -: 3232:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3233:template <class _Tp>
        -: 3234:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_move_assignable_v
        -: 3235:    = is_trivially_move_assignable<_Tp>::value;
        -: 3236:#endif
        -: 3237:
        -: 3238:// is_trivially_destructible
        -: 3239:
        -: 3240:#if __has_keyword(__is_trivially_destructible)
        -: 3241:
        -: 3242:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
        -: 3243:    : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};
        -: 3244:
        -: 3245:#elif __has_feature(has_trivial_destructor) || defined(_LIBCPP_COMPILER_GCC)
        -: 3246:
        -: 3247:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
        -: 3248:    : public integral_constant<bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)> {};
        -: 3249:
        -: 3250:#else
        -: 3251:
        -: 3252:template <class _Tp> struct __libcpp_trivial_destructor
        -: 3253:    : public integral_constant<bool, is_scalar<_Tp>::value ||
        -: 3254:                                     is_reference<_Tp>::value> {};
        -: 3255:
        -: 3256:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible
        -: 3257:    : public __libcpp_trivial_destructor<typename remove_all_extents<_Tp>::type> {};
        -: 3258:
        -: 3259:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_destructible<_Tp[]>
        -: 3260:    : public false_type {};
        -: 3261:
        -: 3262:#endif
        -: 3263:
        -: 3264:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3265:template <class _Tp>
        -: 3266:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_destructible_v
        -: 3267:    = is_trivially_destructible<_Tp>::value;
        -: 3268:#endif
        -: 3269:
        -: 3270:// is_nothrow_constructible
        -: 3271:
        -: 3272:#if __has_keyword(__is_nothrow_constructible)
        -: 3273:
        -: 3274:template <class _Tp, class... _Args>
        -: 3275:struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible
        -: 3276:    : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)> {};
        -: 3277:
        -: 3278:#else
        -: 3279:
        -: 3280:template <bool, bool, class _Tp, class... _Args> struct __libcpp_is_nothrow_constructible;
        -: 3281:
        -: 3282:template <class _Tp, class... _Args>
        -: 3283:struct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/false, _Tp, _Args...>
        -: 3284:    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
        -: 3285:{
        -: 3286:};
        -: 3287:
        -: 3288:template <class _Tp>
        -: 3289:void __implicit_conversion_to(_Tp) noexcept { }
        -: 3290:
        -: 3291:template <class _Tp, class _Arg>
        -: 3292:struct __libcpp_is_nothrow_constructible</*is constructible*/true, /*is reference*/true, _Tp, _Arg>
        -: 3293:    : public integral_constant<bool, noexcept(__implicit_conversion_to<_Tp>(declval<_Arg>()))>
        -: 3294:{
        -: 3295:};
        -: 3296:
        -: 3297:template <class _Tp, bool _IsReference, class... _Args>
        -: 3298:struct __libcpp_is_nothrow_constructible</*is constructible*/false, _IsReference, _Tp, _Args...>
        -: 3299:    : public false_type
        -: 3300:{
        -: 3301:};
        -: 3302:
        -: 3303:template <class _Tp, class... _Args>
        -: 3304:struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible
        -: 3305:    : __libcpp_is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, is_reference<_Tp>::value, _Tp, _Args...>
        -: 3306:{
        -: 3307:};
        -: 3308:
        -: 3309:template <class _Tp, size_t _Ns>
        -: 3310:struct _LIBCPP_TEMPLATE_VIS is_nothrow_constructible<_Tp[_Ns]>
        -: 3311:    : __libcpp_is_nothrow_constructible<is_constructible<_Tp>::value, is_reference<_Tp>::value, _Tp>
        -: 3312:{
        -: 3313:};
        -: 3314:
        -: 3315:#endif  // _LIBCPP_HAS_NO_NOEXCEPT
        -: 3316:
        -: 3317:
        -: 3318:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3319:template <class _Tp, class ..._Args>
        -: 3320:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_constructible_v
        -: 3321:    = is_nothrow_constructible<_Tp, _Args...>::value;
        -: 3322:#endif
        -: 3323:
        -: 3324:// is_nothrow_default_constructible
        -: 3325:
        -: 3326:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_default_constructible
        -: 3327:    : public is_nothrow_constructible<_Tp>
        -: 3328:    {};
        -: 3329:
        -: 3330:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3331:template <class _Tp>
        -: 3332:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_default_constructible_v
        -: 3333:    = is_nothrow_default_constructible<_Tp>::value;
        -: 3334:#endif
        -: 3335:
        -: 3336:// is_nothrow_copy_constructible
        -: 3337:
        -: 3338:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_constructible
        -: 3339:    : public is_nothrow_constructible<_Tp,
        -: 3340:                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
        -: 3341:
        -: 3342:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3343:template <class _Tp>
        -: 3344:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_copy_constructible_v
        -: 3345:    = is_nothrow_copy_constructible<_Tp>::value;
        -: 3346:#endif
        -: 3347:
        -: 3348:// is_nothrow_move_constructible
        -: 3349:
        -: 3350:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_constructible
        -: 3351:    : public is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>
        -: 3352:    {};
        -: 3353:
        -: 3354:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3355:template <class _Tp>
        -: 3356:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_move_constructible_v
        -: 3357:    = is_nothrow_move_constructible<_Tp>::value;
        -: 3358:#endif
        -: 3359:
        -: 3360:// is_nothrow_assignable
        -: 3361:
        -: 3362:#if __has_keyword(__is_nothrow_assignable)
        -: 3363:
        -: 3364:template <class _Tp, class _Arg>
        -: 3365:struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable
        -: 3366:    : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)> {};
        -: 3367:
        -: 3368:#else
        -: 3369:
        -: 3370:template <bool, class _Tp, class _Arg> struct __libcpp_is_nothrow_assignable;
        -: 3371:
        -: 3372:template <class _Tp, class _Arg>
        -: 3373:struct __libcpp_is_nothrow_assignable<false, _Tp, _Arg>
        -: 3374:    : public false_type
        -: 3375:{
        -: 3376:};
        -: 3377:
        -: 3378:template <class _Tp, class _Arg>
        -: 3379:struct __libcpp_is_nothrow_assignable<true, _Tp, _Arg>
        -: 3380:    : public integral_constant<bool, noexcept(_VSTD::declval<_Tp>() = _VSTD::declval<_Arg>()) >
        -: 3381:{
        -: 3382:};
        -: 3383:
        -: 3384:template <class _Tp, class _Arg>
        -: 3385:struct _LIBCPP_TEMPLATE_VIS is_nothrow_assignable
        -: 3386:    : public __libcpp_is_nothrow_assignable<is_assignable<_Tp, _Arg>::value, _Tp, _Arg>
        -: 3387:{
        -: 3388:};
        -: 3389:
        -: 3390:#endif  // _LIBCPP_HAS_NO_NOEXCEPT
        -: 3391:
        -: 3392:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3393:template <class _Tp, class _Arg>
        -: 3394:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_assignable_v
        -: 3395:    = is_nothrow_assignable<_Tp, _Arg>::value;
        -: 3396:#endif
        -: 3397:
        -: 3398:// is_nothrow_copy_assignable
        -: 3399:
        -: 3400:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_copy_assignable
        -: 3401:    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 3402:                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
        -: 3403:
        -: 3404:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3405:template <class _Tp>
        -: 3406:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_copy_assignable_v
        -: 3407:    = is_nothrow_copy_assignable<_Tp>::value;
        -: 3408:#endif
        -: 3409:
        -: 3410:// is_nothrow_move_assignable
        -: 3411:
        -: 3412:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_move_assignable
        -: 3413:    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,
        -: 3414:                                     typename add_rvalue_reference<_Tp>::type>
        -: 3415:    {};
        -: 3416:
        -: 3417:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3418:template <class _Tp>
        -: 3419:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_move_assignable_v
        -: 3420:    = is_nothrow_move_assignable<_Tp>::value;
        -: 3421:#endif
        -: 3422:
        -: 3423:// is_nothrow_destructible
        -: 3424:
        -: 3425:#if !defined(_LIBCPP_CXX03_LANG)
        -: 3426:
        -: 3427:template <bool, class _Tp> struct __libcpp_is_nothrow_destructible;
        -: 3428:
        -: 3429:template <class _Tp>
        -: 3430:struct __libcpp_is_nothrow_destructible<false, _Tp>
        -: 3431:    : public false_type
        -: 3432:{
        -: 3433:};
        -: 3434:
        -: 3435:template <class _Tp>
        -: 3436:struct __libcpp_is_nothrow_destructible<true, _Tp>
        -: 3437:    : public integral_constant<bool, noexcept(_VSTD::declval<_Tp>().~_Tp()) >
        -: 3438:{
        -: 3439:};
        -: 3440:
        -: 3441:template <class _Tp>
        -: 3442:struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible
        -: 3443:    : public __libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp>
        -: 3444:{
        -: 3445:};
        -: 3446:
        -: 3447:template <class _Tp, size_t _Ns>
        -: 3448:struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[_Ns]>
        -: 3449:    : public is_nothrow_destructible<_Tp>
        -: 3450:{
        -: 3451:};
        -: 3452:
        -: 3453:template <class _Tp>
        -: 3454:struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&>
        -: 3455:    : public true_type
        -: 3456:{
        -: 3457:};
        -: 3458:
        -: 3459:template <class _Tp>
        -: 3460:struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp&&>
        -: 3461:    : public true_type
        -: 3462:{
        -: 3463:};
        -: 3464:
        -: 3465:#else
        -: 3466:
        -: 3467:template <class _Tp> struct __libcpp_nothrow_destructor
        -: 3468:    : public integral_constant<bool, is_scalar<_Tp>::value ||
        -: 3469:                                     is_reference<_Tp>::value> {};
        -: 3470:
        -: 3471:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible
        -: 3472:    : public __libcpp_nothrow_destructor<typename remove_all_extents<_Tp>::type> {};
        -: 3473:
        -: 3474:template <class _Tp>
        -: 3475:struct _LIBCPP_TEMPLATE_VIS is_nothrow_destructible<_Tp[]>
        -: 3476:    : public false_type {};
        -: 3477:
        -: 3478:#endif
        -: 3479:
        -: 3480:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3481:template <class _Tp>
        -: 3482:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_nothrow_destructible_v
        -: 3483:    = is_nothrow_destructible<_Tp>::value;
        -: 3484:#endif
        -: 3485:
        -: 3486:// is_pod
        -: 3487:
        -: 3488:#if __has_feature(is_pod) || defined(_LIBCPP_COMPILER_GCC)
        -: 3489:
        -: 3490:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod
        -: 3491:    : public integral_constant<bool, __is_pod(_Tp)> {};
        -: 3492:
        -: 3493:#else
        -: 3494:
        -: 3495:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_pod
        -: 3496:    : public integral_constant<bool, is_trivially_default_constructible<_Tp>::value   &&
        -: 3497:                                     is_trivially_copy_constructible<_Tp>::value      &&
        -: 3498:                                     is_trivially_copy_assignable<_Tp>::value    &&
        -: 3499:                                     is_trivially_destructible<_Tp>::value> {};
        -: 3500:
        -: 3501:#endif
        -: 3502:
        -: 3503:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3504:template <class _Tp>
        -: 3505:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_pod_v
        -: 3506:    = is_pod<_Tp>::value;
        -: 3507:#endif
        -: 3508:
        -: 3509:// is_literal_type;
        -: 3510:
        -: 3511:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_literal_type
        -: 3512:    : public integral_constant<bool, __is_literal_type(_Tp)>
        -: 3513:    {};
        -: 3514:
        -: 3515:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3516:template <class _Tp>
        -: 3517:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_literal_type_v
        -: 3518:    = is_literal_type<_Tp>::value;
        -: 3519:#endif
        -: 3520:
        -: 3521:// is_standard_layout;
        -: 3522:
        -: 3523:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_standard_layout
        -: 3524:#if __has_feature(is_standard_layout) || defined(_LIBCPP_COMPILER_GCC)
        -: 3525:    : public integral_constant<bool, __is_standard_layout(_Tp)>
        -: 3526:#else
        -: 3527:    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>
        -: 3528:#endif
        -: 3529:    {};
        -: 3530:
        -: 3531:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3532:template <class _Tp>
        -: 3533:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_standard_layout_v
        -: 3534:    = is_standard_layout<_Tp>::value;
        -: 3535:#endif
        -: 3536:
        -: 3537:// is_trivially_copyable;
        -: 3538:
        -: 3539:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivially_copyable
        -: 3540:#if __has_feature(is_trivially_copyable)
        -: 3541:    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
        -: 3542:#elif _GNUC_VER >= 501
        -: 3543:    : public integral_constant<bool, !is_volatile<_Tp>::value && __is_trivially_copyable(_Tp)>
        -: 3544:#else
        -: 3545:    : integral_constant<bool, is_scalar<typename remove_all_extents<_Tp>::type>::value>
        -: 3546:#endif
        -: 3547:    {};
        -: 3548:
        -: 3549:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3550:template <class _Tp>
        -: 3551:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivially_copyable_v
        -: 3552:    = is_trivially_copyable<_Tp>::value;
        -: 3553:#endif
        -: 3554:
        -: 3555:// is_trivial;
        -: 3556:
        -: 3557:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS is_trivial
        -: 3558:#if __has_feature(is_trivial) || defined(_LIBCPP_COMPILER_GCC)
        -: 3559:    : public integral_constant<bool, __is_trivial(_Tp)>
        -: 3560:#else
        -: 3561:    : integral_constant<bool, is_trivially_copyable<_Tp>::value &&
        -: 3562:                                 is_trivially_default_constructible<_Tp>::value>
        -: 3563:#endif
        -: 3564:    {};
        -: 3565:
        -: 3566:#if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
        -: 3567:template <class _Tp>
        -: 3568:_LIBCPP_INLINE_VAR _LIBCPP_CONSTEXPR bool is_trivial_v
        -: 3569:    = is_trivial<_Tp>::value;
        -: 3570:#endif
        -: 3571:
        -: 3572:template <class _Tp> struct __is_reference_wrapper_impl : public false_type {};
        -: 3573:template <class _Tp> struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};
        -: 3574:template <class _Tp> struct __is_reference_wrapper
        -: 3575:    : public __is_reference_wrapper_impl<typename remove_cv<_Tp>::type> {};
        -: 3576:
        -: 3577:#ifndef _LIBCPP_CXX03_LANG
        -: 3578:
        -: 3579:template <class _Fp, class _A0,
        -: 3580:         class _DecayFp = typename decay<_Fp>::type,
        -: 3581:         class _DecayA0 = typename decay<_A0>::type,
        -: 3582:         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
        -: 3583:using __enable_if_bullet1 = typename enable_if
        -: 3584:    <
        -: 3585:        is_member_function_pointer<_DecayFp>::value
        -: 3586:        && is_base_of<_ClassT, _DecayA0>::value
        -: 3587:    >::type;
        -: 3588:
        -: 3589:template <class _Fp, class _A0,
        -: 3590:         class _DecayFp = typename decay<_Fp>::type,
        -: 3591:         class _DecayA0 = typename decay<_A0>::type>
        -: 3592:using __enable_if_bullet2 = typename enable_if
        -: 3593:    <
        -: 3594:        is_member_function_pointer<_DecayFp>::value
        -: 3595:        && __is_reference_wrapper<_DecayA0>::value
        -: 3596:    >::type;
        -: 3597:
        -: 3598:template <class _Fp, class _A0,
        -: 3599:         class _DecayFp = typename decay<_Fp>::type,
        -: 3600:         class _DecayA0 = typename decay<_A0>::type,
        -: 3601:         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
        -: 3602:using __enable_if_bullet3 = typename enable_if
        -: 3603:    <
        -: 3604:        is_member_function_pointer<_DecayFp>::value
        -: 3605:        && !is_base_of<_ClassT, _DecayA0>::value
        -: 3606:        && !__is_reference_wrapper<_DecayA0>::value
        -: 3607:    >::type;
        -: 3608:
        -: 3609:template <class _Fp, class _A0,
        -: 3610:         class _DecayFp = typename decay<_Fp>::type,
        -: 3611:         class _DecayA0 = typename decay<_A0>::type,
        -: 3612:         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
        -: 3613:using __enable_if_bullet4 = typename enable_if
        -: 3614:    <
        -: 3615:        is_member_object_pointer<_DecayFp>::value
        -: 3616:        && is_base_of<_ClassT, _DecayA0>::value
        -: 3617:    >::type;
        -: 3618:
        -: 3619:template <class _Fp, class _A0,
        -: 3620:         class _DecayFp = typename decay<_Fp>::type,
        -: 3621:         class _DecayA0 = typename decay<_A0>::type>
        -: 3622:using __enable_if_bullet5 = typename enable_if
        -: 3623:    <
        -: 3624:        is_member_object_pointer<_DecayFp>::value
        -: 3625:        && __is_reference_wrapper<_DecayA0>::value
        -: 3626:    >::type;
        -: 3627:
        -: 3628:template <class _Fp, class _A0,
        -: 3629:         class _DecayFp = typename decay<_Fp>::type,
        -: 3630:         class _DecayA0 = typename decay<_A0>::type,
        -: 3631:         class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
        -: 3632:using __enable_if_bullet6 = typename enable_if
        -: 3633:    <
        -: 3634:        is_member_object_pointer<_DecayFp>::value
        -: 3635:        && !is_base_of<_ClassT, _DecayA0>::value
        -: 3636:        && !__is_reference_wrapper<_DecayA0>::value
        -: 3637:    >::type;
        -: 3638:
        -: 3639:// __invoke forward declarations
        -: 3640:
        -: 3641:// fall back - none of the bullets
        -: 3642:
        -: 3643:#define _LIBCPP_INVOKE_RETURN(...) \
        -: 3644:    noexcept(noexcept(__VA_ARGS__)) -> decltype(__VA_ARGS__) \
        -: 3645:    { return __VA_ARGS__; }
        -: 3646:
        -: 3647:template <class ..._Args>
        -: 3648:auto __invoke(__any, _Args&& ...__args) -> __nat;
        -: 3649:
        -: 3650:template <class ..._Args>
        -: 3651:auto __invoke_constexpr(__any, _Args&& ...__args) -> __nat;
        -: 3652:
        -: 3653:// bullets 1, 2 and 3
        -: 3654:
        -: 3655:template <class _Fp, class _A0, class ..._Args,
        -: 3656:          class = __enable_if_bullet1<_Fp, _A0>>
        -: 3657:inline _LIBCPP_INLINE_VISIBILITY
        -: 3658:auto
        -: 3659:__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3660:_LIBCPP_INVOKE_RETURN((_VSTD::forward<_A0>(__a0).*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3661:
        -: 3662:template <class _Fp, class _A0, class ..._Args,
        -: 3663:          class = __enable_if_bullet1<_Fp, _A0>>
        -: 3664:inline _LIBCPP_INLINE_VISIBILITY
        -: 3665:_LIBCPP_CONSTEXPR auto
        -: 3666:__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3667:_LIBCPP_INVOKE_RETURN((_VSTD::forward<_A0>(__a0).*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3668:
        -: 3669:template <class _Fp, class _A0, class ..._Args,
        -: 3670:          class = __enable_if_bullet2<_Fp, _A0>>
        -: 3671:inline _LIBCPP_INLINE_VISIBILITY
        -: 3672:auto
        -: 3673:__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3674:_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3675:
        -: 3676:template <class _Fp, class _A0, class ..._Args,
        -: 3677:          class = __enable_if_bullet2<_Fp, _A0>>
        -: 3678:inline _LIBCPP_INLINE_VISIBILITY
        -: 3679:_LIBCPP_CONSTEXPR auto
        -: 3680:__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3681:_LIBCPP_INVOKE_RETURN((__a0.get().*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3682:
        -: 3683:template <class _Fp, class _A0, class ..._Args,
        -: 3684:          class = __enable_if_bullet3<_Fp, _A0>>
        -: 3685:inline _LIBCPP_INLINE_VISIBILITY
        -: 3686:auto
        -: 3687:__invoke(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3688:_LIBCPP_INVOKE_RETURN(((*_VSTD::forward<_A0>(__a0)).*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3689:
        -: 3690:template <class _Fp, class _A0, class ..._Args,
        -: 3691:          class = __enable_if_bullet3<_Fp, _A0>>
        -: 3692:inline _LIBCPP_INLINE_VISIBILITY
        -: 3693:_LIBCPP_CONSTEXPR auto
        -: 3694:__invoke_constexpr(_Fp&& __f, _A0&& __a0, _Args&& ...__args)
        -: 3695:_LIBCPP_INVOKE_RETURN(((*_VSTD::forward<_A0>(__a0)).*__f)(_VSTD::forward<_Args>(__args)...))
        -: 3696:
        -: 3697:// bullets 4, 5 and 6
        -: 3698:
        -: 3699:template <class _Fp, class _A0,
        -: 3700:          class = __enable_if_bullet4<_Fp, _A0>>
        -: 3701:inline _LIBCPP_INLINE_VISIBILITY
        -: 3702:auto
        -: 3703:__invoke(_Fp&& __f, _A0&& __a0)
        -: 3704:_LIBCPP_INVOKE_RETURN(_VSTD::forward<_A0>(__a0).*__f)
        -: 3705:
        -: 3706:template <class _Fp, class _A0,
        -: 3707:          class = __enable_if_bullet4<_Fp, _A0>>
        -: 3708:inline _LIBCPP_INLINE_VISIBILITY
        -: 3709:_LIBCPP_CONSTEXPR auto
        -: 3710:__invoke_constexpr(_Fp&& __f, _A0&& __a0)
        -: 3711:_LIBCPP_INVOKE_RETURN(_VSTD::forward<_A0>(__a0).*__f)
        -: 3712:
        -: 3713:template <class _Fp, class _A0,
        -: 3714:          class = __enable_if_bullet5<_Fp, _A0>>
        -: 3715:inline _LIBCPP_INLINE_VISIBILITY
        -: 3716:auto
        -: 3717:__invoke(_Fp&& __f, _A0&& __a0)
        -: 3718:_LIBCPP_INVOKE_RETURN(__a0.get().*__f)
        -: 3719:
        -: 3720:template <class _Fp, class _A0,
        -: 3721:          class = __enable_if_bullet5<_Fp, _A0>>
        -: 3722:inline _LIBCPP_INLINE_VISIBILITY
        -: 3723:_LIBCPP_CONSTEXPR auto
        -: 3724:__invoke_constexpr(_Fp&& __f, _A0&& __a0)
        -: 3725:_LIBCPP_INVOKE_RETURN(__a0.get().*__f)
        -: 3726:
        -: 3727:template <class _Fp, class _A0,
        -: 3728:          class = __enable_if_bullet6<_Fp, _A0>>
        -: 3729:inline _LIBCPP_INLINE_VISIBILITY
        -: 3730:auto
        -: 3731:__invoke(_Fp&& __f, _A0&& __a0)
        -: 3732:_LIBCPP_INVOKE_RETURN((*_VSTD::forward<_A0>(__a0)).*__f)
        -: 3733:
        -: 3734:template <class _Fp, class _A0,
        -: 3735:          class = __enable_if_bullet6<_Fp, _A0>>
        -: 3736:inline _LIBCPP_INLINE_VISIBILITY
        -: 3737:_LIBCPP_CONSTEXPR auto
        -: 3738:__invoke_constexpr(_Fp&& __f, _A0&& __a0)
        -: 3739:_LIBCPP_INVOKE_RETURN((*_VSTD::forward<_A0>(__a0)).*__f)
        -: 3740:
        -: 3741:// bullet 7
        -: 3742:
        -: 3743:template <class _Fp, class ..._Args>
        -: 3744:inline _LIBCPP_INLINE_VISIBILITY
        -: 3745:auto
        -: 3746:__invoke(_Fp&& __f, _Args&& ...__args)
        -: 3747:_LIBCPP_INVOKE_RETURN(_VSTD::forward<_Fp>(__f)(_VSTD::forward<_Args>(__args)...))
        -: 3748:
        -: 3749:template <class _Fp, class ..._Args>
        -: 3750:inline _LIBCPP_INLINE_VISIBILITY
        -: 3751:_LIBCPP_CONSTEXPR auto
        -: 3752:__invoke_constexpr(_Fp&& __f, _Args&& ...__args)
        -: 3753:_LIBCPP_INVOKE_RETURN(_VSTD::forward<_Fp>(__f)(_VSTD::forward<_Args>(__args)...))
        -: 3754:
        -: 3755:#undef _LIBCPP_INVOKE_RETURN
        -: 3756:
        -: 3757:// __invokable
        -: 3758:template <class _Ret, class _Fp, class ..._Args>
        -: 3759:struct __invokable_r
        -: 3760:{
        -: 3761:  template <class _XFp, class ..._XArgs>
        -: 3762:  static auto __try_call(int) -> decltype(
        -: 3763:    _VSTD::__invoke(_VSTD::declval<_XFp>(), _VSTD::declval<_XArgs>()...));
        -: 3764:  template <class _XFp, class ..._XArgs>
        -: 3765:  static __nat __try_call(...);
        -: 3766:
        -: 3767:  // FIXME: Check that _Ret, _Fp, and _Args... are all complete types, cv void,
        -: 3768:  // or incomplete array types as required by the standard.
        -: 3769:  using _Result = decltype(__try_call<_Fp, _Args...>(0));
        -: 3770:
        -: 3771:  using type =
        -: 3772:  typename conditional<
        -: 3773:      _IsNotSame<_Result, __nat>::value,
        -: 3774:      typename conditional<
        -: 3775:          is_void<_Ret>::value,
        -: 3776:          true_type,
        -: 3777:          is_convertible<_Result, _Ret>
        -: 3778:      >::type,
        -: 3779:      false_type
        -: 3780:  >::type;
        -: 3781:  static const bool value = type::value;
        -: 3782:};
        -: 3783:template <class _Fp, class ..._Args>
        -: 3784:using __invokable = __invokable_r<void, _Fp, _Args...>;
        -: 3785:
        -: 3786:template <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class ..._Args>
        -: 3787:struct __nothrow_invokable_r_imp {
        -: 3788:  static const bool value = false;
        -: 3789:};
        -: 3790:
        -: 3791:template <class _Ret, class _Fp, class ..._Args>
        -: 3792:struct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...>
        -: 3793:{
        -: 3794:    typedef __nothrow_invokable_r_imp _ThisT;
        -: 3795:
        -: 3796:    template <class _Tp>
        -: 3797:    static void __test_noexcept(_Tp) noexcept;
        -: 3798:
        -: 3799:    static const bool value = noexcept(_ThisT::__test_noexcept<_Ret>(
        -: 3800:        _VSTD::__invoke(_VSTD::declval<_Fp>(), _VSTD::declval<_Args>()...)));
        -: 3801:};
        -: 3802:
        -: 3803:template <class _Ret, class _Fp, class ..._Args>
        -: 3804:struct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...>
        -: 3805:{
        -: 3806:    static const bool value = noexcept(
        -: 3807:        _VSTD::__invoke(_VSTD::declval<_Fp>(), _VSTD::declval<_Args>()...));
        -: 3808:};
        -: 3809:
        -: 3810:template <class _Ret, class _Fp, class ..._Args>
        -: 3811:using __nothrow_invokable_r =
        -: 3812:    __nothrow_invokable_r_imp<
        -: 3813:            __invokable_r<_Ret, _Fp, _Args...>::value,
        -: 3814:            is_void<_Ret>::value,
        -: 3815:            _Ret, _Fp, _Args...
        -: 3816:    >;
        -: 3817:
        -: 3818:template <class _Fp, class ..._Args>
        -: 3819:using __nothrow_invokable =
        -: 3820:    __nothrow_invokable_r_imp<
        -: 3821:            __invokable<_Fp, _Args...>::value,
        -: 3822:            true, void, _Fp, _Args...
        -: 3823:    >;
        -: 3824:
        -: 3825:template <class _Fp, class ..._Args>
        -: 3826:struct __invoke_of
        -: 3827:    : public enable_if<
        -: 3828:        __invokable<_Fp, _Args...>::value,
        -: 3829:        typename __invokable_r<void, _Fp, _Args...>::_Result>
        -: 3830:{
        -: 3831:};
        -: 3832:
        -: 3833:#endif // _LIBCPP_CXX03_LANG
        -: 3834:
        -: 3835:// result_of
        -: 3836:
        -: 3837:template <class _Callable> class result_of;
        -: 3838:
        -: 3839:#ifndef _LIBCPP_CXX03_LANG
        -: 3840:
        -: 3841:template <class _Fp, class ..._Args>
        -: 3842:class _LIBCPP_TEMPLATE_VIS result_of<_Fp(_Args...)>
        -: 3843:    : public __invoke_of<_Fp, _Args...>
        -: 3844:{
        -: 3845:};
        -: 3846:
        -: 3847:#else // C++03
        -: 3848:
        -: 3849:template <class _Fn, bool, bool>
        -: 3850:class __result_of
        -: 3851:{
        -: 3852:};
        -: 3853:
        -: 3854:template <class _Fn, class ..._Args>
        -: 3855:class __result_of<_Fn(_Args...), true, false>
        -: 3856:{
        -: 3857:public:
        -: 3858:    typedef decltype(declval<_Fn>()(declval<_Args>()...)) type;
        -: 3859:};
        -: 3860:
        -: 3861:template <class _MP, class _Tp, bool _IsMemberFunctionPtr>
        -: 3862:struct __result_of_mp;
        -: 3863:
        -: 3864:// member function pointer
        -: 3865:
        -: 3866:template <class _MP, class _Tp>
        -: 3867:struct __result_of_mp<_MP, _Tp, true>
        -: 3868:    : public __identity<typename __member_pointer_traits<_MP>::_ReturnType>
        -: 3869:{
        -: 3870:};
        -: 3871:
        -: 3872:// member data pointer
        -: 3873:
        -: 3874:template <class _MP, class _Tp, bool>
        -: 3875:struct __result_of_mdp;
        -: 3876:
        -: 3877:template <class _Rp, class _Class, class _Tp>
        -: 3878:struct __result_of_mdp<_Rp _Class::*, _Tp, false>
        -: 3879:{
        -: 3880:    typedef typename __apply_cv<decltype(*_VSTD::declval<_Tp>()), _Rp>::type& type;
        -: 3881:};
        -: 3882:
        -: 3883:template <class _Rp, class _Class, class _Tp>
        -: 3884:struct __result_of_mdp<_Rp _Class::*, _Tp, true>
        -: 3885:{
        -: 3886:    typedef typename __apply_cv<_Tp, _Rp>::type& type;
        -: 3887:};
        -: 3888:
        -: 3889:template <class _Rp, class _Class, class _Tp>
        -: 3890:struct __result_of_mp<_Rp _Class::*, _Tp, false>
        -: 3891:    : public __result_of_mdp<_Rp _Class::*, _Tp,
        -: 3892:            is_base_of<_Class, typename remove_reference<_Tp>::type>::value>
        -: 3893:{
        -: 3894:};
        -: 3895:
        -: 3896:template <class _Fn, class _Tp>
        -: 3897:class __result_of<_Fn(_Tp), false, true>  // _Fn must be member pointer
        -: 3898:    : public __result_of_mp<typename remove_reference<_Fn>::type,
        -: 3899:                            _Tp,
        -: 3900:                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
        -: 3901:{
        -: 3902:};
        -: 3903:
        -: 3904:template <class _Fn, class _Tp, class ..._Args>
        -: 3905:class __result_of<_Fn(_Tp, _Args...), false, true>  // _Fn must be member pointer
        -: 3906:    : public __result_of_mp<typename remove_reference<_Fn>::type,
        -: 3907:                            _Tp,
        -: 3908:                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
        -: 3909:{
        -: 3910:};
        -: 3911:
        -: 3912:template <class _Fn, class ..._Args>
        -: 3913:class _LIBCPP_TEMPLATE_VIS result_of<_Fn(_Args...)>
        -: 3914:    : public __result_of<_Fn(_Args...),
        -: 3915:                         is_class<typename remove_reference<_Fn>::type>::value ||
        -: 3916:                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,
        -: 3917:                         is_member_pointer<typename remove_reference<_Fn>::type>::value
        -: 3918:                        >
        -: 3919:{
        -: 3920:};
        -: 3921:
        -: 3922:#endif  // C++03
        -: 3923:
        -: 3924:#if _LIBCPP_STD_VER > 11
        -: 3925:template <class _Tp> using result_of_t = typename result_of<_Tp>::type;
        -: 3926:#endif
        -: 3927:
        -: 3928:#if _LIBCPP_STD_VER > 14
        -: 3929:
        -: 3930:// invoke_result
        -: 3931:
        -: 3932:template <class _Fn, class... _Args>
        -: 3933:struct _LIBCPP_TEMPLATE_VIS invoke_result
        -: 3934:    : __invoke_of<_Fn, _Args...>
        -: 3935:{
        -: 3936:};
        -: 3937:
        -: 3938:template <class _Fn, class... _Args>
        -: 3939:using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
        -: 3940:
        -: 3941:// is_invocable
        -: 3942:
        -: 3943:template <class _Fn, class ..._Args>
        -: 3944:struct _LIBCPP_TEMPLATE_VIS is_invocable
        -: 3945:    : integral_constant<bool, __invokable<_Fn, _Args...>::value> {};
        -: 3946:
        -: 3947:template <class _Ret, class _Fn, class ..._Args>
        -: 3948:struct _LIBCPP_TEMPLATE_VIS is_invocable_r
        -: 3949:    : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};
        -: 3950:
        -: 3951:template <class _Fn, class ..._Args>
        -: 3952:_LIBCPP_INLINE_VAR constexpr bool is_invocable_v
        -: 3953:    = is_invocable<_Fn, _Args...>::value;
        -: 3954:
        -: 3955:template <class _Ret, class _Fn, class ..._Args>
        -: 3956:_LIBCPP_INLINE_VAR constexpr bool is_invocable_r_v
        -: 3957:    = is_invocable_r<_Ret, _Fn, _Args...>::value;
        -: 3958:
        -: 3959:// is_nothrow_invocable
        -: 3960:
        -: 3961:template <class _Fn, class ..._Args>
        -: 3962:struct _LIBCPP_TEMPLATE_VIS is_nothrow_invocable
        -: 3963:    : integral_constant<bool, __nothrow_invokable<_Fn, _Args...>::value> {};
        -: 3964:
        -: 3965:template <class _Ret, class _Fn, class ..._Args>
        -: 3966:struct _LIBCPP_TEMPLATE_VIS is_nothrow_invocable_r
        -: 3967:    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value> {};
        -: 3968:
        -: 3969:template <class _Fn, class ..._Args>
        -: 3970:_LIBCPP_INLINE_VAR constexpr bool is_nothrow_invocable_v
        -: 3971:    = is_nothrow_invocable<_Fn, _Args...>::value;
        -: 3972:
        -: 3973:template <class _Ret, class _Fn, class ..._Args>
        -: 3974:_LIBCPP_INLINE_VAR constexpr bool is_nothrow_invocable_r_v
        -: 3975:    = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;
        -: 3976:
        -: 3977:#endif // _LIBCPP_STD_VER > 14
        -: 3978:
        -: 3979:template <class _Tp> struct __is_swappable;
        -: 3980:template <class _Tp> struct __is_nothrow_swappable;
        -: 3981:
        -: 3982:// swap, swap_ranges
        -: 3983:
        -: 3984:template <class _ForwardIterator1, class _ForwardIterator2>
        -: 3985:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 3986:_ForwardIterator2
        -: 3987:swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2);
        -: 3988:
        -: 3989:template <class _Tp>
        -: 3990:inline _LIBCPP_INLINE_VISIBILITY
        -: 3991:#ifndef _LIBCPP_CXX03_LANG
        -: 3992:typename enable_if
        -: 3993:<
        -: 3994:    is_move_constructible<_Tp>::value &&
        -: 3995:    is_move_assignable<_Tp>::value
        -: 3996:>::type
        -: 3997:#else
        -: 3998:void
        -: 3999:#endif
        -: 4000:_LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 4001:swap(_Tp& __x, _Tp& __y) _NOEXCEPT_(is_nothrow_move_constructible<_Tp>::value &&
        -: 4002:                                    is_nothrow_move_assignable<_Tp>::value)
        -: 4003:{
        -: 4004:    _Tp __t(_VSTD::move(__x));
        -: 4005:    __x = _VSTD::move(__y);
        -: 4006:    __y = _VSTD::move(__t);
        -: 4007:}
        -: 4008:
        -: 4009:template<class _Tp, size_t _Np>
        -: 4010:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 4011:typename enable_if<
        -: 4012:    __is_swappable<_Tp>::value
        -: 4013:>::type
        -: 4014:swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) _NOEXCEPT_(__is_nothrow_swappable<_Tp>::value)
        -: 4015:{
        -: 4016:    _VSTD::swap_ranges(__a, __a + _Np, __b);
        -: 4017:}
        -: 4018:
        -: 4019:template <class _ForwardIterator1, class _ForwardIterator2>
        -: 4020:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 4021:_ForwardIterator2
        -: 4022:swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
        -: 4023:{
        -: 4024:    for(; __first1 != __last1; ++__first1, (void) ++__first2)
        -: 4025:        swap(*__first1, *__first2);
        -: 4026:    return __first2;
        -: 4027:}
        -: 4028:
        -: 4029:// iter_swap
        -: 4030:
        -: 4031:template <class _ForwardIterator1, class _ForwardIterator2>
        -: 4032:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 4033:void
        -: 4034:iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        -: 4035:    //                                  _NOEXCEPT_(_NOEXCEPT_(swap(*__a, *__b)))
        -: 4036:               _NOEXCEPT_(_NOEXCEPT_(swap(*_VSTD::declval<_ForwardIterator1>(),
        -: 4037:                                          *_VSTD::declval<_ForwardIterator2>())))
        -: 4038:{
        -: 4039:    swap(*__a, *__b);
        -: 4040:}
        -: 4041:
        -: 4042:// __swappable
        -: 4043:
        -: 4044:namespace __detail
        -: 4045:{
        -: 4046:// ALL generic swap overloads MUST already have a declaration available at this point.
        -: 4047:
        -: 4048:template <class _Tp, class _Up = _Tp,
        -: 4049:          bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>
        -: 4050:struct __swappable_with
        -: 4051:{
        -: 4052:    template <class _LHS, class _RHS>
        -: 4053:    static decltype(swap(_VSTD::declval<_LHS>(), _VSTD::declval<_RHS>()))
        -: 4054:    __test_swap(int);
        -: 4055:    template <class, class>
        -: 4056:    static __nat __test_swap(long);
        -: 4057:
        -: 4058:    // Extra parens are needed for the C++03 definition of decltype.
        -: 4059:    typedef decltype((__test_swap<_Tp, _Up>(0))) __swap1;
        -: 4060:    typedef decltype((__test_swap<_Up, _Tp>(0))) __swap2;
        -: 4061:
        -: 4062:    static const bool value = _IsNotSame<__swap1, __nat>::value
        -: 4063:                           && _IsNotSame<__swap2, __nat>::value;
        -: 4064:};
        -: 4065:
        -: 4066:template <class _Tp, class _Up>
        -: 4067:struct __swappable_with<_Tp, _Up,  false> : false_type {};
        -: 4068:
        -: 4069:template <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>
        -: 4070:struct __nothrow_swappable_with {
        -: 4071:  static const bool value =
        -: 4072:#ifndef _LIBCPP_HAS_NO_NOEXCEPT
        -: 4073:      noexcept(swap(_VSTD::declval<_Tp>(), _VSTD::declval<_Up>()))
        -: 4074:  &&  noexcept(swap(_VSTD::declval<_Up>(), _VSTD::declval<_Tp>()));
        -: 4075:#else
        -: 4076:      false;
        -: 4077:#endif
        -: 4078:};
        -: 4079:
        -: 4080:template <class _Tp, class _Up>
        -: 4081:struct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};
        -: 4082:
        -: 4083:}  // __detail
        -: 4084:
        -: 4085:template <class _Tp>
        -: 4086:struct __is_swappable
        -: 4087:    : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value>
        -: 4088:{
        -: 4089:};
        -: 4090:
        -: 4091:template <class _Tp>
        -: 4092:struct __is_nothrow_swappable
        -: 4093:    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value>
        -: 4094:{
        -: 4095:};
        -: 4096:
        -: 4097:#if _LIBCPP_STD_VER > 14
        -: 4098:
        -: 4099:template <class _Tp, class _Up>
        -: 4100:struct _LIBCPP_TEMPLATE_VIS is_swappable_with
        -: 4101:    : public integral_constant<bool, __detail::__swappable_with<_Tp, _Up>::value>
        -: 4102:{
        -: 4103:};
        -: 4104:
        -: 4105:template <class _Tp>
        -: 4106:struct _LIBCPP_TEMPLATE_VIS is_swappable
        -: 4107:    : public conditional<
        -: 4108:        __is_referenceable<_Tp>::value,
        -: 4109:        is_swappable_with<
        -: 4110:            typename add_lvalue_reference<_Tp>::type,
        -: 4111:            typename add_lvalue_reference<_Tp>::type>,
        -: 4112:        false_type
        -: 4113:    >::type
        -: 4114:{
        -: 4115:};
        -: 4116:
        -: 4117:template <class _Tp, class _Up>
        -: 4118:struct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable_with
        -: 4119:    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp, _Up>::value>
        -: 4120:{
        -: 4121:};
        -: 4122:
        -: 4123:template <class _Tp>
        -: 4124:struct _LIBCPP_TEMPLATE_VIS is_nothrow_swappable
        -: 4125:    : public conditional<
        -: 4126:        __is_referenceable<_Tp>::value,
        -: 4127:        is_nothrow_swappable_with<
        -: 4128:            typename add_lvalue_reference<_Tp>::type,
        -: 4129:            typename add_lvalue_reference<_Tp>::type>,
        -: 4130:        false_type
        -: 4131:    >::type
        -: 4132:{
        -: 4133:};
        -: 4134:
        -: 4135:template <class _Tp, class _Up>
        -: 4136:_LIBCPP_INLINE_VAR constexpr bool is_swappable_with_v
        -: 4137:    = is_swappable_with<_Tp, _Up>::value;
        -: 4138:
        -: 4139:template <class _Tp>
        -: 4140:_LIBCPP_INLINE_VAR constexpr bool is_swappable_v
        -: 4141:    = is_swappable<_Tp>::value;
        -: 4142:
        -: 4143:template <class _Tp, class _Up>
        -: 4144:_LIBCPP_INLINE_VAR constexpr bool is_nothrow_swappable_with_v
        -: 4145:    = is_nothrow_swappable_with<_Tp, _Up>::value;
        -: 4146:
        -: 4147:template <class _Tp>
        -: 4148:_LIBCPP_INLINE_VAR constexpr bool is_nothrow_swappable_v
        -: 4149:    = is_nothrow_swappable<_Tp>::value;
        -: 4150:
        -: 4151:#endif // _LIBCPP_STD_VER > 14
        -: 4152:
        -: 4153:template <class _Tp, bool = is_enum<_Tp>::value> struct __underlying_type_impl;
        -: 4154:
        -: 4155:template <class _Tp>
        -: 4156:struct __underlying_type_impl<_Tp, false> {};
        -: 4157:
        -: 4158:template <class _Tp>
        -: 4159:struct __underlying_type_impl<_Tp, true>
        -: 4160:{
        -: 4161:    typedef __underlying_type(_Tp) type;
        -: 4162:};
        -: 4163:
        -: 4164:template <class _Tp>
        -: 4165:struct underlying_type : __underlying_type_impl<_Tp, is_enum<_Tp>::value> {};
        -: 4166:
        -: 4167:#if _LIBCPP_STD_VER > 11
        -: 4168:template <class _Tp> using underlying_type_t = typename underlying_type<_Tp>::type;
        -: 4169:#endif
        -: 4170:
        -: 4171:template <class _Tp, bool = is_enum<_Tp>::value>
        -: 4172:struct __sfinae_underlying_type
        -: 4173:{
        -: 4174:    typedef typename underlying_type<_Tp>::type type;
        -: 4175:    typedef decltype(((type)1) + 0) __promoted_type;
        -: 4176:};
        -: 4177:
        -: 4178:template <class _Tp>
        -: 4179:struct __sfinae_underlying_type<_Tp, false> {};
        -: 4180:
        -: 4181:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4182:int __convert_to_integral(int __val) { return __val; }
        -: 4183:
        -: 4184:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4185:unsigned __convert_to_integral(unsigned __val) { return __val; }
        -: 4186:
        -: 4187:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4188:long __convert_to_integral(long __val) { return __val; }
        -: 4189:
        -: 4190:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4191:unsigned long __convert_to_integral(unsigned long __val) { return __val; }
        -: 4192:
        -: 4193:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4194:long long __convert_to_integral(long long __val) { return __val; }
        -: 4195:
        -: 4196:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4197:unsigned long long __convert_to_integral(unsigned long long __val) {return __val; }
        -: 4198:
        -: 4199:template<typename _Fp>
        -: 4200:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4201:typename enable_if<is_floating_point<_Fp>::value, long long>::type
        -: 4202: __convert_to_integral(_Fp __val) { return __val; }
        -: 4203:
        -: 4204:#ifndef _LIBCPP_HAS_NO_INT128
        -: 4205:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4206:__int128_t __convert_to_integral(__int128_t __val) { return __val; }
        -: 4207:
        -: 4208:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4209:__uint128_t __convert_to_integral(__uint128_t __val) { return __val; }
        -: 4210:#endif
        -: 4211:
        -: 4212:template <class _Tp>
        -: 4213:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4214:typename __sfinae_underlying_type<_Tp>::__promoted_type
        -: 4215:__convert_to_integral(_Tp __val) { return __val; }
        -: 4216:
        -: 4217:#ifndef _LIBCPP_CXX03_LANG
        -: 4218:
        -: 4219:template <class _Tp>
        -: 4220:struct __has_operator_addressof_member_imp
        -: 4221:{
        -: 4222:    template <class _Up>
        -: 4223:        static auto __test(int)
        -: 4224:            -> typename __select_2nd<decltype(_VSTD::declval<_Up>().operator&()), true_type>::type;
        -: 4225:    template <class>
        -: 4226:        static auto __test(long) -> false_type;
        -: 4227:
        -: 4228:    static const bool value = decltype(__test<_Tp>(0))::value;
        -: 4229:};
        -: 4230:
        -: 4231:template <class _Tp>
        -: 4232:struct __has_operator_addressof_free_imp
        -: 4233:{
        -: 4234:    template <class _Up>
        -: 4235:        static auto __test(int)
        -: 4236:            -> typename __select_2nd<decltype(operator&(_VSTD::declval<_Up>())), true_type>::type;
        -: 4237:    template <class>
        -: 4238:        static auto __test(long) -> false_type;
        -: 4239:
        -: 4240:    static const bool value = decltype(__test<_Tp>(0))::value;
        -: 4241:};
        -: 4242:
        -: 4243:template <class _Tp>
        -: 4244:struct __has_operator_addressof
        -: 4245:    : public integral_constant<bool, __has_operator_addressof_member_imp<_Tp>::value
        -: 4246:                                  || __has_operator_addressof_free_imp<_Tp>::value>
        -: 4247:{};
        -: 4248:
        -: 4249:#endif  // _LIBCPP_CXX03_LANG
        -: 4250:
        -: 4251:#if _LIBCPP_STD_VER > 14
        -: 4252:
        -: 4253:template <class... _Args>
        -: 4254:struct conjunction : _And<_Args...> {};
        -: 4255:template<class... _Args>
        -: 4256:_LIBCPP_INLINE_VAR constexpr bool conjunction_v
        -: 4257:    = conjunction<_Args...>::value;
        -: 4258:
        -: 4259:template <class... _Args>
        -: 4260:struct disjunction : _Or<_Args...> {};
        -: 4261:template<class... _Args>
        -: 4262:_LIBCPP_INLINE_VAR constexpr bool disjunction_v
        -: 4263:    = disjunction<_Args...>::value;
        -: 4264:
        -: 4265:template <class _Tp>
        -: 4266:struct negation : _Not<_Tp> {};
        -: 4267:template<class _Tp>
        -: 4268:_LIBCPP_INLINE_VAR constexpr bool negation_v
        -: 4269:    = negation<_Tp>::value;
        -: 4270:#endif  // _LIBCPP_STD_VER > 14
        -: 4271:
        -: 4272:// These traits are used in __tree and __hash_table
        -: 4273:#ifndef _LIBCPP_CXX03_LANG
        -: 4274:struct __extract_key_fail_tag {};
        -: 4275:struct __extract_key_self_tag {};
        -: 4276:struct __extract_key_first_tag {};
        -: 4277:
        -: 4278:template <class _ValTy, class _Key,
        -: 4279:          class _RawValTy = typename __unconstref<_ValTy>::type>
        -: 4280:struct __can_extract_key
        -: 4281:    : conditional<_IsSame<_RawValTy, _Key>::value, __extract_key_self_tag,
        -: 4282:                  __extract_key_fail_tag>::type {};
        -: 4283:
        -: 4284:template <class _Pair, class _Key, class _First, class _Second>
        -: 4285:struct __can_extract_key<_Pair, _Key, pair<_First, _Second>>
        -: 4286:    : conditional<_IsSame<typename remove_const<_First>::type, _Key>::value,
        -: 4287:                  __extract_key_first_tag, __extract_key_fail_tag>::type {};
        -: 4288:
        -: 4289:// __can_extract_map_key uses true_type/false_type instead of the tags.
        -: 4290:// It returns true if _Key != _ContainerValueTy (the container is a map not a set)
        -: 4291:// and _ValTy == _Key.
        -: 4292:template <class _ValTy, class _Key, class _ContainerValueTy,
        -: 4293:          class _RawValTy = typename __unconstref<_ValTy>::type>
        -: 4294:struct __can_extract_map_key
        -: 4295:    : integral_constant<bool, _IsSame<_RawValTy, _Key>::value> {};
        -: 4296:
        -: 4297:// This specialization returns __extract_key_fail_tag for non-map containers
        -: 4298:// because _Key == _ContainerValueTy
        -: 4299:template <class _ValTy, class _Key, class _RawValTy>
        -: 4300:struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy>
        -: 4301:    : false_type {};
        -: 4302:
        -: 4303:#endif
        -: 4304:
        -: 4305:#ifndef _LIBCPP_HAS_NO_BUILTIN_IS_CONSTANT_EVALUATED
        -: 4306:#if _LIBCPP_STD_VER > 17
        -: 4307:_LIBCPP_INLINE_VISIBILITY
        -: 4308:inline constexpr bool is_constant_evaluated() noexcept {
        -: 4309:  return __builtin_is_constant_evaluated();
        -: 4310:}
        -: 4311:#endif
        -: 4312:
        -: 4313:inline _LIBCPP_CONSTEXPR
        -: 4314:bool __libcpp_is_constant_evaluated() _NOEXCEPT { return __builtin_is_constant_evaluated(); }
        -: 4315:#else
        -: 4316:inline _LIBCPP_CONSTEXPR
        -: 4317:bool __libcpp_is_constant_evaluated() _NOEXCEPT { return false; }
        -: 4318:#endif
        -: 4319:
        -: 4320:template <class _CharT>
        -: 4321:using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;
        -: 4322:
        -: 4323:_LIBCPP_END_NAMESPACE_STD
        -: 4324:
        -: 4325:#if _LIBCPP_STD_VER > 14
        -: 4326:// std::byte
        -: 4327:namespace std  // purposefully not versioned
        -: 4328:{
        -: 4329:
        -: 4330:
        -: 4331:}
        -: 4332:#endif
        -: 4333:
        -: 4334:#endif  // _LIBCPP_TYPE_TRAITS
