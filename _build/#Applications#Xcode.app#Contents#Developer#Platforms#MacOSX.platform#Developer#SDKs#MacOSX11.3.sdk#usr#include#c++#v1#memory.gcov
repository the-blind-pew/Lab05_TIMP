        -:    0:Source:/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.3.sdk/usr/include/c++/v1/memory
        -:    0:Graph:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcno
        -:    0:Data:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/transaction.dir/banking/Transaction.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_MEMORY
        -:   11:#define _LIBCPP_MEMORY
        -:   12:
        -:   13:/*
        -:   14:    memory synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:struct allocator_arg_t { };
        -:   20:inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   21:
        -:   22:template <class T, class Alloc> struct uses_allocator;
        -:   23:
        -:   24:template <class Ptr>
        -:   25:struct pointer_traits
        -:   26:{
        -:   27:    typedef Ptr pointer;
        -:   28:    typedef <details> element_type;
        -:   29:    typedef <details> difference_type;
        -:   30:
        -:   31:    template <class U> using rebind = <details>;
        -:   32:
        -:   33:    static pointer pointer_to(<details>);
        -:   34:};
        -:   35:
        -:   36:template <class T>
        -:   37:struct pointer_traits<T*>
        -:   38:{
        -:   39:    typedef T* pointer;
        -:   40:    typedef T element_type;
        -:   41:    typedef ptrdiff_t difference_type;
        -:   42:
        -:   43:    template <class U> using rebind = U*;
        -:   44:
        -:   45:    static pointer pointer_to(<details>) noexcept; // constexpr in C++20
        -:   46:};
        -:   47:
        -:   48:template <class T> constexpr T* to_address(T* p) noexcept; // C++20
        -:   49:template <class Ptr> auto to_address(const Ptr& p) noexcept; // C++20
        -:   50:
        -:   51:template <class Alloc>
        -:   52:struct allocator_traits
        -:   53:{
        -:   54:    typedef Alloc                        allocator_type;
        -:   55:    typedef typename allocator_type::value_type
        -:   56:                                         value_type;
        -:   57:
        -:   58:    typedef Alloc::pointer | value_type* pointer;
        -:   59:    typedef Alloc::const_pointer
        -:   60:          | pointer_traits<pointer>::rebind<const value_type>
        -:   61:                                         const_pointer;
        -:   62:    typedef Alloc::void_pointer
        -:   63:          | pointer_traits<pointer>::rebind<void>
        -:   64:                                         void_pointer;
        -:   65:    typedef Alloc::const_void_pointer
        -:   66:          | pointer_traits<pointer>::rebind<const void>
        -:   67:                                         const_void_pointer;
        -:   68:    typedef Alloc::difference_type
        -:   69:          | pointer_traits<pointer>::difference_type
        -:   70:                                         difference_type;
        -:   71:    typedef Alloc::size_type
        -:   72:          | make_unsigned<difference_type>::type
        -:   73:                                         size_type;
        -:   74:    typedef Alloc::propagate_on_container_copy_assignment
        -:   75:          | false_type                   propagate_on_container_copy_assignment;
        -:   76:    typedef Alloc::propagate_on_container_move_assignment
        -:   77:          | false_type                   propagate_on_container_move_assignment;
        -:   78:    typedef Alloc::propagate_on_container_swap
        -:   79:          | false_type                   propagate_on_container_swap;
        -:   80:    typedef Alloc::is_always_equal
        -:   81:          | is_empty                     is_always_equal;
        -:   82:
        -:   83:    template <class T> using rebind_alloc  = Alloc::rebind<T>::other | Alloc<T, Args...>;
        -:   84:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   85:
        -:   86:    static pointer allocate(allocator_type& a, size_type n);                          // [[nodiscard]] in C++20
        -:   87:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint); // [[nodiscard]] in C++20
        -:   88:
        -:   89:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   90:
        -:   91:    template <class T, class... Args>
        -:   92:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   93:
        -:   94:    template <class T>
        -:   95:        static void destroy(allocator_type& a, T* p);
        -:   96:
        -:   97:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   98:
        -:   99:    static allocator_type
        -:  100:        select_on_container_copy_construction(const allocator_type& a);
        -:  101:};
        -:  102:
        -:  103:template <>
        -:  104:class allocator<void> // deprecated in C++17, removed in C++20
        -:  105:{
        -:  106:public:
        -:  107:    typedef void*                                 pointer;
        -:  108:    typedef const void*                           const_pointer;
        -:  109:    typedef void                                  value_type;
        -:  110:
        -:  111:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  112:};
        -:  113:
        -:  114:template <class T>
        -:  115:class allocator
        -:  116:{
        -:  117:public:
        -:  118:    typedef size_t    size_type;
        -:  119:    typedef ptrdiff_t difference_type;
        -:  120:    typedef T*        pointer;                           // deprecated in C++17, removed in C++20
        -:  121:    typedef const T*  const_pointer;                     // deprecated in C++17, removed in C++20
        -:  122:    typedef typename add_lvalue_reference<T>::type
        -:  123:                      reference;                         // deprecated in C++17, removed in C++20
        -:  124:    typedef typename add_lvalue_reference<const T>::type
        -:  125:                      const_reference;                   // deprecated in C++17, removed in C++20
        -:  126:
        -:  127:    typedef T         value_type;
        -:  128:
        -:  129:    template <class U> struct rebind {typedef allocator<U> other;}; // deprecated in C++17, removed in C++20
        -:  130:
        -:  131:    typedef true_type propagate_on_container_move_assignment;
        -:  132:    typedef true_type is_always_equal;
        -:  133:
        -:  134:    constexpr allocator() noexcept;                      // constexpr in C++20
        -:  135:    constexpr allocator(const allocator&) noexcept;      // constexpr in C++20
        -:  136:    template <class U>
        -:  137:      constexpr allocator(const allocator<U>&) noexcept; // constexpr in C++20
        -:  138:    ~allocator();
        -:  139:    pointer address(reference x) const noexcept;             // deprecated in C++17, removed in C++20
        -:  140:    const_pointer address(const_reference x) const noexcept; // deprecated in C++17, removed in C++20
        -:  141:    T* allocate(size_t n, const void* hint);          // deprecated in C++17, removed in C++20
        -:  142:    T* allocate(size_t n);
        -:  143:    void deallocate(T* p, size_t n) noexcept;
        -:  144:    size_type max_size() const noexcept;              // deprecated in C++17, removed in C++20
        -:  145:    template<class U, class... Args>
        -:  146:        void construct(U* p, Args&&... args);         // deprecated in C++17, removed in C++20
        -:  147:    template <class U>
        -:  148:        void destroy(U* p);                           // deprecated in C++17, removed in C++20
        -:  149:};
        -:  150:
        -:  151:template <class T, class U>
        -:  152:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  153:
        -:  154:template <class T, class U>
        -:  155:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  156:
        -:  157:template <class OutputIterator, class T>
        -:  158:class raw_storage_iterator
        -:  159:    : public iterator<output_iterator_tag,
        -:  160:                      T,                               // purposefully not C++03
        -:  161:                      ptrdiff_t,                       // purposefully not C++03
        -:  162:                      T*,                              // purposefully not C++03
        -:  163:                      raw_storage_iterator&>           // purposefully not C++03
        -:  164:{
        -:  165:public:
        -:  166:    explicit raw_storage_iterator(OutputIterator x);
        -:  167:    raw_storage_iterator& operator*();
        -:  168:    raw_storage_iterator& operator=(const T& element);
        -:  169:    raw_storage_iterator& operator++();
        -:  170:    raw_storage_iterator  operator++(int);
        -:  171:};
        -:  172:
        -:  173:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  174:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  175:
        -:  176:template <class T> T* addressof(T& r) noexcept;
        -:  177:template <class T> T* addressof(const T&& r) noexcept = delete;
        -:  178:
        -:  179:template <class InputIterator, class ForwardIterator>
        -:  180:ForwardIterator
        -:  181:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  182:
        -:  183:template <class InputIterator, class Size, class ForwardIterator>
        -:  184:ForwardIterator
        -:  185:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  186:
        -:  187:template <class ForwardIterator, class T>
        -:  188:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  189:
        -:  190:template <class ForwardIterator, class Size, class T>
        -:  191:ForwardIterator
        -:  192:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  193:
        -:  194:template <class T>
        -:  195:void destroy_at(T* location);
        -:  196:
        -:  197:template <class ForwardIterator>
        -:  198: void destroy(ForwardIterator first, ForwardIterator last);
        -:  199:
        -:  200:template <class ForwardIterator, class Size>
        -:  201: ForwardIterator destroy_n(ForwardIterator first, Size n);
        -:  202:
        -:  203:template <class InputIterator, class ForwardIterator>
        -:  204: ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);
        -:  205:
        -:  206:template <class InputIterator, class Size, class ForwardIterator>
        -:  207: pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
        -:  208:
        -:  209:template <class ForwardIterator>
        -:  210: void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
        -:  211:
        -:  212:template <class ForwardIterator, class Size>
        -:  213: ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
        -:  214:
        -:  215:template <class ForwardIterator>
        -:  216: void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
        -:  217:
        -:  218:template <class ForwardIterator, class Size>
        -:  219: ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
        -:  220:
        -:  221:template <class Y> struct auto_ptr_ref {};      // deprecated in C++11, removed in C++17
        -:  222:
        -:  223:template<class X>
        -:  224:class auto_ptr                                  // deprecated in C++11, removed in C++17
        -:  225:{
        -:  226:public:
        -:  227:    typedef X element_type;
        -:  228:
        -:  229:    explicit auto_ptr(X* p =0) throw();
        -:  230:    auto_ptr(auto_ptr&) throw();
        -:  231:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  232:    auto_ptr& operator=(auto_ptr&) throw();
        -:  233:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  234:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  235:    ~auto_ptr() throw();
        -:  236:
        -:  237:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  238:    X* operator->() const throw();
        -:  239:    X* get() const throw();
        -:  240:    X* release() throw();
        -:  241:    void reset(X* p =0) throw();
        -:  242:
        -:  243:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  244:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  245:    template<class Y> operator auto_ptr<Y>() throw();
        -:  246:};
        -:  247:
        -:  248:template <class T>
        -:  249:struct default_delete
        -:  250:{
        -:  251:    constexpr default_delete() noexcept = default;
        -:  252:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  253:
        -:  254:    void operator()(T*) const noexcept;
        -:  255:};
        -:  256:
        -:  257:template <class T>
        -:  258:struct default_delete<T[]>
        -:  259:{
        -:  260:    constexpr default_delete() noexcept = default;
        -:  261:    void operator()(T*) const noexcept;
        -:  262:    template <class U> void operator()(U*) const = delete;
        -:  263:};
        -:  264:
        -:  265:template <class T, class D = default_delete<T>>
        -:  266:class unique_ptr
        -:  267:{
        -:  268:public:
        -:  269:    typedef see below pointer;
        -:  270:    typedef T element_type;
        -:  271:    typedef D deleter_type;
        -:  272:
        -:  273:    // constructors
        -:  274:    constexpr unique_ptr() noexcept;
        -:  275:    explicit unique_ptr(pointer p) noexcept;
        -:  276:    unique_ptr(pointer p, see below d1) noexcept;
        -:  277:    unique_ptr(pointer p, see below d2) noexcept;
        -:  278:    unique_ptr(unique_ptr&& u) noexcept;
        -:  279:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  280:    template <class U, class E>
        -:  281:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  282:    template <class U>
        -:  283:        unique_ptr(auto_ptr<U>&& u) noexcept;       // removed in C++17
        -:  284:
        -:  285:    // destructor
        -:  286:    ~unique_ptr();
        -:  287:
        -:  288:    // assignment
        -:  289:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  290:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  291:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  292:
        -:  293:    // observers
        -:  294:    typename add_lvalue_reference<T>::type operator*() const;
        -:  295:    pointer operator->() const noexcept;
        -:  296:    pointer get() const noexcept;
        -:  297:    deleter_type& get_deleter() noexcept;
        -:  298:    const deleter_type& get_deleter() const noexcept;
        -:  299:    explicit operator bool() const noexcept;
        -:  300:
        -:  301:    // modifiers
        -:  302:    pointer release() noexcept;
        -:  303:    void reset(pointer p = pointer()) noexcept;
        -:  304:    void swap(unique_ptr& u) noexcept;
        -:  305:};
        -:  306:
        -:  307:template <class T, class D>
        -:  308:class unique_ptr<T[], D>
        -:  309:{
        -:  310:public:
        -:  311:    typedef implementation-defined pointer;
        -:  312:    typedef T element_type;
        -:  313:    typedef D deleter_type;
        -:  314:
        -:  315:    // constructors
        -:  316:    constexpr unique_ptr() noexcept;
        -:  317:    explicit unique_ptr(pointer p) noexcept;
        -:  318:    unique_ptr(pointer p, see below d) noexcept;
        -:  319:    unique_ptr(pointer p, see below d) noexcept;
        -:  320:    unique_ptr(unique_ptr&& u) noexcept;
        -:  321:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  322:
        -:  323:    // destructor
        -:  324:    ~unique_ptr();
        -:  325:
        -:  326:    // assignment
        -:  327:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  328:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  329:
        -:  330:    // observers
        -:  331:    T& operator[](size_t i) const;
        -:  332:    pointer get() const noexcept;
        -:  333:    deleter_type& get_deleter() noexcept;
        -:  334:    const deleter_type& get_deleter() const noexcept;
        -:  335:    explicit operator bool() const noexcept;
        -:  336:
        -:  337:    // modifiers
        -:  338:    pointer release() noexcept;
        -:  339:    void reset(pointer p = pointer()) noexcept;
        -:  340:    void reset(nullptr_t) noexcept;
        -:  341:  template <class U> void reset(U) = delete;
        -:  342:    void swap(unique_ptr& u) noexcept;
        -:  343:};
        -:  344:
        -:  345:template <class T, class D>
        -:  346:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  347:
        -:  348:template <class T1, class D1, class T2, class D2>
        -:  349:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  350:template <class T1, class D1, class T2, class D2>
        -:  351:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  352:template <class T1, class D1, class T2, class D2>
        -:  353:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  354:template <class T1, class D1, class T2, class D2>
        -:  355:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  356:template <class T1, class D1, class T2, class D2>
        -:  357:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  358:template <class T1, class D1, class T2, class D2>
        -:  359:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  360:
        -:  361:template <class T, class D>
        -:  362:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  363:template <class T, class D>
        -:  364:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  365:template <class T, class D>
        -:  366:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  367:template <class T, class D>
        -:  368:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  369:
        -:  370:template <class T, class D>
        -:  371:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  372:template <class T, class D>
        -:  373:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  374:template <class T, class D>
        -:  375:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  376:template <class T, class D>
        -:  377:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  378:template <class T, class D>
        -:  379:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  380:template <class T, class D>
        -:  381:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  382:template <class T, class D>
        -:  383:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  384:template <class T, class D>
        -:  385:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  386:
        -:  387:class bad_weak_ptr
        -:  388:    : public std::exception
        -:  389:{
        -:  390:    bad_weak_ptr() noexcept;
        -:  391:};
        -:  392:
        -:  393:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  394:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  395:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  396:
        -:  397:template<class E, class T, class Y, class D>
        -:  398:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, unique_ptr<Y, D> const& p);
        -:  399:
        -:  400:template<class T>
        -:  401:class shared_ptr
        -:  402:{
        -:  403:public:
        -:  404:    typedef T element_type;
        -:  405:    typedef weak_ptr<T> weak_type; // C++17
        -:  406:
        -:  407:    // constructors:
        -:  408:    constexpr shared_ptr() noexcept;
        -:  409:    template<class Y> explicit shared_ptr(Y* p);
        -:  410:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  411:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  412:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  413:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  414:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  415:    shared_ptr(const shared_ptr& r) noexcept;
        -:  416:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  417:    shared_ptr(shared_ptr&& r) noexcept;
        -:  418:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  419:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  420:    template<class Y> shared_ptr(auto_ptr<Y>&& r);          // removed in C++17
        -:  421:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  422:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  423:
        -:  424:    // destructor:
        -:  425:    ~shared_ptr();
        -:  426:
        -:  427:    // assignment:
        -:  428:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  429:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  430:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  431:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  432:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r); // removed in C++17
        -:  433:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  434:
        -:  435:    // modifiers:
        -:  436:    void swap(shared_ptr& r) noexcept;
        -:  437:    void reset() noexcept;
        -:  438:    template<class Y> void reset(Y* p);
        -:  439:    template<class Y, class D> void reset(Y* p, D d);
        -:  440:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  441:
        -:  442:    // observers:
        -:  443:    T* get() const noexcept;
        -:  444:    T& operator*() const noexcept;
        -:  445:    T* operator->() const noexcept;
        -:  446:    long use_count() const noexcept;
        -:  447:    bool unique() const noexcept;
        -:  448:    explicit operator bool() const noexcept;
        -:  449:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  450:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  451:};
        -:  452:
        -:  453:template<class T>
        -:  454:shared_ptr(weak_ptr<T>) -> shared_ptr<T>;
        -:  455:template<class T, class D>
        -:  456:shared_ptr(unique_ptr<T, D>) -> shared_ptr<T>;
        -:  457:
        -:  458:// shared_ptr comparisons:
        -:  459:template<class T, class U>
        -:  460:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  461:template<class T, class U>
        -:  462:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  463:template<class T, class U>
        -:  464:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  465:template<class T, class U>
        -:  466:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  467:template<class T, class U>
        -:  468:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  469:template<class T, class U>
        -:  470:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  471:
        -:  472:template <class T>
        -:  473:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  474:template <class T>
        -:  475:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  476:template <class T>
        -:  477:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  478:template <class T>
        -:  479:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  480:template <class T>
        -:  481:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  482:template <class T>
        -:  483:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  484:template <class T>
        -:  485:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  486:template <class T>
        -:  487:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  488:template <class T>
        -:  489:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  490:template <class T>
        -:  491:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  492:template <class T>
        -:  493:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  494:template <class T>
        -:  495:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  496:
        -:  497:// shared_ptr specialized algorithms:
        -:  498:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  499:
        -:  500:// shared_ptr casts:
        -:  501:template<class T, class U>
        -:  502:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  503:template<class T, class U>
        -:  504:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  505:template<class T, class U>
        -:  506:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  507:
        -:  508:// shared_ptr I/O:
        -:  509:template<class E, class T, class Y>
        -:  510:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  511:
        -:  512:// shared_ptr get_deleter:
        -:  513:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  514:
        -:  515:template<class T, class... Args>
        -:  516:    shared_ptr<T> make_shared(Args&&... args);
        -:  517:template<class T, class A, class... Args>
        -:  518:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  519:
        -:  520:template<class T>
        -:  521:class weak_ptr
        -:  522:{
        -:  523:public:
        -:  524:    typedef T element_type;
        -:  525:
        -:  526:    // constructors
        -:  527:    constexpr weak_ptr() noexcept;
        -:  528:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  529:    weak_ptr(weak_ptr const& r) noexcept;
        -:  530:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  531:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  532:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  533:
        -:  534:    // destructor
        -:  535:    ~weak_ptr();
        -:  536:
        -:  537:    // assignment
        -:  538:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  539:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  540:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  541:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  542:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  543:
        -:  544:    // modifiers
        -:  545:    void swap(weak_ptr& r) noexcept;
        -:  546:    void reset() noexcept;
        -:  547:
        -:  548:    // observers
        -:  549:    long use_count() const noexcept;
        -:  550:    bool expired() const noexcept;
        -:  551:    shared_ptr<T> lock() const noexcept;
        -:  552:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  553:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  554:};
        -:  555:
        -:  556:template<class T>
        -:  557:weak_ptr(shared_ptr<T>) -> weak_ptr<T>;
        -:  558:
        -:  559:// weak_ptr specialized algorithms:
        -:  560:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  561:
        -:  562:// class owner_less:
        -:  563:template<class T> struct owner_less;
        -:  564:
        -:  565:template<class T>
        -:  566:struct owner_less<shared_ptr<T> >
        -:  567:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  568:{
        -:  569:    typedef bool result_type;
        -:  570:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  571:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  572:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  573:};
        -:  574:
        -:  575:template<class T>
        -:  576:struct owner_less<weak_ptr<T> >
        -:  577:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  578:{
        -:  579:    typedef bool result_type;
        -:  580:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  581:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  582:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  583:};
        -:  584:
        -:  585:template <>  // Added in C++14
        -:  586:struct owner_less<void>
        -:  587:{
        -:  588:    template <class _Tp, class _Up>
        -:  589:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  590:    template <class _Tp, class _Up>
        -:  591:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  592:    template <class _Tp, class _Up>
        -:  593:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  594:    template <class _Tp, class _Up>
        -:  595:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  596:
        -:  597:    typedef void is_transparent;
        -:  598:};
        -:  599:
        -:  600:template<class T>
        -:  601:class enable_shared_from_this
        -:  602:{
        -:  603:protected:
        -:  604:    constexpr enable_shared_from_this() noexcept;
        -:  605:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  606:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  607:    ~enable_shared_from_this();
        -:  608:public:
        -:  609:    shared_ptr<T> shared_from_this();
        -:  610:    shared_ptr<T const> shared_from_this() const;
        -:  611:};
        -:  612:
        -:  613:template<class T>
        -:  614:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  615:template<class T>
        -:  616:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  617:template<class T>
        -:  618:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  619:template<class T>
        -:  620:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  621:template<class T>
        -:  622:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  623:template<class T>
        -:  624:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  625:template<class T>
        -:  626:    shared_ptr<T>
        -:  627:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  628:template<class T>
        -:  629:    bool
        -:  630:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  631:template<class T>
        -:  632:    bool
        -:  633:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  634:template<class T>
        -:  635:    bool
        -:  636:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  637:                                          shared_ptr<T> w, memory_order success,
        -:  638:                                          memory_order failure);
        -:  639:template<class T>
        -:  640:    bool
        -:  641:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  642:                                            shared_ptr<T> w, memory_order success,
        -:  643:                                            memory_order failure);
        -:  644:// Hash support
        -:  645:template <class T> struct hash;
        -:  646:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  647:template <class T> struct hash<shared_ptr<T> >;
        -:  648:
        -:  649:template <class T, class Alloc>
        -:  650:  inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
        -:  651:
        -:  652:// Pointer safety
        -:  653:enum class pointer_safety { relaxed, preferred, strict };
        -:  654:void declare_reachable(void *p);
        -:  655:template <class T> T *undeclare_reachable(T *p);
        -:  656:void declare_no_pointers(char *p, size_t n);
        -:  657:void undeclare_no_pointers(char *p, size_t n);
        -:  658:pointer_safety get_pointer_safety() noexcept;
        -:  659:
        -:  660:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  661:
        -:  662:}  // std
        -:  663:
        -:  664:*/
        -:  665:
        -:  666:#include <__config>
        -:  667:#include <type_traits>
        -:  668:#include <typeinfo>
        -:  669:#include <cstddef>
        -:  670:#include <cstdint>
        -:  671:#include <new>
        -:  672:#include <utility>
        -:  673:#include <limits>
        -:  674:#include <iterator>
        -:  675:#include <__functional_base>
        -:  676:#include <iosfwd>
        -:  677:#include <tuple>
        -:  678:#include <stdexcept>
        -:  679:#include <cstring>
        -:  680:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -:  681:#  include <atomic>
        -:  682:#endif
        -:  683:#include <version>
        -:  684:
        -:  685:// TODO: We re-added #include <cassert> to <memory> to make the internal build
        -:  686://       pass, but we should remove it as soon as all internal clients have fixed
        -:  687://       their code.
        -:  688:#include <cassert>
        -:  689:
        -:  690:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  691:#pragma GCC system_header
        -:  692:#endif
        -:  693:
        -:  694:_LIBCPP_PUSH_MACROS
        -:  695:#include <__undef_macros>
        -:  696:
        -:  697:
        -:  698:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  699:
        -:  700:template <class _ValueType>
        -:  701:inline _LIBCPP_INLINE_VISIBILITY
        -:  702:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  703:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  704:    defined(__ATOMIC_RELAXED) &&        \
        -:  705:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  706:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  707:#else
        -:  708:    return *__value;
        -:  709:#endif
        -:  710:}
        -:  711:
        -:  712:template <class _ValueType>
        -:  713:inline _LIBCPP_INLINE_VISIBILITY
        -:  714:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:  715:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  716:    defined(__ATOMIC_ACQUIRE) &&        \
        -:  717:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  718:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:  719:#else
        -:  720:    return *__value;
        -:  721:#endif
        -:  722:}
        -:  723:
        -:  724:// addressof moved to <type_traits>
        -:  725:
        -:  726:template <class _Tp> class allocator;
        -:  727:
        -:  728:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  729:template <>
        -:  730:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX17 allocator<void>
        -:  731:{
        -:  732:public:
        -:  733:    typedef void*             pointer;
        -:  734:    typedef const void*       const_pointer;
        -:  735:    typedef void              value_type;
        -:  736:
        -:  737:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  738:};
        -:  739:
        -:  740:template <>
        -:  741:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX17 allocator<const void>
        -:  742:{
        -:  743:public:
        -:  744:    typedef const void*       pointer;
        -:  745:    typedef const void*       const_pointer;
        -:  746:    typedef const void        value_type;
        -:  747:
        -:  748:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  749:};
        -:  750:#endif
        -:  751:
        -:  752:// pointer_traits
        -:  753:
        -:  754:template <class _Tp, class = void>
        -:  755:struct __has_element_type : false_type {};
        -:  756:
        -:  757:template <class _Tp>
        -:  758:struct __has_element_type<_Tp,
        -:  759:              typename __void_t<typename _Tp::element_type>::type> : true_type {};
        -:  760:
        -:  761:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  762:struct __pointer_traits_element_type;
        -:  763:
        -:  764:template <class _Ptr>
        -:  765:struct __pointer_traits_element_type<_Ptr, true>
        -:  766:{
        -:  767:    typedef _LIBCPP_NODEBUG_TYPE typename _Ptr::element_type type;
        -:  768:};
        -:  769:
        -:  770:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  771:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  772:{
        -:  773:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::element_type type;
        -:  774:};
        -:  775:
        -:  776:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  777:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  778:{
        -:  779:    typedef _LIBCPP_NODEBUG_TYPE _Tp type;
        -:  780:};
        -:  781:
        -:  782:template <class _Tp, class = void>
        -:  783:struct __has_difference_type : false_type {};
        -:  784:
        -:  785:template <class _Tp>
        -:  786:struct __has_difference_type<_Tp,
        -:  787:            typename __void_t<typename _Tp::difference_type>::type> : true_type {};
        -:  788:
        -:  789:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  790:struct __pointer_traits_difference_type
        -:  791:{
        -:  792:    typedef _LIBCPP_NODEBUG_TYPE ptrdiff_t type;
        -:  793:};
        -:  794:
        -:  795:template <class _Ptr>
        -:  796:struct __pointer_traits_difference_type<_Ptr, true>
        -:  797:{
        -:  798:    typedef _LIBCPP_NODEBUG_TYPE typename _Ptr::difference_type type;
        -:  799:};
        -:  800:
        -:  801:template <class _Tp, class _Up>
        -:  802:struct __has_rebind
        -:  803:{
        -:  804:private:
        -:  805:    struct __two {char __lx; char __lxx;};
        -:  806:    template <class _Xp> static __two __test(...);
        -:  807:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -:  808:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  809:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -:  810:public:
        -:  811:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  812:};
        -:  813:
        -:  814:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  815:struct __pointer_traits_rebind
        -:  816:{
        -:  817:#ifndef _LIBCPP_CXX03_LANG
        -:  818:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up> type;
        -:  819:#else
        -:  820:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up>::other type;
        -:  821:#endif
        -:  822:};
        -:  823:
        -:  824:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  825:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  826:{
        -:  827:#ifndef _LIBCPP_CXX03_LANG
        -:  828:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  829:#else
        -:  830:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  831:#endif
        -:  832:};
        -:  833:
        -:  834:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  835:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  836:{
        -:  837:    typedef _Sp<_Up, _Args...> type;
        -:  838:};
        -:  839:
        -:  840:template <class _Ptr>
        -:  841:struct _LIBCPP_TEMPLATE_VIS pointer_traits
        -:  842:{
        -:  843:    typedef _Ptr                                                     pointer;
        -:  844:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  845:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  846:
        -:  847:#ifndef _LIBCPP_CXX03_LANG
        -:  848:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  849:#else
        -:  850:    template <class _Up> struct rebind
        -:  851:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  852:#endif  // _LIBCPP_CXX03_LANG
        -:  853:
        -:  854:private:
        -:  855:    struct __nat {};
        -:  856:public:
        -:  857:    _LIBCPP_INLINE_VISIBILITY
        -:  858:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  859:                                           __nat, element_type>::type& __r)
        -:  860:        {return pointer::pointer_to(__r);}
        -:  861:};
        -:  862:
        -:  863:template <class _Tp>
        -:  864:struct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>
        -:  865:{
        -:  866:    typedef _Tp*      pointer;
        -:  867:    typedef _Tp       element_type;
        -:  868:    typedef ptrdiff_t difference_type;
        -:  869:
        -:  870:#ifndef _LIBCPP_CXX03_LANG
        -:  871:    template <class _Up> using rebind = _Up*;
        -:  872:#else
        -:  873:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  874:#endif
        -:  875:
        -:  876:private:
        -:  877:    struct __nat {};
        -:  878:public:
        -:  879:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
    #####:  880:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  881:                                      __nat, element_type>::type& __r) _NOEXCEPT
    #####:  882:        {return _VSTD::addressof(__r);}
        -:  883:};
        -:  884:
        -:  885:template <class _From, class _To>
        -:  886:struct __rebind_pointer {
        -:  887:#ifndef _LIBCPP_CXX03_LANG
        -:  888:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -:  889:#else
        -:  890:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -:  891:#endif
        -:  892:};
        -:  893:
        -:  894:// allocator_traits
        -:  895:
        -:  896:template <class _Tp, class = void>
        -:  897:struct __has_pointer_type : false_type {};
        -:  898:
        -:  899:template <class _Tp>
        -:  900:struct __has_pointer_type<_Tp,
        -:  901:          typename __void_t<typename _Tp::pointer>::type> : true_type {};
        -:  902:
        -:  903:namespace __pointer_type_imp
        -:  904:{
        -:  905:
        -:  906:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -:  907:struct __pointer_type
        -:  908:{
        -:  909:    typedef _LIBCPP_NODEBUG_TYPE typename _Dp::pointer type;
        -:  910:};
        -:  911:
        -:  912:template <class _Tp, class _Dp>
        -:  913:struct __pointer_type<_Tp, _Dp, false>
        -:  914:{
        -:  915:    typedef _LIBCPP_NODEBUG_TYPE _Tp* type;
        -:  916:};
        -:  917:
        -:  918:}  // __pointer_type_imp
        -:  919:
        -:  920:template <class _Tp, class _Dp>
        -:  921:struct __pointer_type
        -:  922:{
        -:  923:    typedef _LIBCPP_NODEBUG_TYPE typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -:  924:};
        -:  925:
        -:  926:template <class _Tp, class = void>
        -:  927:struct __has_const_pointer : false_type {};
        -:  928:
        -:  929:template <class _Tp>
        -:  930:struct __has_const_pointer<_Tp,
        -:  931:            typename __void_t<typename _Tp::const_pointer>::type> : true_type {};
        -:  932:
        -:  933:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -:  934:struct __const_pointer
        -:  935:{
        -:  936:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::const_pointer type;
        -:  937:};
        -:  938:
        -:  939:template <class _Tp, class _Ptr, class _Alloc>
        -:  940:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -:  941:{
        -:  942:#ifndef _LIBCPP_CXX03_LANG
        -:  943:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -:  944:#else
        -:  945:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -:  946:#endif
        -:  947:};
        -:  948:
        -:  949:template <class _Tp, class = void>
        -:  950:struct __has_void_pointer : false_type {};
        -:  951:
        -:  952:template <class _Tp>
        -:  953:struct __has_void_pointer<_Tp,
        -:  954:               typename __void_t<typename _Tp::void_pointer>::type> : true_type {};
        -:  955:
        -:  956:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -:  957:struct __void_pointer
        -:  958:{
        -:  959:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::void_pointer type;
        -:  960:};
        -:  961:
        -:  962:template <class _Ptr, class _Alloc>
        -:  963:struct __void_pointer<_Ptr, _Alloc, false>
        -:  964:{
        -:  965:#ifndef _LIBCPP_CXX03_LANG
        -:  966:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<void> type;
        -:  967:#else
        -:  968:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -:  969:#endif
        -:  970:};
        -:  971:
        -:  972:template <class _Tp, class = void>
        -:  973:struct __has_const_void_pointer : false_type {};
        -:  974:
        -:  975:template <class _Tp>
        -:  976:struct __has_const_void_pointer<_Tp,
        -:  977:            typename __void_t<typename _Tp::const_void_pointer>::type> : true_type {};
        -:  978:
        -:  979:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -:  980:struct __const_void_pointer
        -:  981:{
        -:  982:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::const_void_pointer type;
        -:  983:};
        -:  984:
        -:  985:template <class _Ptr, class _Alloc>
        -:  986:struct __const_void_pointer<_Ptr, _Alloc, false>
        -:  987:{
        -:  988:#ifndef _LIBCPP_CXX03_LANG
        -:  989:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const void> type;
        -:  990:#else
        -:  991:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -:  992:#endif
        -:  993:};
        -:  994:
        -:  995:
        -:  996:template <bool _UsePointerTraits> struct __to_address_helper;
        -:  997:
        -:  998:template <> struct __to_address_helper<true> {
        -:  999:    template <class _Pointer>
        -: 1000:    using __return_type = decltype(pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()));
        -: 1001:
        -: 1002:    template <class _Pointer>
        -: 1003:    _LIBCPP_CONSTEXPR
        -: 1004:    static __return_type<_Pointer>
        -: 1005:    __do_it(const _Pointer &__p) _NOEXCEPT { return pointer_traits<_Pointer>::to_address(__p); }
        -: 1006:};
        -: 1007:
        -: 1008:template <class _Pointer, bool _Dummy = true>
        -: 1009:using __choose_to_address = __to_address_helper<_IsValidExpansion<__to_address_helper<_Dummy>::template __return_type, _Pointer>::value>;
        -: 1010:
        -: 1011:
        -: 1012:template <class _Tp>
        -: 1013:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1014:_Tp*
    #####: 1015:__to_address(_Tp* __p) _NOEXCEPT
        -: 1016:{
        -: 1017:    static_assert(!is_function<_Tp>::value, "_Tp is a function type");
    #####: 1018:    return __p;
        -: 1019:}
        -: 1020:
        -: 1021:template <class _Pointer>
        -: 1022:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1023:typename __choose_to_address<_Pointer>::template __return_type<_Pointer>
        -: 1024:__to_address(const _Pointer& __p) _NOEXCEPT {
        -: 1025:  return __choose_to_address<_Pointer>::__do_it(__p);
        -: 1026:}
        -: 1027:
        -: 1028:template <> struct __to_address_helper<false> {
        -: 1029:    template <class _Pointer>
        -: 1030:    using __return_type = typename pointer_traits<_Pointer>::element_type*;
        -: 1031:
        -: 1032:    template <class _Pointer>
        -: 1033:    _LIBCPP_CONSTEXPR
        -: 1034:    static __return_type<_Pointer>
        -: 1035:    __do_it(const _Pointer &__p) _NOEXCEPT { return std::__to_address(__p.operator->()); }
        -: 1036:};
        -: 1037:
        -: 1038:
        -: 1039:#if _LIBCPP_STD_VER > 17
        -: 1040:template <class _Tp>
        -: 1041:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -: 1042:_Tp*
        -: 1043:to_address(_Tp* __p) _NOEXCEPT
        -: 1044:{
        -: 1045:    static_assert(!is_function_v<_Tp>, "_Tp is a function type");
        -: 1046:    return __p;
        -: 1047:}
        -: 1048:
        -: 1049:template <class _Pointer>
        -: 1050:inline _LIBCPP_INLINE_VISIBILITY
        -: 1051:auto
        -: 1052:to_address(const _Pointer& __p) _NOEXCEPT
        -: 1053:{
        -: 1054:    return _VSTD::__to_address(__p);
        -: 1055:}
        -: 1056:#endif
        -: 1057:
        -: 1058:template <class _Tp, class = void>
        -: 1059:struct __has_size_type : false_type {};
        -: 1060:
        -: 1061:template <class _Tp>
        -: 1062:struct __has_size_type<_Tp,
        -: 1063:               typename __void_t<typename _Tp::size_type>::type> : true_type {};
        -: 1064:
        -: 1065:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1066:struct __size_type
        -: 1067:{
        -: 1068:    typedef _LIBCPP_NODEBUG_TYPE typename make_unsigned<_DiffType>::type type;
        -: 1069:};
        -: 1070:
        -: 1071:template <class _Alloc, class _DiffType>
        -: 1072:struct __size_type<_Alloc, _DiffType, true>
        -: 1073:{
        -: 1074:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::size_type type;
        -: 1075:};
        -: 1076:
        -: 1077:template <class _Tp, class = void>
        -: 1078:struct __has_propagate_on_container_copy_assignment : false_type {};
        -: 1079:
        -: 1080:template <class _Tp>
        -: 1081:struct __has_propagate_on_container_copy_assignment<_Tp,
        -: 1082:    typename __void_t<typename _Tp::propagate_on_container_copy_assignment>::type>
        -: 1083:        : true_type {};
        -: 1084:
        -: 1085:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1086:struct __propagate_on_container_copy_assignment
        -: 1087:{
        -: 1088:    typedef _LIBCPP_NODEBUG_TYPE false_type type;
        -: 1089:};
        -: 1090:
        -: 1091:template <class _Alloc>
        -: 1092:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1093:{
        -: 1094:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1095:};
        -: 1096:
        -: 1097:template <class _Tp, class = void>
        -: 1098:struct __has_propagate_on_container_move_assignment : false_type {};
        -: 1099:
        -: 1100:template <class _Tp>
        -: 1101:struct __has_propagate_on_container_move_assignment<_Tp,
        -: 1102:           typename __void_t<typename _Tp::propagate_on_container_move_assignment>::type>
        -: 1103:               : true_type {};
        -: 1104:
        -: 1105:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1106:struct __propagate_on_container_move_assignment
        -: 1107:{
        -: 1108:    typedef false_type type;
        -: 1109:};
        -: 1110:
        -: 1111:template <class _Alloc>
        -: 1112:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1113:{
        -: 1114:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_move_assignment type;
        -: 1115:};
        -: 1116:
        -: 1117:template <class _Tp, class = void>
        -: 1118:struct __has_propagate_on_container_swap : false_type {};
        -: 1119:
        -: 1120:template <class _Tp>
        -: 1121:struct __has_propagate_on_container_swap<_Tp,
        -: 1122:           typename __void_t<typename _Tp::propagate_on_container_swap>::type>
        -: 1123:               : true_type {};
        -: 1124:
        -: 1125:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1126:struct __propagate_on_container_swap
        -: 1127:{
        -: 1128:    typedef false_type type;
        -: 1129:};
        -: 1130:
        -: 1131:template <class _Alloc>
        -: 1132:struct __propagate_on_container_swap<_Alloc, true>
        -: 1133:{
        -: 1134:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_swap type;
        -: 1135:};
        -: 1136:
        -: 1137:template <class _Tp, class = void>
        -: 1138:struct __has_is_always_equal : false_type {};
        -: 1139:
        -: 1140:template <class _Tp>
        -: 1141:struct __has_is_always_equal<_Tp,
        -: 1142:           typename __void_t<typename _Tp::is_always_equal>::type>
        -: 1143:               : true_type {};
        -: 1144:
        -: 1145:template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
        -: 1146:struct __is_always_equal
        -: 1147:{
        -: 1148:    typedef _LIBCPP_NODEBUG_TYPE typename _VSTD::is_empty<_Alloc>::type type;
        -: 1149:};
        -: 1150:
        -: 1151:template <class _Alloc>
        -: 1152:struct __is_always_equal<_Alloc, true>
        -: 1153:{
        -: 1154:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::is_always_equal type;
        -: 1155:};
        -: 1156:
        -: 1157:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1158:struct __has_rebind_other
        -: 1159:{
        -: 1160:private:
        -: 1161:    struct __two {char __lx; char __lxx;};
        -: 1162:    template <class _Xp> static __two __test(...);
        -: 1163:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1164:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1165:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1166:public:
        -: 1167:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1168:};
        -: 1169:
        -: 1170:template <class _Tp, class _Up>
        -: 1171:struct __has_rebind_other<_Tp, _Up, false>
        -: 1172:{
        -: 1173:    static const bool value = false;
        -: 1174:};
        -: 1175:
        -: 1176:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1177:struct __allocator_traits_rebind
        -: 1178:{
        -: 1179:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1180:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up>::other type;
        -: 1181:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1182:};
        -: 1183:
        -: 1184:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1185:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1186:{
        -: 1187:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1188:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1189:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1190:};
        -: 1191:
        -: 1192:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1193:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1194:{
        -: 1195:    typedef _LIBCPP_NODEBUG_TYPE _Alloc<_Up, _Args...> type;
        -: 1196:};
        -: 1197:
        -: 1198:#ifndef _LIBCPP_CXX03_LANG
        -: 1199:
        -: 1200:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1201:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1202:auto
        -: 1203:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1204:    -> decltype((void)__a.allocate(__sz, __p), true_type());
        -: 1205:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1206:
        -: 1207:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1208:auto
        -: 1209:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1210:    -> false_type;
        -: 1211:
        -: 1212:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1213:struct __has_allocate_hint
        -: 1214:    : decltype(_VSTD::__has_allocate_hint_test(declval<_Alloc>(),
        -: 1215:                                               declval<_SizeType>(),
        -: 1216:                                               declval<_ConstVoidPtr>()))
        -: 1217:{
        -: 1218:};
        -: 1219:
        -: 1220:#else  // _LIBCPP_CXX03_LANG
        -: 1221:
        -: 1222:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1223:struct __has_allocate_hint
        -: 1224:    : true_type
        -: 1225:{
        -: 1226:};
        -: 1227:
        -: 1228:#endif  // _LIBCPP_CXX03_LANG
        -: 1229:
        -: 1230:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1231:template <class _Alloc, class ..._Args,
        -: 1232:    class = decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Args>()...))>
        -: 1233:static true_type __test_has_construct(int);
        -: 1234:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1235:
        -: 1236:template <class _Alloc, class...>
        -: 1237:static false_type __test_has_construct(...);
        -: 1238:
        -: 1239:template <class _Alloc, class ..._Args>
        -: 1240:struct __has_construct : decltype(__test_has_construct<_Alloc, _Args...>(0)) {};
        -: 1241:
        -: 1242:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1243:
        -: 1244:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1245:template <class _Alloc, class _Pointer>
        -: 1246:auto
        -: 1247:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1248:    -> decltype(__a.destroy(__p), true_type());
        -: 1249:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1250:
        -: 1251:template <class _Alloc, class _Pointer>
        -: 1252:auto
        -: 1253:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1254:    -> false_type;
        -: 1255:
        -: 1256:template <class _Alloc, class _Pointer>
        -: 1257:struct __has_destroy
        -: 1258:    : decltype(_VSTD::__has_destroy_test(declval<_Alloc>(),
        -: 1259:                                         declval<_Pointer>()))
        -: 1260:{
        -: 1261:};
        -: 1262:
        -: 1263:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1264:template <class _Alloc>
        -: 1265:auto
        -: 1266:__has_max_size_test(_Alloc&& __a)
        -: 1267:    -> decltype(__a.max_size(), true_type());
        -: 1268:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1269:
        -: 1270:template <class _Alloc>
        -: 1271:auto
        -: 1272:__has_max_size_test(const volatile _Alloc& __a)
        -: 1273:    -> false_type;
        -: 1274:
        -: 1275:template <class _Alloc>
        -: 1276:struct __has_max_size
        -: 1277:    : decltype(_VSTD::__has_max_size_test(declval<_Alloc&>()))
        -: 1278:{
        -: 1279:};
        -: 1280:
        -: 1281:template <class _Alloc>
        -: 1282:auto
        -: 1283:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1284:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1285:
        -: 1286:template <class _Alloc>
        -: 1287:auto
        -: 1288:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1289:    -> false_type;
        -: 1290:
        -: 1291:template <class _Alloc>
        -: 1292:struct __has_select_on_container_copy_construction
        -: 1293:    : decltype(_VSTD::__has_select_on_container_copy_construction_test(declval<_Alloc&>()))
        -: 1294:{
        -: 1295:};
        -: 1296:
        -: 1297:#else  // _LIBCPP_CXX03_LANG
        -: 1298:
        -: 1299:template <class _Alloc, class _Pointer, class = void>
        -: 1300:struct __has_destroy : false_type {};
        -: 1301:
        -: 1302:template <class _Alloc, class _Pointer>
        -: 1303:struct __has_destroy<_Alloc, _Pointer, typename __void_t<
        -: 1304:    decltype(_VSTD::declval<_Alloc>().destroy(_VSTD::declval<_Pointer>()))
        -: 1305:>::type> : std::true_type {};
        -: 1306:
        -: 1307:template <class _Alloc>
        -: 1308:struct __has_max_size
        -: 1309:    : true_type
        -: 1310:{
        -: 1311:};
        -: 1312:
        -: 1313:template <class _Alloc>
        -: 1314:struct __has_select_on_container_copy_construction
        -: 1315:    : false_type
        -: 1316:{
        -: 1317:};
        -: 1318:
        -: 1319:#endif  // _LIBCPP_CXX03_LANG
        -: 1320:
        -: 1321:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1322:struct __alloc_traits_difference_type
        -: 1323:{
        -: 1324:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::difference_type type;
        -: 1325:};
        -: 1326:
        -: 1327:template <class _Alloc, class _Ptr>
        -: 1328:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1329:{
        -: 1330:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::difference_type type;
        -: 1331:};
        -: 1332:
        -: 1333:template <class _Tp>
        -: 1334:struct __is_default_allocator : false_type {};
        -: 1335:
        -: 1336:template <class _Tp>
        -: 1337:struct __is_default_allocator<_VSTD::allocator<_Tp> > : true_type {};
        -: 1338:
        -: 1339:
        -: 1340:
        -: 1341:template <class _Alloc,
        -: 1342:    bool = __has_construct<_Alloc, typename _Alloc::value_type*,  typename _Alloc::value_type&&>::value && !__is_default_allocator<_Alloc>::value
        -: 1343:    >
        -: 1344:struct __is_cpp17_move_insertable;
        -: 1345:template <class _Alloc>
        -: 1346:struct __is_cpp17_move_insertable<_Alloc, true> : std::true_type {};
        -: 1347:template <class _Alloc>
        -: 1348:struct __is_cpp17_move_insertable<_Alloc, false> : std::is_move_constructible<typename _Alloc::value_type> {};
        -: 1349:
        -: 1350:template <class _Alloc,
        -: 1351:    bool = __has_construct<_Alloc, typename _Alloc::value_type*, const typename _Alloc::value_type&>::value && !__is_default_allocator<_Alloc>::value
        -: 1352:    >
        -: 1353:struct __is_cpp17_copy_insertable;
        -: 1354:template <class _Alloc>
        -: 1355:struct __is_cpp17_copy_insertable<_Alloc, true> : __is_cpp17_move_insertable<_Alloc> {};
        -: 1356:template <class _Alloc>
        -: 1357:struct __is_cpp17_copy_insertable<_Alloc, false> : integral_constant<bool,
        -: 1358:    std::is_copy_constructible<typename _Alloc::value_type>::value &&
        -: 1359:    __is_cpp17_move_insertable<_Alloc>::value>
        -: 1360:  {};
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364:template <class _Alloc>
        -: 1365:struct _LIBCPP_TEMPLATE_VIS allocator_traits
        -: 1366:{
        -: 1367:    typedef _Alloc                              allocator_type;
        -: 1368:    typedef typename allocator_type::value_type value_type;
        -: 1369:
        -: 1370:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1371:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1372:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1373:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1374:
        -: 1375:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1376:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1377:
        -: 1378:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1379:                     propagate_on_container_copy_assignment;
        -: 1380:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1381:                     propagate_on_container_move_assignment;
        -: 1382:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1383:                     propagate_on_container_swap;
        -: 1384:    typedef typename __is_always_equal<allocator_type>::type
        -: 1385:                     is_always_equal;
        -: 1386:
        -: 1387:#ifndef _LIBCPP_CXX03_LANG
        -: 1388:    template <class _Tp> using rebind_alloc =
        -: 1389:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1390:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
        -: 1391:#else  // _LIBCPP_CXX03_LANG
        -: 1392:    template <class _Tp> struct rebind_alloc
        -: 1393:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1394:    template <class _Tp> struct rebind_traits
        -: 1395:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1396:#endif  // _LIBCPP_CXX03_LANG
        -: 1397:
        -: 1398:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1399:    static pointer allocate(allocator_type& __a, size_type __n)
        -: 1400:        {return __a.allocate(__n);}
        -: 1401:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1402:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1403:        {return __allocate(__a, __n, __hint,
        -: 1404:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1405:
        -: 1406:    _LIBCPP_INLINE_VISIBILITY
        -: 1407:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
        -: 1408:        {__a.deallocate(__p, __n);}
        -: 1409:
        -: 1410:    template <class _Tp, class... _Args>
        -: 1411:        _LIBCPP_INLINE_VISIBILITY
        -: 1412:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1413:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
        -: 1414:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
        -: 1415:
        -: 1416:    template <class _Tp>
        -: 1417:        _LIBCPP_INLINE_VISIBILITY
        -: 1418:        static void destroy(allocator_type& __a, _Tp* __p)
        -: 1419:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
        -: 1420:
        -: 1421:    _LIBCPP_INLINE_VISIBILITY
        -: 1422:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
        -: 1423:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
        -: 1424:
        -: 1425:    _LIBCPP_INLINE_VISIBILITY
        -: 1426:    static allocator_type
        -: 1427:        select_on_container_copy_construction(const allocator_type& __a)
        -: 1428:            {return __select_on_container_copy_construction(
        -: 1429:                __has_select_on_container_copy_construction<const allocator_type>(),
        -: 1430:                __a);}
        -: 1431:
        -: 1432:    template <class _Ptr>
        -: 1433:        _LIBCPP_INLINE_VISIBILITY
        -: 1434:        static
        -: 1435:        void
        -: 1436:        __construct_forward_with_exception_guarantees(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1437:        {
        -: 1438:            static_assert(__is_cpp17_move_insertable<allocator_type>::value,
        -: 1439:              "The specified type does not meet the requirements of Cpp17MoveInsertible");
        -: 1440:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1441:              construct(__a, _VSTD::__to_address(__begin2),
        -: 1442:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1443:                        _VSTD::move(*__begin1)
        -: 1444:#else
        -: 1445:                        _VSTD::move_if_noexcept(*__begin1)
        -: 1446:#endif
        -: 1447:                        );
        -: 1448:        }
        -: 1449:
        -: 1450:    template <class _Tp>
        -: 1451:        _LIBCPP_INLINE_VISIBILITY
        -: 1452:        static
        -: 1453:        typename enable_if
        -: 1454:        <
        -: 1455:            (__is_default_allocator<allocator_type>::value
        -: 1456:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1457:             is_trivially_move_constructible<_Tp>::value,
        -: 1458:            void
        -: 1459:        >::type
        -: 1460:        __construct_forward_with_exception_guarantees(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1461:        {
        -: 1462:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1463:            if (_Np > 0)
        -: 1464:            {
        -: 1465:                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1466:                __begin2 += _Np;
        -: 1467:            }
        -: 1468:        }
        -: 1469:
        -: 1470:    template <class _Iter, class _Ptr>
        -: 1471:        _LIBCPP_INLINE_VISIBILITY
        -: 1472:        static
        -: 1473:        void
        -: 1474:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
        -: 1475:        {
        -: 1476:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1477:                construct(__a, _VSTD::__to_address(__begin2), *__begin1);
        -: 1478:        }
        -: 1479:
        -: 1480:    template <class _SourceTp, class _DestTp,
        -: 1481:              class _RawSourceTp = typename remove_const<_SourceTp>::type,
        -: 1482:              class _RawDestTp = typename remove_const<_DestTp>::type>
        -: 1483:        _LIBCPP_INLINE_VISIBILITY
        -: 1484:        static
        -: 1485:        typename enable_if
        -: 1486:        <
        -: 1487:            is_trivially_copy_constructible<_DestTp>::value &&
        -: 1488:            is_same<_RawSourceTp, _RawDestTp>::value &&
        -: 1489:            (__is_default_allocator<allocator_type>::value ||
        -: 1490:             !__has_construct<allocator_type, _DestTp*, _SourceTp&>::value),
        -: 1491:            void
        -: 1492:        >::type
        -: 1493:        __construct_range_forward(allocator_type&, _SourceTp* __begin1, _SourceTp* __end1, _DestTp*& __begin2)
        -: 1494:        {
        -: 1495:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1496:            if (_Np > 0)
        -: 1497:            {
        -: 1498:                _VSTD::memcpy(const_cast<_RawDestTp*>(__begin2), __begin1, _Np * sizeof(_DestTp));
        -: 1499:                __begin2 += _Np;
        -: 1500:            }
        -: 1501:        }
        -: 1502:
        -: 1503:    template <class _Ptr>
        -: 1504:        _LIBCPP_INLINE_VISIBILITY
        -: 1505:        static
        -: 1506:        void
        -: 1507:        __construct_backward_with_exception_guarantees(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1508:        {
        -: 1509:            static_assert(__is_cpp17_move_insertable<allocator_type>::value,
        -: 1510:              "The specified type does not meet the requirements of Cpp17MoveInsertable");
        -: 1511:            while (__end1 != __begin1)
        -: 1512:            {
        -: 1513:              construct(__a, _VSTD::__to_address(__end2 - 1),
        -: 1514:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1515:                        _VSTD::move(*--__end1)
        -: 1516:#else
        -: 1517:                        _VSTD::move_if_noexcept(*--__end1)
        -: 1518:#endif
        -: 1519:                        );
        -: 1520:              --__end2;
        -: 1521:            }
        -: 1522:        }
        -: 1523:
        -: 1524:    template <class _Tp>
        -: 1525:        _LIBCPP_INLINE_VISIBILITY
        -: 1526:        static
        -: 1527:        typename enable_if
        -: 1528:        <
        -: 1529:            (__is_default_allocator<allocator_type>::value
        -: 1530:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1531:             is_trivially_move_constructible<_Tp>::value,
        -: 1532:            void
        -: 1533:        >::type
        -: 1534:        __construct_backward_with_exception_guarantees(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1535:        {
        -: 1536:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1537:            __end2 -= _Np;
        -: 1538:            if (_Np > 0)
        -: 1539:                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1540:        }
        -: 1541:
        -: 1542:private:
        -: 1543:
        -: 1544:    _LIBCPP_INLINE_VISIBILITY
        -: 1545:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1546:        const_void_pointer __hint, true_type)
        -: 1547:        {
        -: 1548:            _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1549:            return __a.allocate(__n, __hint);
        -: 1550:            _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1551:        }
        -: 1552:    _LIBCPP_INLINE_VISIBILITY
        -: 1553:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1554:        const_void_pointer, false_type)
        -: 1555:        {return __a.allocate(__n);}
        -: 1556:
        -: 1557:    template <class _Tp, class... _Args>
        -: 1558:        _LIBCPP_INLINE_VISIBILITY
        -: 1559:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
        -: 1560:            {
        -: 1561:                _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1562:                __a.construct(__p, _VSTD::forward<_Args>(__args)...);
        -: 1563:                _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1564:            }
        -: 1565:
        -: 1566:    template <class _Tp, class... _Args>
        -: 1567:        _LIBCPP_INLINE_VISIBILITY
        -: 1568:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1569:            {
        -: 1570:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1571:            }
        -: 1572:
        -: 1573:    template <class _Tp>
        -: 1574:        _LIBCPP_INLINE_VISIBILITY
        -: 1575:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
        -: 1576:            {
        -: 1577:                _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1578:                __a.destroy(__p);
        -: 1579:                _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1580:            }
        -: 1581:    template <class _Tp>
        -: 1582:        _LIBCPP_INLINE_VISIBILITY
        -: 1583:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1584:            {
        -: 1585:                __p->~_Tp();
        -: 1586:            }
        -: 1587:
        -: 1588:    _LIBCPP_INLINE_VISIBILITY
        -: 1589:    static size_type __max_size(true_type, const allocator_type& __a) _NOEXCEPT
        -: 1590:            {
        -: 1591:                _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1592:                return __a.max_size();
        -: 1593:                _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1594:            }
        -: 1595:
        -: 1596:    _LIBCPP_INLINE_VISIBILITY
        -: 1597:    static size_type __max_size(false_type, const allocator_type&) _NOEXCEPT
        -: 1598:            {return numeric_limits<size_type>::max() / sizeof(value_type);}
        -: 1599:
        -: 1600:    _LIBCPP_INLINE_VISIBILITY
        -: 1601:    static allocator_type
        -: 1602:        __select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1603:            {return __a.select_on_container_copy_construction();}
        -: 1604:    _LIBCPP_INLINE_VISIBILITY
        -: 1605:    static allocator_type
        -: 1606:        __select_on_container_copy_construction(false_type, const allocator_type& __a)
        -: 1607:            {return __a;}
        -: 1608:};
        -: 1609:
        -: 1610:template <class _Traits, class _Tp>
        -: 1611:struct __rebind_alloc_helper
        -: 1612:{
        -: 1613:#ifndef _LIBCPP_CXX03_LANG
        -: 1614:    typedef _LIBCPP_NODEBUG_TYPE typename _Traits::template rebind_alloc<_Tp>        type;
        -: 1615:#else
        -: 1616:    typedef typename _Traits::template rebind_alloc<_Tp>::other type;
        -: 1617:#endif
        -: 1618:};
        -: 1619:
        -: 1620:// allocator
        -: 1621:
        -: 1622:template <class _Tp>
        -: 1623:class _LIBCPP_TEMPLATE_VIS allocator
        -: 1624:{
        -: 1625:public:
        -: 1626:    typedef size_t     size_type;
        -: 1627:    typedef ptrdiff_t  difference_type;
        -: 1628:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1629:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp*       pointer;
        -: 1630:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -: 1631:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp&       reference;
        -: 1632:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -: 1633:
        -: 1634:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -: 1635:#endif
        -: 1636:
        -: 1637:    typedef _Tp value_type;
        -: 1638:
        -: 1639:    typedef true_type propagate_on_container_move_assignment;
        -: 1640:    typedef true_type is_always_equal;
        -: 1641:
        -: 1642:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
    #####: 1643:    allocator() _NOEXCEPT {}
        -: 1644:
        -: 1645:    template <class _Up>
        -: 1646:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1647:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1648:
        -: 1649:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1650:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1651:    pointer address(reference __x) const _NOEXCEPT
        -: 1652:        {return _VSTD::addressof(__x);}
        -: 1653:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1654:    const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1655:        {return _VSTD::addressof(__x);}
        -: 1656:#endif
        -: 1657:
        -: 1658:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _Tp* allocate(size_t __n)
        -: 1659:        {
        -: 1660:        // TODO(mpark): Replace with `allocator_traits<allocator>::max_size(*this)`.
        -: 1661:        if (__n > (size_t(~0) / sizeof(_Tp)))
        -: 1662:            __throw_length_error("allocator<T>::allocate(size_t n)"
        -: 1663:                                 " 'n' exceeds maximum supported size");
        -: 1664:        return static_cast<_Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -: 1665:        }
        -: 1666:
        -: 1667:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1668:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -: 1669:    _Tp* allocate(size_t __n, const void*) { return allocate(__n); }
        -: 1670:#endif
        -: 1671:
        -: 1672:    _LIBCPP_INLINE_VISIBILITY void deallocate(_Tp* __p, size_t __n) _NOEXCEPT
        -: 1673:        {_VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));}
        -: 1674:
        -: 1675:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1676:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1677:        {return size_type(~0) / sizeof(_Tp);}
        -: 1678:
        -: 1679:    template <class _Up, class... _Args>
        -: 1680:        _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1681:        void
        -: 1682:        construct(_Up* __p, _Args&&... __args)
        -: 1683:        {
        -: 1684:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1685:        }
        -: 1686:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1687:#endif
        -: 1688:};
        -: 1689:
        -: 1690:template <class _Tp>
        -: 1691:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -: 1692:{
        -: 1693:public:
        -: 1694:    typedef size_t     size_type;
        -: 1695:    typedef ptrdiff_t  difference_type;
        -: 1696:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1697:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* pointer;
        -: 1698:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -: 1699:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& reference;
        -: 1700:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -: 1701:
        -: 1702:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -: 1703:#endif
        -: 1704:
        -: 1705:    typedef const _Tp value_type;
        -: 1706:
        -: 1707:    typedef true_type propagate_on_container_move_assignment;
        -: 1708:    typedef true_type is_always_equal;
        -: 1709:
        -: 1710:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1711:    allocator() _NOEXCEPT {}
        -: 1712:
        -: 1713:    template <class _Up>
        -: 1714:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1715:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1716:
        -: 1717:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1718:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1719:    const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1720:        {return _VSTD::addressof(__x);}
        -: 1721:#endif
        -: 1722:
        -: 1723:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY const _Tp* allocate(size_t __n)
        -: 1724:    {
        -: 1725:        // TODO(mpark): Replace with `allocator_traits<allocator>::max_size(*this)`.
        -: 1726:        if (__n > (size_t(~0) / sizeof(_Tp)))
        -: 1727:            __throw_length_error("allocator<const T>::allocate(size_t n)"
        -: 1728:                                 " 'n' exceeds maximum supported size");
        -: 1729:        return static_cast<const _Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -: 1730:    }
        -: 1731:
        -: 1732:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1733:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -: 1734:    const _Tp* allocate(size_t __n, const void*) { return allocate(__n); }
        -: 1735:#endif
        -: 1736:
        -: 1737:    _LIBCPP_INLINE_VISIBILITY void deallocate(const _Tp* __p, size_t __n)
        -: 1738:        {_VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));}
        -: 1739:
        -: 1740:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -: 1741:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1742:        {return size_type(~0) / sizeof(_Tp);}
        -: 1743:
        -: 1744:    template <class _Up, class... _Args>
        -: 1745:        _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1746:        void
        -: 1747:        construct(_Up* __p, _Args&&... __args)
        -: 1748:        {
        -: 1749:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1750:        }
        -: 1751:
        -: 1752:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 1753:#endif
        -: 1754:};
        -: 1755:
        -: 1756:template <class _Tp, class _Up>
        -: 1757:inline _LIBCPP_INLINE_VISIBILITY
        -: 1758:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 1759:
        -: 1760:template <class _Tp, class _Up>
        -: 1761:inline _LIBCPP_INLINE_VISIBILITY
        -: 1762:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 1763:
        -: 1764:template <class _OutputIterator, class _Tp>
        -: 1765:class _LIBCPP_TEMPLATE_VIS raw_storage_iterator
        -: 1766:    : public iterator<output_iterator_tag,
        -: 1767:                      _Tp,                                         // purposefully not C++03
        -: 1768:                      ptrdiff_t,                                   // purposefully not C++03
        -: 1769:                      _Tp*,                                        // purposefully not C++03
        -: 1770:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 1771:{
        -: 1772:private:
        -: 1773:    _OutputIterator __x_;
        -: 1774:public:
        -: 1775:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 1776:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 1777:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 1778:        {::new(_VSTD::addressof(*__x_)) _Tp(__element); return *this;}
        -: 1779:#if _LIBCPP_STD_VER >= 14
        -: 1780:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(_Tp&& __element)
        -: 1781:        {::new(_VSTD::addressof(*__x_)) _Tp(_VSTD::move(__element)); return *this;}
        -: 1782:#endif
        -: 1783:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 1784:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 1785:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 1786:#if _LIBCPP_STD_VER >= 14
        -: 1787:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; }
        -: 1788:#endif
        -: 1789:};
        -: 1790:
        -: 1791:template <class _Tp>
        -: 1792:_LIBCPP_NODISCARD_EXT _LIBCPP_NO_CFI
        -: 1793:pair<_Tp*, ptrdiff_t>
        -: 1794:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 1795:{
        -: 1796:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 1797:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 1798:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 1799:                           / sizeof(_Tp);
        -: 1800:    if (__n > __m)
        -: 1801:        __n = __m;
        -: 1802:    while (__n > 0)
        -: 1803:    {
        -: 1804:#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)
        -: 1805:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 1806:        {
        -: 1807:            std::align_val_t __al =
        -: 1808:                std::align_val_t(std::alignment_of<_Tp>::value);
        -: 1809:            __r.first = static_cast<_Tp*>(::operator new(
        -: 1810:                __n * sizeof(_Tp), __al, nothrow));
        -: 1811:        } else {
        -: 1812:            __r.first = static_cast<_Tp*>(::operator new(
        -: 1813:                __n * sizeof(_Tp), nothrow));
        -: 1814:        }
        -: 1815:#else
        -: 1816:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 1817:        {
        -: 1818:            // Since aligned operator new is unavailable, return an empty
        -: 1819:            // buffer rather than one with invalid alignment.
        -: 1820:            return __r;
        -: 1821:        }
        -: 1822:
        -: 1823:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 1824:#endif
        -: 1825:
        -: 1826:        if (__r.first)
        -: 1827:        {
        -: 1828:            __r.second = __n;
        -: 1829:            break;
        -: 1830:        }
        -: 1831:        __n /= 2;
        -: 1832:    }
        -: 1833:    return __r;
        -: 1834:}
        -: 1835:
        -: 1836:template <class _Tp>
        -: 1837:inline _LIBCPP_INLINE_VISIBILITY
        -: 1838:void return_temporary_buffer(_Tp* __p) _NOEXCEPT
        -: 1839:{
        -: 1840:  _VSTD::__libcpp_deallocate_unsized((void*)__p, _LIBCPP_ALIGNOF(_Tp));
        -: 1841:}
        -: 1842:
        -: 1843:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 1844:template <class _Tp>
        -: 1845:struct _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr_ref
        -: 1846:{
        -: 1847:    _Tp* __ptr_;
        -: 1848:};
        -: 1849:
        -: 1850:template<class _Tp>
        -: 1851:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr
        -: 1852:{
        -: 1853:private:
        -: 1854:    _Tp* __ptr_;
        -: 1855:public:
        -: 1856:    typedef _Tp element_type;
        -: 1857:
        -: 1858:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) _NOEXCEPT : __ptr_(__p) {}
        -: 1859:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) _NOEXCEPT : __ptr_(__p.release()) {}
        -: 1860:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) _NOEXCEPT
        -: 1861:        : __ptr_(__p.release()) {}
        -: 1862:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) _NOEXCEPT
        -: 1863:        {reset(__p.release()); return *this;}
        -: 1864:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) _NOEXCEPT
        -: 1865:        {reset(__p.release()); return *this;}
        -: 1866:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) _NOEXCEPT
        -: 1867:        {reset(__p.__ptr_); return *this;}
        -: 1868:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() _NOEXCEPT {delete __ptr_;}
        -: 1869:
        -: 1870:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const _NOEXCEPT
        -: 1871:        {return *__ptr_;}
        -: 1872:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const _NOEXCEPT {return __ptr_;}
        -: 1873:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const _NOEXCEPT {return __ptr_;}
        -: 1874:    _LIBCPP_INLINE_VISIBILITY _Tp* release() _NOEXCEPT
        -: 1875:    {
        -: 1876:        _Tp* __t = __ptr_;
        -: 1877:        __ptr_ = 0;
        -: 1878:        return __t;
        -: 1879:    }
        -: 1880:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) _NOEXCEPT
        -: 1881:    {
        -: 1882:        if (__ptr_ != __p)
        -: 1883:            delete __ptr_;
        -: 1884:        __ptr_ = __p;
        -: 1885:    }
        -: 1886:
        -: 1887:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) _NOEXCEPT : __ptr_(__p.__ptr_) {}
        -: 1888:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() _NOEXCEPT
        -: 1889:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 1890:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() _NOEXCEPT
        -: 1891:        {return auto_ptr<_Up>(release());}
        -: 1892:};
        -: 1893:
        -: 1894:template <>
        -: 1895:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr<void>
        -: 1896:{
        -: 1897:public:
        -: 1898:    typedef void element_type;
        -: 1899:};
        -: 1900:#endif
        -: 1901:
        -: 1902:// Tag used to default initialize one or both of the pair's elements.
        -: 1903:struct __default_init_tag {};
        -: 1904:struct __value_init_tag {};
        -: 1905:
        -: 1906:template <class _Tp, int _Idx,
        -: 1907:          bool _CanBeEmptyBase =
        -: 1908:              is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
        -: 1909:struct __compressed_pair_elem {
        -: 1910:  typedef _Tp _ParamT;
        -: 1911:  typedef _Tp& reference;
        -: 1912:  typedef const _Tp& const_reference;
        -: 1913:
        -: 1914:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    #####: 1915:  __compressed_pair_elem(__default_init_tag) {}
        -: 1916:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1917:  __compressed_pair_elem(__value_init_tag) : __value_() {}
        -: 1918:
        -: 1919:  template <class _Up, class = typename enable_if<
        -: 1920:      !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 1921:  >::type>
        -: 1922:  _LIBCPP_INLINE_VISIBILITY
        -: 1923:  _LIBCPP_CONSTEXPR explicit
        -: 1924:  __compressed_pair_elem(_Up&& __u)
        -: 1925:      : __value_(_VSTD::forward<_Up>(__u))
        -: 1926:    {
        -: 1927:    }
        -: 1928:
        -: 1929:
        -: 1930:#ifndef _LIBCPP_CXX03_LANG
        -: 1931:  template <class... _Args, size_t... _Indexes>
        -: 1932:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1933:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 1934:                         __tuple_indices<_Indexes...>)
        -: 1935:      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 1936:#endif
        -: 1937:
        -: 1938:
    #####: 1939:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; }
        -: 1940:  _LIBCPP_INLINE_VISIBILITY
    #####: 1941:  const_reference __get() const _NOEXCEPT { return __value_; }
        -: 1942:
        -: 1943:private:
        -: 1944:  _Tp __value_;
        -: 1945:};
        -: 1946:
        -: 1947:template <class _Tp, int _Idx>
        -: 1948:struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
        -: 1949:  typedef _Tp _ParamT;
        -: 1950:  typedef _Tp& reference;
        -: 1951:  typedef const _Tp& const_reference;
        -: 1952:  typedef _Tp __value_type;
        -: 1953:
        -: 1954:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __compressed_pair_elem() = default;
        -: 1955:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    #####: 1956:  __compressed_pair_elem(__default_init_tag) {}
        -: 1957:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1958:  __compressed_pair_elem(__value_init_tag) : __value_type() {}
        -: 1959:
        -: 1960:  template <class _Up, class = typename enable_if<
        -: 1961:        !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 1962:  >::type>
        -: 1963:  _LIBCPP_INLINE_VISIBILITY
        -: 1964:  _LIBCPP_CONSTEXPR explicit
        -: 1965:  __compressed_pair_elem(_Up&& __u)
        -: 1966:      : __value_type(_VSTD::forward<_Up>(__u))
        -: 1967:  {}
        -: 1968:
        -: 1969:#ifndef _LIBCPP_CXX03_LANG
        -: 1970:  template <class... _Args, size_t... _Indexes>
        -: 1971:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 1972:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 1973:                         __tuple_indices<_Indexes...>)
        -: 1974:      : __value_type(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 1975:#endif
        -: 1976:
        -: 1977:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return *this; }
        -: 1978:  _LIBCPP_INLINE_VISIBILITY
        -: 1979:  const_reference __get() const _NOEXCEPT { return *this; }
        -: 1980:};
        -: 1981:
        -: 1982:template <class _T1, class _T2>
        -: 1983:class __compressed_pair : private __compressed_pair_elem<_T1, 0>,
        -: 1984:                          private __compressed_pair_elem<_T2, 1> {
        -: 1985:  typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T1, 0> _Base1;
        -: 1986:  typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T2, 1> _Base2;
        -: 1987:
        -: 1988:  // NOTE: This static assert should never fire because __compressed_pair
        -: 1989:  // is *almost never* used in a scenario where it's possible for T1 == T2.
        -: 1990:  // (The exception is std::function where it is possible that the function
        -: 1991:  //  object and the allocator have the same type).
        -: 1992:  static_assert((!is_same<_T1, _T2>::value),
        -: 1993:    "__compressed_pair cannot be instantated when T1 and T2 are the same type; "
        -: 1994:    "The current implementation is NOT ABI-compatible with the previous "
        -: 1995:    "implementation for this configuration");
        -: 1996:
        -: 1997:public:
        -: 1998:    template <bool _Dummy = true,
        -: 1999:      class = typename enable_if<
        -: 2000:          __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
        -: 2001:          __dependent_type<is_default_constructible<_T2>, _Dummy>::value
        -: 2002:      >::type
        -: 2003:  >
        -: 2004:  _LIBCPP_INLINE_VISIBILITY
        -: 2005:  _LIBCPP_CONSTEXPR __compressed_pair() : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}
        -: 2006:
        -: 2007:  template <class _U1, class _U2>
        -: 2008:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
    #####: 2009:  __compressed_pair(_U1&& __t1, _U2&& __t2)
    #####: 2010:      : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {}
        -: 2011:
        -: 2012:#ifndef _LIBCPP_CXX03_LANG
        -: 2013:  template <class... _Args1, class... _Args2>
        -: 2014:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2015:  __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2016:                    tuple<_Args2...> __second_args)
        -: 2017:      : _Base1(__pc, _VSTD::move(__first_args),
        -: 2018:               typename __make_tuple_indices<sizeof...(_Args1)>::type()),
        -: 2019:        _Base2(__pc, _VSTD::move(__second_args),
        -: 2020:               typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}
        -: 2021:#endif
        -: 2022:
        -: 2023:  _LIBCPP_INLINE_VISIBILITY
    #####: 2024:  typename _Base1::reference first() _NOEXCEPT {
    #####: 2025:    return static_cast<_Base1&>(*this).__get();
        -: 2026:  }
        -: 2027:
        -: 2028:  _LIBCPP_INLINE_VISIBILITY
    #####: 2029:  typename _Base1::const_reference first() const _NOEXCEPT {
    #####: 2030:    return static_cast<_Base1 const&>(*this).__get();
        -: 2031:  }
        -: 2032:
        -: 2033:  _LIBCPP_INLINE_VISIBILITY
        -: 2034:  typename _Base2::reference second() _NOEXCEPT {
        -: 2035:    return static_cast<_Base2&>(*this).__get();
        -: 2036:  }
        -: 2037:
        -: 2038:  _LIBCPP_INLINE_VISIBILITY
        -: 2039:  typename _Base2::const_reference second() const _NOEXCEPT {
        -: 2040:    return static_cast<_Base2 const&>(*this).__get();
        -: 2041:  }
        -: 2042:
        -: 2043:  _LIBCPP_INLINE_VISIBILITY
        -: 2044:  void swap(__compressed_pair& __x)
        -: 2045:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2046:               __is_nothrow_swappable<_T2>::value)
        -: 2047:  {
        -: 2048:    using std::swap;
        -: 2049:    swap(first(), __x.first());
        -: 2050:    swap(second(), __x.second());
        -: 2051:  }
        -: 2052:};
        -: 2053:
        -: 2054:template <class _T1, class _T2>
        -: 2055:inline _LIBCPP_INLINE_VISIBILITY
        -: 2056:void swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2057:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2058:               __is_nothrow_swappable<_T2>::value) {
        -: 2059:  __x.swap(__y);
        -: 2060:}
        -: 2061:
        -: 2062:// default_delete
        -: 2063:
        -: 2064:template <class _Tp>
        -: 2065:struct _LIBCPP_TEMPLATE_VIS default_delete {
        -: 2066:    static_assert(!is_function<_Tp>::value,
        -: 2067:                  "default_delete cannot be instantiated for function types");
        -: 2068:#ifndef _LIBCPP_CXX03_LANG
        -: 2069:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 2070:#else
        -: 2071:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2072:#endif
        -: 2073:  template <class _Up>
        -: 2074:  _LIBCPP_INLINE_VISIBILITY
        -: 2075:  default_delete(const default_delete<_Up>&,
        -: 2076:                 typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* =
        -: 2077:                     0) _NOEXCEPT {}
        -: 2078:
        -: 2079:  _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __ptr) const _NOEXCEPT {
        -: 2080:    static_assert(sizeof(_Tp) > 0,
        -: 2081:                  "default_delete can not delete incomplete type");
        -: 2082:    static_assert(!is_void<_Tp>::value,
        -: 2083:                  "default_delete can not delete incomplete type");
        -: 2084:    delete __ptr;
        -: 2085:  }
        -: 2086:};
        -: 2087:
        -: 2088:template <class _Tp>
        -: 2089:struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {
        -: 2090:private:
        -: 2091:  template <class _Up>
        -: 2092:  struct _EnableIfConvertible
        -: 2093:      : enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value> {};
        -: 2094:
        -: 2095:public:
        -: 2096:#ifndef _LIBCPP_CXX03_LANG
        -: 2097:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 2098:#else
        -: 2099:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2100:#endif
        -: 2101:
        -: 2102:  template <class _Up>
        -: 2103:  _LIBCPP_INLINE_VISIBILITY
        -: 2104:  default_delete(const default_delete<_Up[]>&,
        -: 2105:                 typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}
        -: 2106:
        -: 2107:  template <class _Up>
        -: 2108:  _LIBCPP_INLINE_VISIBILITY
        -: 2109:  typename _EnableIfConvertible<_Up>::type
        -: 2110:  operator()(_Up* __ptr) const _NOEXCEPT {
        -: 2111:    static_assert(sizeof(_Tp) > 0,
        -: 2112:                  "default_delete can not delete incomplete type");
        -: 2113:    static_assert(!is_void<_Tp>::value,
        -: 2114:                  "default_delete can not delete void type");
        -: 2115:    delete[] __ptr;
        -: 2116:  }
        -: 2117:};
        -: 2118:
        -: 2119:template <class _Deleter>
        -: 2120:struct __unique_ptr_deleter_sfinae {
        -: 2121:  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
        -: 2122:  typedef const _Deleter& __lval_ref_type;
        -: 2123:  typedef _Deleter&& __good_rval_ref_type;
        -: 2124:  typedef true_type __enable_rval_overload;
        -: 2125:};
        -: 2126:
        -: 2127:template <class _Deleter>
        -: 2128:struct __unique_ptr_deleter_sfinae<_Deleter const&> {
        -: 2129:  typedef const _Deleter& __lval_ref_type;
        -: 2130:  typedef const _Deleter&& __bad_rval_ref_type;
        -: 2131:  typedef false_type __enable_rval_overload;
        -: 2132:};
        -: 2133:
        -: 2134:template <class _Deleter>
        -: 2135:struct __unique_ptr_deleter_sfinae<_Deleter&> {
        -: 2136:  typedef _Deleter& __lval_ref_type;
        -: 2137:  typedef _Deleter&& __bad_rval_ref_type;
        -: 2138:  typedef false_type __enable_rval_overload;
        -: 2139:};
        -: 2140:
        -: 2141:#if defined(_LIBCPP_ABI_ENABLE_UNIQUE_PTR_TRIVIAL_ABI)
        -: 2142:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI __attribute__((trivial_abi))
        -: 2143:#else
        -: 2144:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI
        -: 2145:#endif
        -: 2146:
        -: 2147:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2148:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr {
        -: 2149:public:
        -: 2150:  typedef _Tp element_type;
        -: 2151:  typedef _Dp deleter_type;
        -: 2152:  typedef _LIBCPP_NODEBUG_TYPE typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2153:
        -: 2154:  static_assert(!is_rvalue_reference<deleter_type>::value,
        -: 2155:                "the specified deleter type cannot be an rvalue reference");
        -: 2156:
        -: 2157:private:
        -: 2158:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2159:
        -: 2160:  struct __nat { int __for_bool_; };
        -: 2161:
        -: 2162:  typedef _LIBCPP_NODEBUG_TYPE __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2163:
        -: 2164:  template <bool _Dummy>
        -: 2165:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2166:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2167:
        -: 2168:  template <bool _Dummy>
        -: 2169:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2170:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2171:
        -: 2172:  template <bool _Dummy>
        -: 2173:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE  =
        -: 2174:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2175:
        -: 2176:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2177:                             __identity<deleter_type>, _Dummy>::type>
        -: 2178:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE =
        -: 2179:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2180:                         !is_pointer<_Deleter>::value>::type;
        -: 2181:
        -: 2182:  template <class _ArgType>
        -: 2183:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2184:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2185:
        -: 2186:  template <class _UPtr, class _Up>
        -: 2187:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2188:      is_convertible<typename _UPtr::pointer, pointer>::value &&
        -: 2189:      !is_array<_Up>::value
        -: 2190:  >::type;
        -: 2191:
        -: 2192:  template <class _UDel>
        -: 2193:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2194:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2195:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2196:    >::type;
        -: 2197:
        -: 2198:  template <class _UDel>
        -: 2199:  using _EnableIfDeleterAssignable = typename enable_if<
        -: 2200:      is_assignable<_Dp&, _UDel&&>::value
        -: 2201:    >::type;
        -: 2202:
        -: 2203:public:
        -: 2204:  template <bool _Dummy = true,
        -: 2205:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2206:  _LIBCPP_INLINE_VISIBILITY
        -: 2207:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2208:
        -: 2209:  template <bool _Dummy = true,
        -: 2210:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2211:  _LIBCPP_INLINE_VISIBILITY
        -: 2212:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2213:
        -: 2214:  template <bool _Dummy = true,
        -: 2215:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2216:  _LIBCPP_INLINE_VISIBILITY
        -: 2217:  explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {}
        -: 2218:
        -: 2219:  template <bool _Dummy = true,
        -: 2220:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 2221:  _LIBCPP_INLINE_VISIBILITY
        -: 2222:  unique_ptr(pointer __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2223:      : __ptr_(__p, __d) {}
        -: 2224:
        -: 2225:  template <bool _Dummy = true,
        -: 2226:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 2227:  _LIBCPP_INLINE_VISIBILITY
        -: 2228:  unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2229:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2230:    static_assert(!is_reference<deleter_type>::value,
        -: 2231:                  "rvalue deleter bound to reference");
        -: 2232:  }
        -: 2233:
        -: 2234:  template <bool _Dummy = true,
        -: 2235:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
        -: 2236:  _LIBCPP_INLINE_VISIBILITY
        -: 2237:  unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2238:
        -: 2239:  _LIBCPP_INLINE_VISIBILITY
        -: 2240:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2241:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 2242:  }
        -: 2243:
        -: 2244:  template <class _Up, class _Ep,
        -: 2245:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2246:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2247:  >
        -: 2248:  _LIBCPP_INLINE_VISIBILITY
        -: 2249:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2250:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2251:
        -: 2252:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2253:  template <class _Up>
        -: 2254:  _LIBCPP_INLINE_VISIBILITY
        -: 2255:  unique_ptr(auto_ptr<_Up>&& __p,
        -: 2256:             typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2257:                                    is_same<_Dp, default_delete<_Tp> >::value,
        -: 2258:                                __nat>::type = __nat()) _NOEXCEPT
        -: 2259:      : __ptr_(__p.release(), __default_init_tag()) {}
        -: 2260:#endif
        -: 2261:
        -: 2262:  _LIBCPP_INLINE_VISIBILITY
        -: 2263:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 2264:    reset(__u.release());
        -: 2265:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2266:    return *this;
        -: 2267:  }
        -: 2268:
        -: 2269:  template <class _Up, class _Ep,
        -: 2270:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2271:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2272:  >
        -: 2273:  _LIBCPP_INLINE_VISIBILITY
        -: 2274:  unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 2275:    reset(__u.release());
        -: 2276:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2277:    return *this;
        -: 2278:  }
        -: 2279:
        -: 2280:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2281:  template <class _Up>
        -: 2282:  _LIBCPP_INLINE_VISIBILITY
        -: 2283:      typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2284:                             is_same<_Dp, default_delete<_Tp> >::value,
        -: 2285:                         unique_ptr&>::type
        -: 2286:      operator=(auto_ptr<_Up> __p) {
        -: 2287:    reset(__p.release());
        -: 2288:    return *this;
        -: 2289:  }
        -: 2290:#endif
        -: 2291:
        -: 2292:#ifdef _LIBCPP_CXX03_LANG
        -: 2293:  unique_ptr(unique_ptr const&) = delete;
        -: 2294:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 2295:#endif
        -: 2296:
        -: 2297:
        -: 2298:  _LIBCPP_INLINE_VISIBILITY
        -: 2299:  ~unique_ptr() { reset(); }
        -: 2300:
        -: 2301:  _LIBCPP_INLINE_VISIBILITY
        -: 2302:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2303:    reset();
        -: 2304:    return *this;
        -: 2305:  }
        -: 2306:
        -: 2307:  _LIBCPP_INLINE_VISIBILITY
        -: 2308:  typename add_lvalue_reference<_Tp>::type
        -: 2309:  operator*() const {
        -: 2310:    return *__ptr_.first();
        -: 2311:  }
        -: 2312:  _LIBCPP_INLINE_VISIBILITY
        -: 2313:  pointer operator->() const _NOEXCEPT {
        -: 2314:    return __ptr_.first();
        -: 2315:  }
        -: 2316:  _LIBCPP_INLINE_VISIBILITY
        -: 2317:  pointer get() const _NOEXCEPT {
        -: 2318:    return __ptr_.first();
        -: 2319:  }
        -: 2320:  _LIBCPP_INLINE_VISIBILITY
        -: 2321:  deleter_type& get_deleter() _NOEXCEPT {
        -: 2322:    return __ptr_.second();
        -: 2323:  }
        -: 2324:  _LIBCPP_INLINE_VISIBILITY
        -: 2325:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2326:    return __ptr_.second();
        -: 2327:  }
        -: 2328:  _LIBCPP_INLINE_VISIBILITY
        -: 2329:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 2330:    return __ptr_.first() != nullptr;
        -: 2331:  }
        -: 2332:
        -: 2333:  _LIBCPP_INLINE_VISIBILITY
        -: 2334:  pointer release() _NOEXCEPT {
        -: 2335:    pointer __t = __ptr_.first();
        -: 2336:    __ptr_.first() = pointer();
        -: 2337:    return __t;
        -: 2338:  }
        -: 2339:
        -: 2340:  _LIBCPP_INLINE_VISIBILITY
        -: 2341:  void reset(pointer __p = pointer()) _NOEXCEPT {
        -: 2342:    pointer __tmp = __ptr_.first();
        -: 2343:    __ptr_.first() = __p;
        -: 2344:    if (__tmp)
        -: 2345:      __ptr_.second()(__tmp);
        -: 2346:  }
        -: 2347:
        -: 2348:  _LIBCPP_INLINE_VISIBILITY
        -: 2349:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2350:    __ptr_.swap(__u.__ptr_);
        -: 2351:  }
        -: 2352:};
        -: 2353:
        -: 2354:
        -: 2355:template <class _Tp, class _Dp>
        -: 2356:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {
        -: 2357:public:
        -: 2358:  typedef _Tp element_type;
        -: 2359:  typedef _Dp deleter_type;
        -: 2360:  typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2361:
        -: 2362:private:
        -: 2363:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2364:
        -: 2365:  template <class _From>
        -: 2366:  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};
        -: 2367:
        -: 2368:  template <class _FromElem>
        -: 2369:  struct _CheckArrayPointerConversion<_FromElem*>
        -: 2370:      : integral_constant<bool,
        -: 2371:          is_same<_FromElem*, pointer>::value ||
        -: 2372:            (is_same<pointer, element_type*>::value &&
        -: 2373:             is_convertible<_FromElem(*)[], element_type(*)[]>::value)
        -: 2374:      >
        -: 2375:  {};
        -: 2376:
        -: 2377:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2378:
        -: 2379:  template <bool _Dummy>
        -: 2380:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2381:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2382:
        -: 2383:  template <bool _Dummy>
        -: 2384:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2385:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2386:
        -: 2387:  template <bool _Dummy>
        -: 2388:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2389:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2390:
        -: 2391:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2392:                             __identity<deleter_type>, _Dummy>::type>
        -: 2393:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2394:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2395:                         !is_pointer<_Deleter>::value>::type;
        -: 2396:
        -: 2397:  template <class _ArgType>
        -: 2398:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2399:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2400:
        -: 2401:  template <class _Pp>
        -: 2402:  using _EnableIfPointerConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2403:      _CheckArrayPointerConversion<_Pp>::value
        -: 2404:  >::type;
        -: 2405:
        -: 2406:  template <class _UPtr, class _Up,
        -: 2407:        class _ElemT = typename _UPtr::element_type>
        -: 2408:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2409:      is_array<_Up>::value &&
        -: 2410:      is_same<pointer, element_type*>::value &&
        -: 2411:      is_same<typename _UPtr::pointer, _ElemT*>::value &&
        -: 2412:      is_convertible<_ElemT(*)[], element_type(*)[]>::value
        -: 2413:    >::type;
        -: 2414:
        -: 2415:  template <class _UDel>
        -: 2416:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2417:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2418:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2419:    >::type;
        -: 2420:
        -: 2421:  template <class _UDel>
        -: 2422:  using _EnableIfDeleterAssignable _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2423:      is_assignable<_Dp&, _UDel&&>::value
        -: 2424:    >::type;
        -: 2425:
        -: 2426:public:
        -: 2427:  template <bool _Dummy = true,
        -: 2428:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2429:  _LIBCPP_INLINE_VISIBILITY
        -: 2430:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2431:
        -: 2432:  template <bool _Dummy = true,
        -: 2433:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2434:  _LIBCPP_INLINE_VISIBILITY
        -: 2435:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2436:
        -: 2437:  template <class _Pp, bool _Dummy = true,
        -: 2438:            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
        -: 2439:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2440:  _LIBCPP_INLINE_VISIBILITY
        -: 2441:  explicit unique_ptr(_Pp __p) _NOEXCEPT
        -: 2442:      : __ptr_(__p, __default_init_tag()) {}
        -: 2443:
        -: 2444:  template <class _Pp, bool _Dummy = true,
        -: 2445:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
        -: 2446:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2447:  _LIBCPP_INLINE_VISIBILITY
        -: 2448:  unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2449:      : __ptr_(__p, __d) {}
        -: 2450:
        -: 2451:  template <bool _Dummy = true,
        -: 2452:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 2453:  _LIBCPP_INLINE_VISIBILITY
        -: 2454:  unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2455:      : __ptr_(nullptr, __d) {}
        -: 2456:
        -: 2457:  template <class _Pp, bool _Dummy = true,
        -: 2458:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
        -: 2459:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2460:  _LIBCPP_INLINE_VISIBILITY
        -: 2461:  unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2462:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2463:    static_assert(!is_reference<deleter_type>::value,
        -: 2464:                  "rvalue deleter bound to reference");
        -: 2465:  }
        -: 2466:
        -: 2467:  template <bool _Dummy = true,
        -: 2468:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 2469:  _LIBCPP_INLINE_VISIBILITY
        -: 2470:  unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2471:      : __ptr_(nullptr, _VSTD::move(__d)) {
        -: 2472:    static_assert(!is_reference<deleter_type>::value,
        -: 2473:                  "rvalue deleter bound to reference");
        -: 2474:  }
        -: 2475:
        -: 2476:  template <class _Pp, bool _Dummy = true,
        -: 2477:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
        -: 2478:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2479:  _LIBCPP_INLINE_VISIBILITY
        -: 2480:  unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2481:
        -: 2482:  _LIBCPP_INLINE_VISIBILITY
        -: 2483:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2484:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 2485:  }
        -: 2486:
        -: 2487:  _LIBCPP_INLINE_VISIBILITY
        -: 2488:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 2489:    reset(__u.release());
        -: 2490:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2491:    return *this;
        -: 2492:  }
        -: 2493:
        -: 2494:  template <class _Up, class _Ep,
        -: 2495:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2496:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2497:  >
        -: 2498:  _LIBCPP_INLINE_VISIBILITY
        -: 2499:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2500:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {
        -: 2501:  }
        -: 2502:
        -: 2503:  template <class _Up, class _Ep,
        -: 2504:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2505:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2506:  >
        -: 2507:  _LIBCPP_INLINE_VISIBILITY
        -: 2508:  unique_ptr&
        -: 2509:  operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 2510:    reset(__u.release());
        -: 2511:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2512:    return *this;
        -: 2513:  }
        -: 2514:
        -: 2515:#ifdef _LIBCPP_CXX03_LANG
        -: 2516:  unique_ptr(unique_ptr const&) = delete;
        -: 2517:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 2518:#endif
        -: 2519:
        -: 2520:public:
        -: 2521:  _LIBCPP_INLINE_VISIBILITY
        -: 2522:  ~unique_ptr() { reset(); }
        -: 2523:
        -: 2524:  _LIBCPP_INLINE_VISIBILITY
        -: 2525:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2526:    reset();
        -: 2527:    return *this;
        -: 2528:  }
        -: 2529:
        -: 2530:  _LIBCPP_INLINE_VISIBILITY
        -: 2531:  typename add_lvalue_reference<_Tp>::type
        -: 2532:  operator[](size_t __i) const {
        -: 2533:    return __ptr_.first()[__i];
        -: 2534:  }
        -: 2535:  _LIBCPP_INLINE_VISIBILITY
        -: 2536:  pointer get() const _NOEXCEPT {
        -: 2537:    return __ptr_.first();
        -: 2538:  }
        -: 2539:
        -: 2540:  _LIBCPP_INLINE_VISIBILITY
        -: 2541:  deleter_type& get_deleter() _NOEXCEPT {
        -: 2542:    return __ptr_.second();
        -: 2543:  }
        -: 2544:
        -: 2545:  _LIBCPP_INLINE_VISIBILITY
        -: 2546:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2547:    return __ptr_.second();
        -: 2548:  }
        -: 2549:  _LIBCPP_INLINE_VISIBILITY
        -: 2550:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 2551:    return __ptr_.first() != nullptr;
        -: 2552:  }
        -: 2553:
        -: 2554:  _LIBCPP_INLINE_VISIBILITY
        -: 2555:  pointer release() _NOEXCEPT {
        -: 2556:    pointer __t = __ptr_.first();
        -: 2557:    __ptr_.first() = pointer();
        -: 2558:    return __t;
        -: 2559:  }
        -: 2560:
        -: 2561:  template <class _Pp>
        -: 2562:  _LIBCPP_INLINE_VISIBILITY
        -: 2563:  typename enable_if<
        -: 2564:      _CheckArrayPointerConversion<_Pp>::value
        -: 2565:  >::type
        -: 2566:  reset(_Pp __p) _NOEXCEPT {
        -: 2567:    pointer __tmp = __ptr_.first();
        -: 2568:    __ptr_.first() = __p;
        -: 2569:    if (__tmp)
        -: 2570:      __ptr_.second()(__tmp);
        -: 2571:  }
        -: 2572:
        -: 2573:  _LIBCPP_INLINE_VISIBILITY
        -: 2574:  void reset(nullptr_t = nullptr) _NOEXCEPT {
        -: 2575:    pointer __tmp = __ptr_.first();
        -: 2576:    __ptr_.first() = nullptr;
        -: 2577:    if (__tmp)
        -: 2578:      __ptr_.second()(__tmp);
        -: 2579:  }
        -: 2580:
        -: 2581:  _LIBCPP_INLINE_VISIBILITY
        -: 2582:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2583:    __ptr_.swap(__u.__ptr_);
        -: 2584:  }
        -: 2585:
        -: 2586:};
        -: 2587:
        -: 2588:template <class _Tp, class _Dp>
        -: 2589:inline _LIBCPP_INLINE_VISIBILITY
        -: 2590:typename enable_if<
        -: 2591:    __is_swappable<_Dp>::value,
        -: 2592:    void
        -: 2593:>::type
        -: 2594:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2595:
        -: 2596:template <class _T1, class _D1, class _T2, class _D2>
        -: 2597:inline _LIBCPP_INLINE_VISIBILITY
        -: 2598:bool
        -: 2599:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2600:
        -: 2601:template <class _T1, class _D1, class _T2, class _D2>
        -: 2602:inline _LIBCPP_INLINE_VISIBILITY
        -: 2603:bool
        -: 2604:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2605:
        -: 2606:template <class _T1, class _D1, class _T2, class _D2>
        -: 2607:inline _LIBCPP_INLINE_VISIBILITY
        -: 2608:bool
        -: 2609:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2610:{
        -: 2611:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2612:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2613:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 2614:    return less<_Vp>()(__x.get(), __y.get());
        -: 2615:}
        -: 2616:
        -: 2617:template <class _T1, class _D1, class _T2, class _D2>
        -: 2618:inline _LIBCPP_INLINE_VISIBILITY
        -: 2619:bool
        -: 2620:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 2621:
        -: 2622:template <class _T1, class _D1, class _T2, class _D2>
        -: 2623:inline _LIBCPP_INLINE_VISIBILITY
        -: 2624:bool
        -: 2625:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 2626:
        -: 2627:template <class _T1, class _D1, class _T2, class _D2>
        -: 2628:inline _LIBCPP_INLINE_VISIBILITY
        -: 2629:bool
        -: 2630:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 2631:
        -: 2632:template <class _T1, class _D1>
        -: 2633:inline _LIBCPP_INLINE_VISIBILITY
        -: 2634:bool
        -: 2635:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2636:{
        -: 2637:    return !__x;
        -: 2638:}
        -: 2639:
        -: 2640:template <class _T1, class _D1>
        -: 2641:inline _LIBCPP_INLINE_VISIBILITY
        -: 2642:bool
        -: 2643:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2644:{
        -: 2645:    return !__x;
        -: 2646:}
        -: 2647:
        -: 2648:template <class _T1, class _D1>
        -: 2649:inline _LIBCPP_INLINE_VISIBILITY
        -: 2650:bool
        -: 2651:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2652:{
        -: 2653:    return static_cast<bool>(__x);
        -: 2654:}
        -: 2655:
        -: 2656:template <class _T1, class _D1>
        -: 2657:inline _LIBCPP_INLINE_VISIBILITY
        -: 2658:bool
        -: 2659:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2660:{
        -: 2661:    return static_cast<bool>(__x);
        -: 2662:}
        -: 2663:
        -: 2664:template <class _T1, class _D1>
        -: 2665:inline _LIBCPP_INLINE_VISIBILITY
        -: 2666:bool
        -: 2667:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2668:{
        -: 2669:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2670:    return less<_P1>()(__x.get(), nullptr);
        -: 2671:}
        -: 2672:
        -: 2673:template <class _T1, class _D1>
        -: 2674:inline _LIBCPP_INLINE_VISIBILITY
        -: 2675:bool
        -: 2676:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2677:{
        -: 2678:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2679:    return less<_P1>()(nullptr, __x.get());
        -: 2680:}
        -: 2681:
        -: 2682:template <class _T1, class _D1>
        -: 2683:inline _LIBCPP_INLINE_VISIBILITY
        -: 2684:bool
        -: 2685:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2686:{
        -: 2687:    return nullptr < __x;
        -: 2688:}
        -: 2689:
        -: 2690:template <class _T1, class _D1>
        -: 2691:inline _LIBCPP_INLINE_VISIBILITY
        -: 2692:bool
        -: 2693:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2694:{
        -: 2695:    return __x < nullptr;
        -: 2696:}
        -: 2697:
        -: 2698:template <class _T1, class _D1>
        -: 2699:inline _LIBCPP_INLINE_VISIBILITY
        -: 2700:bool
        -: 2701:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2702:{
        -: 2703:    return !(nullptr < __x);
        -: 2704:}
        -: 2705:
        -: 2706:template <class _T1, class _D1>
        -: 2707:inline _LIBCPP_INLINE_VISIBILITY
        -: 2708:bool
        -: 2709:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2710:{
        -: 2711:    return !(__x < nullptr);
        -: 2712:}
        -: 2713:
        -: 2714:template <class _T1, class _D1>
        -: 2715:inline _LIBCPP_INLINE_VISIBILITY
        -: 2716:bool
        -: 2717:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2718:{
        -: 2719:    return !(__x < nullptr);
        -: 2720:}
        -: 2721:
        -: 2722:template <class _T1, class _D1>
        -: 2723:inline _LIBCPP_INLINE_VISIBILITY
        -: 2724:bool
        -: 2725:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2726:{
        -: 2727:    return !(nullptr < __x);
        -: 2728:}
        -: 2729:
        -: 2730:#if _LIBCPP_STD_VER > 11
        -: 2731:
        -: 2732:template<class _Tp>
        -: 2733:struct __unique_if
        -: 2734:{
        -: 2735:    typedef unique_ptr<_Tp> __unique_single;
        -: 2736:};
        -: 2737:
        -: 2738:template<class _Tp>
        -: 2739:struct __unique_if<_Tp[]>
        -: 2740:{
        -: 2741:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 2742:};
        -: 2743:
        -: 2744:template<class _Tp, size_t _Np>
        -: 2745:struct __unique_if<_Tp[_Np]>
        -: 2746:{
        -: 2747:    typedef void __unique_array_known_bound;
        -: 2748:};
        -: 2749:
        -: 2750:template<class _Tp, class... _Args>
        -: 2751:inline _LIBCPP_INLINE_VISIBILITY
        -: 2752:typename __unique_if<_Tp>::__unique_single
        -: 2753:make_unique(_Args&&... __args)
        -: 2754:{
        -: 2755:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 2756:}
        -: 2757:
        -: 2758:template<class _Tp>
        -: 2759:inline _LIBCPP_INLINE_VISIBILITY
        -: 2760:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 2761:make_unique(size_t __n)
        -: 2762:{
        -: 2763:    typedef typename remove_extent<_Tp>::type _Up;
        -: 2764:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 2765:}
        -: 2766:
        -: 2767:template<class _Tp, class... _Args>
        -: 2768:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 2769:    make_unique(_Args&&...) = delete;
        -: 2770:
        -: 2771:#endif  // _LIBCPP_STD_VER > 11
        -: 2772:
        -: 2773:template <class _Tp, class _Dp>
        -: 2774:#ifdef _LIBCPP_CXX03_LANG
        -: 2775:struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >
        -: 2776:#else
        -: 2777:struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper<
        -: 2778:    unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >
        -: 2779:#endif
        -: 2780:{
        -: 2781:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 2782:    typedef size_t               result_type;
        -: 2783:    _LIBCPP_INLINE_VISIBILITY
        -: 2784:    result_type operator()(const argument_type& __ptr) const
        -: 2785:    {
        -: 2786:        typedef typename argument_type::pointer pointer;
        -: 2787:        return hash<pointer>()(__ptr.get());
        -: 2788:    }
        -: 2789:};
        -: 2790:
        -: 2791:struct __destruct_n
        -: 2792:{
        -: 2793:private:
        -: 2794:    size_t __size_;
        -: 2795:
        -: 2796:    template <class _Tp>
        -: 2797:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 2798:        {for (size_t __i = 0; __i < __size_; ++__i, ++__p) __p->~_Tp();}
        -: 2799:
        -: 2800:    template <class _Tp>
        -: 2801:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 2802:        {}
        -: 2803:
        -: 2804:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 2805:        {++__size_;}
        -: 2806:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 2807:        {}
        -: 2808:
        -: 2809:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 2810:        {__size_ = __s;}
        -: 2811:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 2812:        {}
        -: 2813:public:
        -: 2814:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 2815:        : __size_(__s) {}
        -: 2816:
        -: 2817:    template <class _Tp>
        -: 2818:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 2819:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2820:
        -: 2821:    template <class _Tp>
        -: 2822:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 2823:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2824:
        -: 2825:    template <class _Tp>
        -: 2826:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 2827:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 2828:};
        -: 2829:
        -: 2830:template <class _Alloc>
        -: 2831:class __allocator_destructor
        -: 2832:{
        -: 2833:    typedef _LIBCPP_NODEBUG_TYPE allocator_traits<_Alloc> __alloc_traits;
        -: 2834:public:
        -: 2835:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::pointer pointer;
        -: 2836:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::size_type size_type;
        -: 2837:private:
        -: 2838:    _Alloc& __alloc_;
        -: 2839:    size_type __s_;
        -: 2840:public:
        -: 2841:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 2842:             _NOEXCEPT
        -: 2843:        : __alloc_(__a), __s_(__s) {}
        -: 2844:    _LIBCPP_INLINE_VISIBILITY
        -: 2845:    void operator()(pointer __p) _NOEXCEPT
        -: 2846:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 2847:};
        -: 2848:
        -: 2849:template <class _InputIterator, class _ForwardIterator>
        -: 2850:_ForwardIterator
        -: 2851:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 2852:{
        -: 2853:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2854:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2855:    _ForwardIterator __s = __r;
        -: 2856:    try
        -: 2857:    {
        -: 2858:#endif
        -: 2859:        for (; __f != __l; ++__f, (void) ++__r)
        -: 2860:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 2861:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2862:    }
        -: 2863:    catch (...)
        -: 2864:    {
        -: 2865:        for (; __s != __r; ++__s)
        -: 2866:            __s->~value_type();
        -: 2867:        throw;
        -: 2868:    }
        -: 2869:#endif
        -: 2870:    return __r;
        -: 2871:}
        -: 2872:
        -: 2873:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 2874:_ForwardIterator
        -: 2875:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 2876:{
        -: 2877:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2878:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2879:    _ForwardIterator __s = __r;
        -: 2880:    try
        -: 2881:    {
        -: 2882:#endif
        -: 2883:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 2884:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 2885:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2886:    }
        -: 2887:    catch (...)
        -: 2888:    {
        -: 2889:        for (; __s != __r; ++__s)
        -: 2890:            __s->~value_type();
        -: 2891:        throw;
        -: 2892:    }
        -: 2893:#endif
        -: 2894:    return __r;
        -: 2895:}
        -: 2896:
        -: 2897:template <class _ForwardIterator, class _Tp>
        -: 2898:void
        -: 2899:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 2900:{
        -: 2901:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2902:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2903:    _ForwardIterator __s = __f;
        -: 2904:    try
        -: 2905:    {
        -: 2906:#endif
        -: 2907:        for (; __f != __l; ++__f)
        -: 2908:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 2909:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2910:    }
        -: 2911:    catch (...)
        -: 2912:    {
        -: 2913:        for (; __s != __f; ++__s)
        -: 2914:            __s->~value_type();
        -: 2915:        throw;
        -: 2916:    }
        -: 2917:#endif
        -: 2918:}
        -: 2919:
        -: 2920:template <class _ForwardIterator, class _Size, class _Tp>
        -: 2921:_ForwardIterator
        -: 2922:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 2923:{
        -: 2924:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 2925:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2926:    _ForwardIterator __s = __f;
        -: 2927:    try
        -: 2928:    {
        -: 2929:#endif
        -: 2930:        for (; __n > 0; ++__f, (void) --__n)
        -: 2931:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 2932:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2933:    }
        -: 2934:    catch (...)
        -: 2935:    {
        -: 2936:        for (; __s != __f; ++__s)
        -: 2937:            __s->~value_type();
        -: 2938:        throw;
        -: 2939:    }
        -: 2940:#endif
        -: 2941:    return __f;
        -: 2942:}
        -: 2943:
        -: 2944:#if _LIBCPP_STD_VER > 14
        -: 2945:
        -: 2946:template <class _Tp>
        -: 2947:inline _LIBCPP_INLINE_VISIBILITY
        -: 2948:void destroy_at(_Tp* __loc) {
        -: 2949:    _LIBCPP_ASSERT(__loc, "null pointer given to destroy_at");
        -: 2950:    __loc->~_Tp();
        -: 2951:}
        -: 2952:
        -: 2953:template <class _ForwardIterator>
        -: 2954:inline _LIBCPP_INLINE_VISIBILITY
        -: 2955:void destroy(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2956:    for (; __first != __last; ++__first)
        -: 2957:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 2958:}
        -: 2959:
        -: 2960:template <class _ForwardIterator, class _Size>
        -: 2961:inline _LIBCPP_INLINE_VISIBILITY
        -: 2962:_ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
        -: 2963:    for (; __n > 0; (void)++__first, --__n)
        -: 2964:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 2965:    return __first;
        -: 2966:}
        -: 2967:
        -: 2968:template <class _ForwardIterator>
        -: 2969:inline _LIBCPP_INLINE_VISIBILITY
        -: 2970:void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2971:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2972:    auto __idx = __first;
        -: 2973:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2974:    try {
        -: 2975:#endif
        -: 2976:    for (; __idx != __last; ++__idx)
        -: 2977:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 2978:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2979:    } catch (...) {
        -: 2980:        _VSTD::destroy(__first, __idx);
        -: 2981:        throw;
        -: 2982:    }
        -: 2983:#endif
        -: 2984:}
        -: 2985:
        -: 2986:template <class _ForwardIterator, class _Size>
        -: 2987:inline _LIBCPP_INLINE_VISIBILITY
        -: 2988:_ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
        -: 2989:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 2990:    auto __idx = __first;
        -: 2991:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2992:    try {
        -: 2993:#endif
        -: 2994:    for (; __n > 0; (void)++__idx, --__n)
        -: 2995:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 2996:    return __idx;
        -: 2997:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 2998:    } catch (...) {
        -: 2999:        _VSTD::destroy(__first, __idx);
        -: 3000:        throw;
        -: 3001:    }
        -: 3002:#endif
        -: 3003:}
        -: 3004:
        -: 3005:
        -: 3006:template <class _ForwardIterator>
        -: 3007:inline _LIBCPP_INLINE_VISIBILITY
        -: 3008:void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3009:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3010:    auto __idx = __first;
        -: 3011:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3012:    try {
        -: 3013:#endif
        -: 3014:    for (; __idx != __last; ++__idx)
        -: 3015:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3016:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3017:    } catch (...) {
        -: 3018:        _VSTD::destroy(__first, __idx);
        -: 3019:        throw;
        -: 3020:    }
        -: 3021:#endif
        -: 3022:}
        -: 3023:
        -: 3024:template <class _ForwardIterator, class _Size>
        -: 3025:inline _LIBCPP_INLINE_VISIBILITY
        -: 3026:_ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
        -: 3027:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3028:    auto __idx = __first;
        -: 3029:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3030:    try {
        -: 3031:#endif
        -: 3032:    for (; __n > 0; (void)++__idx, --__n)
        -: 3033:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3034:    return __idx;
        -: 3035:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3036:    } catch (...) {
        -: 3037:        _VSTD::destroy(__first, __idx);
        -: 3038:        throw;
        -: 3039:    }
        -: 3040:#endif
        -: 3041:}
        -: 3042:
        -: 3043:
        -: 3044:template <class _InputIt, class _ForwardIt>
        -: 3045:inline _LIBCPP_INLINE_VISIBILITY
        -: 3046:_ForwardIt uninitialized_move(_InputIt __first, _InputIt __last, _ForwardIt __first_res) {
        -: 3047:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3048:    auto __idx = __first_res;
        -: 3049:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3050:    try {
        -: 3051:#endif
        -: 3052:    for (; __first != __last; (void)++__idx, ++__first)
        -: 3053:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3054:    return __idx;
        -: 3055:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3056:    } catch (...) {
        -: 3057:        _VSTD::destroy(__first_res, __idx);
        -: 3058:        throw;
        -: 3059:    }
        -: 3060:#endif
        -: 3061:}
        -: 3062:
        -: 3063:template <class _InputIt, class _Size, class _ForwardIt>
        -: 3064:inline _LIBCPP_INLINE_VISIBILITY
        -: 3065:pair<_InputIt, _ForwardIt>
        -: 3066:uninitialized_move_n(_InputIt __first, _Size __n, _ForwardIt __first_res) {
        -: 3067:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3068:    auto __idx = __first_res;
        -: 3069:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3070:    try {
        -: 3071:#endif
        -: 3072:    for (; __n > 0; ++__idx, (void)++__first, --__n)
        -: 3073:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3074:    return {__first, __idx};
        -: 3075:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3076:    } catch (...) {
        -: 3077:        _VSTD::destroy(__first_res, __idx);
        -: 3078:        throw;
        -: 3079:    }
        -: 3080:#endif
        -: 3081:}
        -: 3082:
        -: 3083:
        -: 3084:#endif // _LIBCPP_STD_VER > 14
        -: 3085:
        -: 3086:// NOTE: Relaxed and acq/rel atomics (for increment and decrement respectively)
        -: 3087:// should be sufficient for thread safety.
        -: 3088:// See https://bugs.llvm.org/show_bug.cgi?id=22803
        -: 3089:#if defined(__clang__) && __has_builtin(__atomic_add_fetch)          \
        -: 3090:                       && defined(__ATOMIC_RELAXED)                  \
        -: 3091:                       && defined(__ATOMIC_ACQ_REL)
        -: 3092:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3093:#elif defined(_LIBCPP_COMPILER_GCC)
        -: 3094:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3095:#endif
        -: 3096:
        -: 3097:template <class _Tp>
        -: 3098:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3099:__libcpp_atomic_refcount_increment(_Tp& __t) _NOEXCEPT
        -: 3100:{
        -: 3101:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 3102:    return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED);
        -: 3103:#else
        -: 3104:    return __t += 1;
        -: 3105:#endif
        -: 3106:}
        -: 3107:
        -: 3108:template <class _Tp>
        -: 3109:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3110:__libcpp_atomic_refcount_decrement(_Tp& __t) _NOEXCEPT
        -: 3111:{
        -: 3112:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 3113:    return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL);
        -: 3114:#else
        -: 3115:    return __t -= 1;
        -: 3116:#endif
        -: 3117:}
        -: 3118:
        -: 3119:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3120:    : public std::exception
        -: 3121:{
        -: 3122:public:
        -: 3123:    bad_weak_ptr() _NOEXCEPT = default;
        -: 3124:    bad_weak_ptr(const bad_weak_ptr&) _NOEXCEPT = default;
        -: 3125:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3126:    virtual const char* what() const  _NOEXCEPT;
        -: 3127:};
        -: 3128:
        -: 3129:_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY
        -: 3130:void __throw_bad_weak_ptr()
        -: 3131:{
        -: 3132:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3133:    throw bad_weak_ptr();
        -: 3134:#else
        -: 3135:    _VSTD::abort();
        -: 3136:#endif
        -: 3137:}
        -: 3138:
        -: 3139:template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3140:
        -: 3141:class _LIBCPP_TYPE_VIS __shared_count
        -: 3142:{
        -: 3143:    __shared_count(const __shared_count&);
        -: 3144:    __shared_count& operator=(const __shared_count&);
        -: 3145:
        -: 3146:protected:
        -: 3147:    long __shared_owners_;
        -: 3148:    virtual ~__shared_count();
        -: 3149:private:
        -: 3150:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3151:
        -: 3152:public:
        -: 3153:    _LIBCPP_INLINE_VISIBILITY
        -: 3154:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 3155:        : __shared_owners_(__refs) {}
        -: 3156:
        -: 3157:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3158:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3159:    void __add_shared() _NOEXCEPT;
        -: 3160:    bool __release_shared() _NOEXCEPT;
        -: 3161:#else
        -: 3162:    _LIBCPP_INLINE_VISIBILITY
        -: 3163:    void __add_shared() _NOEXCEPT {
        -: 3164:      __libcpp_atomic_refcount_increment(__shared_owners_);
        -: 3165:    }
        -: 3166:    _LIBCPP_INLINE_VISIBILITY
        -: 3167:    bool __release_shared() _NOEXCEPT {
        -: 3168:      if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
        -: 3169:        __on_zero_shared();
        -: 3170:        return true;
        -: 3171:      }
        -: 3172:      return false;
        -: 3173:    }
        -: 3174:#endif
        -: 3175:    _LIBCPP_INLINE_VISIBILITY
        -: 3176:    long use_count() const _NOEXCEPT {
        -: 3177:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 3178:    }
        -: 3179:};
        -: 3180:
        -: 3181:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3182:    : private __shared_count
        -: 3183:{
        -: 3184:    long __shared_weak_owners_;
        -: 3185:
        -: 3186:public:
        -: 3187:    _LIBCPP_INLINE_VISIBILITY
        -: 3188:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 3189:        : __shared_count(__refs),
        -: 3190:          __shared_weak_owners_(__refs) {}
        -: 3191:protected:
        -: 3192:    virtual ~__shared_weak_count();
        -: 3193:
        -: 3194:public:
        -: 3195:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3196:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3197:    void __add_shared() _NOEXCEPT;
        -: 3198:    void __add_weak() _NOEXCEPT;
        -: 3199:    void __release_shared() _NOEXCEPT;
        -: 3200:#else
        -: 3201:    _LIBCPP_INLINE_VISIBILITY
        -: 3202:    void __add_shared() _NOEXCEPT {
        -: 3203:      __shared_count::__add_shared();
        -: 3204:    }
        -: 3205:    _LIBCPP_INLINE_VISIBILITY
        -: 3206:    void __add_weak() _NOEXCEPT {
        -: 3207:      __libcpp_atomic_refcount_increment(__shared_weak_owners_);
        -: 3208:    }
        -: 3209:    _LIBCPP_INLINE_VISIBILITY
        -: 3210:    void __release_shared() _NOEXCEPT {
        -: 3211:      if (__shared_count::__release_shared())
        -: 3212:        __release_weak();
        -: 3213:    }
        -: 3214:#endif
        -: 3215:    void __release_weak() _NOEXCEPT;
        -: 3216:    _LIBCPP_INLINE_VISIBILITY
        -: 3217:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3218:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3219:
        -: 3220:    // Define the function out only if we build static libc++ without RTTI.
        -: 3221:    // Otherwise we may break clients who need to compile their projects with
        -: 3222:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3223:    // without -fno-rtti.
        -: 3224:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3225:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3226:#endif
        -: 3227:private:
        -: 3228:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3229:};
        -: 3230:
        -: 3231:template <class _Tp, class _Dp, class _Alloc>
        -: 3232:class __shared_ptr_pointer
        -: 3233:    : public __shared_weak_count
        -: 3234:{
        -: 3235:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3236:public:
        -: 3237:    _LIBCPP_INLINE_VISIBILITY
        -: 3238:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 3239:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3240:
        -: 3241:#ifndef _LIBCPP_NO_RTTI
        -: 3242:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3243:#endif
        -: 3244:
        -: 3245:private:
        -: 3246:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3247:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3248:};
        -: 3249:
        -: 3250:#ifndef _LIBCPP_NO_RTTI
        -: 3251:
        -: 3252:template <class _Tp, class _Dp, class _Alloc>
        -: 3253:const void*
        -: 3254:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3255:{
        -: 3256:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr;
        -: 3257:}
        -: 3258:
        -: 3259:#endif  // _LIBCPP_NO_RTTI
        -: 3260:
        -: 3261:template <class _Tp, class _Dp, class _Alloc>
        -: 3262:void
        -: 3263:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3264:{
        -: 3265:    __data_.first().second()(__data_.first().first());
        -: 3266:    __data_.first().second().~_Dp();
        -: 3267:}
        -: 3268:
        -: 3269:template <class _Tp, class _Dp, class _Alloc>
        -: 3270:void
        -: 3271:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3272:{
        -: 3273:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3274:    typedef allocator_traits<_Al> _ATraits;
        -: 3275:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3276:
        -: 3277:    _Al __a(__data_.second());
        -: 3278:    __data_.second().~_Alloc();
        -: 3279:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3280:}
        -: 3281:
        -: 3282:template <class _Tp, class _Alloc>
        -: 3283:class __shared_ptr_emplace
        -: 3284:    : public __shared_weak_count
        -: 3285:{
        -: 3286:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3287:public:
        -: 3288:
        -: 3289:    _LIBCPP_INLINE_VISIBILITY
        -: 3290:    __shared_ptr_emplace(_Alloc __a)
        -: 3291:        :  __data_(_VSTD::move(__a), __value_init_tag()) {}
        -: 3292:
        -: 3293:#ifndef _LIBCPP_CXX03_LANG
        -: 3294:    template <class ..._Args>
        -: 3295:        _LIBCPP_INLINE_VISIBILITY
        -: 3296:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3297:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
        -: 3298:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3299:#else
        -: 3300:    template <class ..._Args>
        -: 3301:        _LIBCPP_INLINE_VISIBILITY
        -: 3302:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3303:            :  __data_(__a, _Tp(_VSTD::forward<_Args>(__args)...)) {}
        -: 3304:#endif
        -: 3305:
        -: 3306:private:
        -: 3307:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3308:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3309:public:
        -: 3310:    _LIBCPP_INLINE_VISIBILITY
        -: 3311:    _Tp* get() _NOEXCEPT {return _VSTD::addressof(__data_.second());}
        -: 3312:};
        -: 3313:
        -: 3314:template <class _Tp, class _Alloc>
        -: 3315:void
        -: 3316:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3317:{
        -: 3318:    __data_.second().~_Tp();
        -: 3319:}
        -: 3320:
        -: 3321:template <class _Tp, class _Alloc>
        -: 3322:void
        -: 3323:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3324:{
        -: 3325:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3326:    typedef allocator_traits<_Al> _ATraits;
        -: 3327:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3328:    _Al __a(__data_.first());
        -: 3329:    __data_.first().~_Alloc();
        -: 3330:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3331:}
        -: 3332:
        -: 3333:struct __shared_ptr_dummy_rebind_allocator_type;
        -: 3334:template <>
        -: 3335:class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type>
        -: 3336:{
        -: 3337:public:
        -: 3338:    template <class _Other>
        -: 3339:    struct rebind
        -: 3340:    {
        -: 3341:        typedef allocator<_Other> other;
        -: 3342:    };
        -: 3343:};
        -: 3344:
        -: 3345:template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;
        -: 3346:
        -: 3347:template<class _Tp, class _Up>
        -: 3348:struct __compatible_with
        -: 3349:#if _LIBCPP_STD_VER > 14
        -: 3350:    : is_convertible<remove_extent_t<_Tp>*, remove_extent_t<_Up>*> {};
        -: 3351:#else
        -: 3352:    : is_convertible<_Tp*, _Up*> {};
        -: 3353:#endif // _LIBCPP_STD_VER > 14
        -: 3354:
        -: 3355:#if defined(_LIBCPP_ABI_ENABLE_SHARED_PTR_TRIVIAL_ABI)
        -: 3356:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI __attribute__((trivial_abi))
        -: 3357:#else
        -: 3358:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI
        -: 3359:#endif
        -: 3360:
        -: 3361:template<class _Tp>
        -: 3362:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS shared_ptr
        -: 3363:{
        -: 3364:public:
        -: 3365:#if _LIBCPP_STD_VER > 14
        -: 3366:    typedef weak_ptr<_Tp> weak_type;
        -: 3367:    typedef remove_extent_t<_Tp> element_type;
        -: 3368:#else
        -: 3369:    typedef _Tp element_type;
        -: 3370:#endif
        -: 3371:
        -: 3372:private:
        -: 3373:    element_type*      __ptr_;
        -: 3374:    __shared_weak_count* __cntrl_;
        -: 3375:
        -: 3376:    struct __nat {int __for_bool_;};
        -: 3377:public:
        -: 3378:    _LIBCPP_INLINE_VISIBILITY
        -: 3379:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3380:    _LIBCPP_INLINE_VISIBILITY
        -: 3381:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3382:    template<class _Yp>
        -: 3383:        explicit shared_ptr(_Yp* __p,
        -: 3384:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 3385:    template<class _Yp, class _Dp>
        -: 3386:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3387:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 3388:    template<class _Yp, class _Dp, class _Alloc>
        -: 3389:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3390:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat());
        -: 3391:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3392:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3393:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3394:    _LIBCPP_INLINE_VISIBILITY
        -: 3395:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3396:    template<class _Yp>
        -: 3397:        _LIBCPP_INLINE_VISIBILITY
        -: 3398:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3399:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat())
        -: 3400:                       _NOEXCEPT;
        -: 3401:    _LIBCPP_INLINE_VISIBILITY
        -: 3402:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3403:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3404:                   typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type = __nat())
        -: 3405:                       _NOEXCEPT;
        -: 3406:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3407:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type= __nat());
        -: 3408:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3409:    template<class _Yp>
        -: 3410:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3411:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3412:#endif
        -: 3413:    template <class _Yp, class _Dp>
        -: 3414:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3415:                   typename enable_if
        -: 3416:                   <
        -: 3417:                       !is_lvalue_reference<_Dp>::value &&
        -: 3418:                       !is_array<_Yp>::value &&
        -: 3419:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3420:                       __nat
        -: 3421:                   >::type = __nat());
        -: 3422:    template <class _Yp, class _Dp>
        -: 3423:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3424:                   typename enable_if
        -: 3425:                   <
        -: 3426:                       is_lvalue_reference<_Dp>::value &&
        -: 3427:                       !is_array<_Yp>::value &&
        -: 3428:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3429:                       __nat
        -: 3430:                   >::type = __nat());
        -: 3431:
        -: 3432:    ~shared_ptr();
        -: 3433:
        -: 3434:    _LIBCPP_INLINE_VISIBILITY
        -: 3435:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3436:    template<class _Yp>
        -: 3437:        typename enable_if
        -: 3438:        <
        -: 3439:            __compatible_with<_Yp, element_type>::value,
        -: 3440:            shared_ptr&
        -: 3441:        >::type
        -: 3442:        _LIBCPP_INLINE_VISIBILITY
        -: 3443:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3444:    _LIBCPP_INLINE_VISIBILITY
        -: 3445:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3446:    template<class _Yp>
        -: 3447:        typename enable_if
        -: 3448:        <
        -: 3449:            __compatible_with<_Yp, element_type>::value,
        -: 3450:            shared_ptr&
        -: 3451:        >::type
        -: 3452:        _LIBCPP_INLINE_VISIBILITY
        -: 3453:        operator=(shared_ptr<_Yp>&& __r);
        -: 3454:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3455:    template<class _Yp>
        -: 3456:        _LIBCPP_INLINE_VISIBILITY
        -: 3457:        typename enable_if
        -: 3458:        <
        -: 3459:            !is_array<_Yp>::value &&
        -: 3460:            is_convertible<_Yp*, element_type*>::value,
        -: 3461:            shared_ptr
        -: 3462:        >::type&
        -: 3463:        operator=(auto_ptr<_Yp>&& __r);
        -: 3464:#endif
        -: 3465:    template <class _Yp, class _Dp>
        -: 3466:        typename enable_if
        -: 3467:        <
        -: 3468:            !is_array<_Yp>::value &&
        -: 3469:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3470:            shared_ptr&
        -: 3471:        >::type
        -: 3472:        _LIBCPP_INLINE_VISIBILITY
        -: 3473:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 3474:
        -: 3475:    _LIBCPP_INLINE_VISIBILITY
        -: 3476:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 3477:    _LIBCPP_INLINE_VISIBILITY
        -: 3478:    void reset() _NOEXCEPT;
        -: 3479:    template<class _Yp>
        -: 3480:        typename enable_if
        -: 3481:        <
        -: 3482:            __compatible_with<_Yp, element_type>::value,
        -: 3483:            void
        -: 3484:        >::type
        -: 3485:        _LIBCPP_INLINE_VISIBILITY
        -: 3486:        reset(_Yp* __p);
        -: 3487:    template<class _Yp, class _Dp>
        -: 3488:        typename enable_if
        -: 3489:        <
        -: 3490:            __compatible_with<_Yp, element_type>::value,
        -: 3491:            void
        -: 3492:        >::type
        -: 3493:        _LIBCPP_INLINE_VISIBILITY
        -: 3494:        reset(_Yp* __p, _Dp __d);
        -: 3495:    template<class _Yp, class _Dp, class _Alloc>
        -: 3496:        typename enable_if
        -: 3497:        <
        -: 3498:            __compatible_with<_Yp, element_type>::value,
        -: 3499:            void
        -: 3500:        >::type
        -: 3501:        _LIBCPP_INLINE_VISIBILITY
        -: 3502:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 3503:
        -: 3504:    _LIBCPP_INLINE_VISIBILITY
        -: 3505:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 3506:    _LIBCPP_INLINE_VISIBILITY
        -: 3507:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 3508:        {return *__ptr_;}
        -: 3509:    _LIBCPP_INLINE_VISIBILITY
        -: 3510:    element_type* operator->() const _NOEXCEPT
        -: 3511:    {
        -: 3512:        static_assert(!_VSTD::is_array<_Tp>::value,
        -: 3513:                      "std::shared_ptr<T>::operator-> is only valid when T is not an array type.");
        -: 3514:        return __ptr_;
        -: 3515:    }
        -: 3516:    _LIBCPP_INLINE_VISIBILITY
        -: 3517:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 3518:    _LIBCPP_INLINE_VISIBILITY
        -: 3519:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 3520:    _LIBCPP_INLINE_VISIBILITY
        -: 3521:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 3522:    template <class _Up>
        -: 3523:        _LIBCPP_INLINE_VISIBILITY
        -: 3524:        bool owner_before(shared_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3525:        {return __cntrl_ < __p.__cntrl_;}
        -: 3526:    template <class _Up>
        -: 3527:        _LIBCPP_INLINE_VISIBILITY
        -: 3528:        bool owner_before(weak_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3529:        {return __cntrl_ < __p.__cntrl_;}
        -: 3530:    _LIBCPP_INLINE_VISIBILITY
        -: 3531:    bool
        -: 3532:    __owner_equivalent(const shared_ptr& __p) const
        -: 3533:        {return __cntrl_ == __p.__cntrl_;}
        -: 3534:
        -: 3535:#if _LIBCPP_STD_VER > 14
        -: 3536:    typename add_lvalue_reference<element_type>::type
        -: 3537:    _LIBCPP_INLINE_VISIBILITY
        -: 3538:    operator[](ptrdiff_t __i) const
        -: 3539:    {
        -: 3540:            static_assert(_VSTD::is_array<_Tp>::value,
        -: 3541:                          "std::shared_ptr<T>::operator[] is only valid when T is an array type.");
        -: 3542:            return __ptr_[__i];
        -: 3543:    }
        -: 3544:#endif
        -: 3545:
        -: 3546:#ifndef _LIBCPP_NO_RTTI
        -: 3547:    template <class _Dp>
        -: 3548:        _LIBCPP_INLINE_VISIBILITY
        -: 3549:        _Dp* __get_deleter() const _NOEXCEPT
        -: 3550:            {return static_cast<_Dp*>(__cntrl_
        -: 3551:                    ? const_cast<void *>(__cntrl_->__get_deleter(typeid(_Dp)))
        -: 3552:                      : nullptr);}
        -: 3553:#endif  // _LIBCPP_NO_RTTI
        -: 3554:
        -: 3555:    template<class _Yp, class _CntrlBlk>
        -: 3556:    static shared_ptr<_Tp>
        -: 3557:    __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl) _NOEXCEPT
        -: 3558:    {
        -: 3559:        shared_ptr<_Tp> __r;
        -: 3560:        __r.__ptr_ = __p;
        -: 3561:        __r.__cntrl_ = __cntrl;
        -: 3562:        __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 3563:        return __r;
        -: 3564:    }
        -: 3565:
        -: 3566:private:
        -: 3567:    template <class _Yp, bool = is_function<_Yp>::value>
        -: 3568:        struct __shared_ptr_default_allocator
        -: 3569:        {
        -: 3570:            typedef allocator<_Yp> type;
        -: 3571:        };
        -: 3572:
        -: 3573:    template <class _Yp>
        -: 3574:        struct __shared_ptr_default_allocator<_Yp, true>
        -: 3575:        {
        -: 3576:            typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
        -: 3577:        };
        -: 3578:
        -: 3579:    template <class _Yp, class _OrigPtr>
        -: 3580:        _LIBCPP_INLINE_VISIBILITY
        -: 3581:        typename enable_if<is_convertible<_OrigPtr*,
        -: 3582:                                          const enable_shared_from_this<_Yp>*
        -: 3583:        >::value,
        -: 3584:            void>::type
        -: 3585:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 3586:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 3587:        {
        -: 3588:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 3589:            if (__e && __e->__weak_this_.expired())
        -: 3590:            {
        -: 3591:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 3592:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 3593:            }
        -: 3594:        }
        -: 3595:
        -: 3596:    _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {}
        -: 3597:
        -: 3598:    template <class, class _Yp>
        -: 3599:        struct __shared_ptr_default_delete
        -: 3600:            : default_delete<_Yp> {};
        -: 3601:
        -: 3602:    template <class _Yp, class _Un, size_t _Sz>
        -: 3603:        struct __shared_ptr_default_delete<_Yp[_Sz], _Un>
        -: 3604:            : default_delete<_Yp[]> {};
        -: 3605:
        -: 3606:    template <class _Yp, class _Un>
        -: 3607:        struct __shared_ptr_default_delete<_Yp[], _Un>
        -: 3608:            : default_delete<_Yp[]> {};
        -: 3609:
        -: 3610:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 3611:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3612:};
        -: 3613:
        -: 3614:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 3615:template<class _Tp>
        -: 3616:shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
        -: 3617:template<class _Tp, class _Dp>
        -: 3618:shared_ptr(unique_ptr<_Tp, _Dp>) -> shared_ptr<_Tp>;
        -: 3619:#endif
        -: 3620:
        -: 3621:template<class _Tp>
        -: 3622:inline
        -: 3623:_LIBCPP_CONSTEXPR
        -: 3624:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 3625:    : __ptr_(0),
        -: 3626:      __cntrl_(0)
        -: 3627:{
        -: 3628:}
        -: 3629:
        -: 3630:template<class _Tp>
        -: 3631:inline
        -: 3632:_LIBCPP_CONSTEXPR
        -: 3633:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 3634:    : __ptr_(0),
        -: 3635:      __cntrl_(0)
        -: 3636:{
        -: 3637:}
        -: 3638:
        -: 3639:template<class _Tp>
        -: 3640:template<class _Yp>
        -: 3641:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 3642:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3643:    : __ptr_(__p)
        -: 3644:{
        -: 3645:    unique_ptr<_Yp> __hold(__p);
        -: 3646:    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3647:    typedef __shared_ptr_pointer<_Yp*, __shared_ptr_default_delete<_Tp, _Yp>, _AllocT > _CntrlBlk;
        -: 3648:    __cntrl_ = new _CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT());
        -: 3649:    __hold.release();
        -: 3650:    __enable_weak_this(__p, __p);
        -: 3651:}
        -: 3652:
        -: 3653:template<class _Tp>
        -: 3654:template<class _Yp, class _Dp>
        -: 3655:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 3656:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3657:    : __ptr_(__p)
        -: 3658:{
        -: 3659:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3660:    try
        -: 3661:    {
        -: 3662:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3663:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3664:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 3665:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3666:        __enable_weak_this(__p, __p);
        -: 3667:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3668:    }
        -: 3669:    catch (...)
        -: 3670:    {
        -: 3671:        __d(__p);
        -: 3672:        throw;
        -: 3673:    }
        -: 3674:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3675:}
        -: 3676:
        -: 3677:template<class _Tp>
        -: 3678:template<class _Dp>
        -: 3679:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 3680:    : __ptr_(0)
        -: 3681:{
        -: 3682:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3683:    try
        -: 3684:    {
        -: 3685:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3686:        typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
        -: 3687:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT > _CntrlBlk;
        -: 3688:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3689:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3690:    }
        -: 3691:    catch (...)
        -: 3692:    {
        -: 3693:        __d(__p);
        -: 3694:        throw;
        -: 3695:    }
        -: 3696:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3697:}
        -: 3698:
        -: 3699:template<class _Tp>
        -: 3700:template<class _Yp, class _Dp, class _Alloc>
        -: 3701:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3702:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3703:    : __ptr_(__p)
        -: 3704:{
        -: 3705:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3706:    try
        -: 3707:    {
        -: 3708:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3709:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 3710:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 3711:        typedef __allocator_destructor<_A2> _D2;
        -: 3712:        _A2 __a2(__a);
        -: 3713:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 3714:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 3715:            _CntrlBlk(__p, __d, __a);
        -: 3716:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 3717:        __enable_weak_this(__p, __p);
        -: 3718:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3719:    }
        -: 3720:    catch (...)
        -: 3721:    {
        -: 3722:        __d(__p);
        -: 3723:        throw;
        -: 3724:    }
        -: 3725:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3726:}
        -: 3727:
        -: 3728:template<class _Tp>
        -: 3729:template<class _Dp, class _Alloc>
        -: 3730:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 3731:    : __ptr_(0)
        -: 3732:{
        -: 3733:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3734:    try
        -: 3735:    {
        -: 3736:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3737:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 3738:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 3739:        typedef __allocator_destructor<_A2> _D2;
        -: 3740:        _A2 __a2(__a);
        -: 3741:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 3742:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 3743:            _CntrlBlk(__p, __d, __a);
        -: 3744:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 3745:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3746:    }
        -: 3747:    catch (...)
        -: 3748:    {
        -: 3749:        __d(__p);
        -: 3750:        throw;
        -: 3751:    }
        -: 3752:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3753:}
        -: 3754:
        -: 3755:template<class _Tp>
        -: 3756:template<class _Yp>
        -: 3757:inline
        -: 3758:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 3759:    : __ptr_(__p),
        -: 3760:      __cntrl_(__r.__cntrl_)
        -: 3761:{
        -: 3762:    if (__cntrl_)
        -: 3763:        __cntrl_->__add_shared();
        -: 3764:}
        -: 3765:
        -: 3766:template<class _Tp>
        -: 3767:inline
        -: 3768:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 3769:    : __ptr_(__r.__ptr_),
        -: 3770:      __cntrl_(__r.__cntrl_)
        -: 3771:{
        -: 3772:    if (__cntrl_)
        -: 3773:        __cntrl_->__add_shared();
        -: 3774:}
        -: 3775:
        -: 3776:template<class _Tp>
        -: 3777:template<class _Yp>
        -: 3778:inline
        -: 3779:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3780:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3781:         _NOEXCEPT
        -: 3782:    : __ptr_(__r.__ptr_),
        -: 3783:      __cntrl_(__r.__cntrl_)
        -: 3784:{
        -: 3785:    if (__cntrl_)
        -: 3786:        __cntrl_->__add_shared();
        -: 3787:}
        -: 3788:
        -: 3789:template<class _Tp>
        -: 3790:inline
        -: 3791:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 3792:    : __ptr_(__r.__ptr_),
        -: 3793:      __cntrl_(__r.__cntrl_)
        -: 3794:{
        -: 3795:    __r.__ptr_ = 0;
        -: 3796:    __r.__cntrl_ = 0;
        -: 3797:}
        -: 3798:
        -: 3799:template<class _Tp>
        -: 3800:template<class _Yp>
        -: 3801:inline
        -: 3802:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3803:                            typename enable_if<__compatible_with<_Yp, element_type>::value, __nat>::type)
        -: 3804:         _NOEXCEPT
        -: 3805:    : __ptr_(__r.__ptr_),
        -: 3806:      __cntrl_(__r.__cntrl_)
        -: 3807:{
        -: 3808:    __r.__ptr_ = 0;
        -: 3809:    __r.__cntrl_ = 0;
        -: 3810:}
        -: 3811:
        -: 3812:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3813:template<class _Tp>
        -: 3814:template<class _Yp>
        -: 3815:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3816:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3817:    : __ptr_(__r.get())
        -: 3818:{
        -: 3819:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 3820:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 3821:    __enable_weak_this(__r.get(), __r.get());
        -: 3822:    __r.release();
        -: 3823:}
        -: 3824:#endif
        -: 3825:
        -: 3826:template<class _Tp>
        -: 3827:template <class _Yp, class _Dp>
        -: 3828:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 3829:                            typename enable_if
        -: 3830:                            <
        -: 3831:                                !is_lvalue_reference<_Dp>::value &&
        -: 3832:                                !is_array<_Yp>::value &&
        -: 3833:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3834:                                __nat
        -: 3835:                            >::type)
        -: 3836:    : __ptr_(__r.get())
        -: 3837:{
        -: 3838:#if _LIBCPP_STD_VER > 11
        -: 3839:    if (__ptr_ == nullptr)
        -: 3840:        __cntrl_ = nullptr;
        -: 3841:    else
        -: 3842:#endif
        -: 3843:    {
        -: 3844:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3845:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 3846:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), _AllocT());
        -: 3847:        __enable_weak_this(__r.get(), __r.get());
        -: 3848:    }
        -: 3849:    __r.release();
        -: 3850:}
        -: 3851:
        -: 3852:template<class _Tp>
        -: 3853:template <class _Yp, class _Dp>
        -: 3854:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 3855:                            typename enable_if
        -: 3856:                            <
        -: 3857:                                is_lvalue_reference<_Dp>::value &&
        -: 3858:                                !is_array<_Yp>::value &&
        -: 3859:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3860:                                __nat
        -: 3861:                            >::type)
        -: 3862:    : __ptr_(__r.get())
        -: 3863:{
        -: 3864:#if _LIBCPP_STD_VER > 11
        -: 3865:    if (__ptr_ == nullptr)
        -: 3866:        __cntrl_ = nullptr;
        -: 3867:    else
        -: 3868:#endif
        -: 3869:    {
        -: 3870:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3871:        typedef __shared_ptr_pointer<_Yp*,
        -: 3872:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 3873:                                     _AllocT > _CntrlBlk;
        -: 3874:        __cntrl_ = new _CntrlBlk(__r.get(), _VSTD::ref(__r.get_deleter()), _AllocT());
        -: 3875:        __enable_weak_this(__r.get(), __r.get());
        -: 3876:    }
        -: 3877:    __r.release();
        -: 3878:}
        -: 3879:
        -: 3880:template<class _Tp>
        -: 3881:shared_ptr<_Tp>::~shared_ptr()
        -: 3882:{
        -: 3883:    if (__cntrl_)
        -: 3884:        __cntrl_->__release_shared();
        -: 3885:}
        -: 3886:
        -: 3887:template<class _Tp>
        -: 3888:inline
        -: 3889:shared_ptr<_Tp>&
        -: 3890:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 3891:{
        -: 3892:    shared_ptr(__r).swap(*this);
        -: 3893:    return *this;
        -: 3894:}
        -: 3895:
        -: 3896:template<class _Tp>
        -: 3897:template<class _Yp>
        -: 3898:inline
        -: 3899:typename enable_if
        -: 3900:<
        -: 3901:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3902:    shared_ptr<_Tp>&
        -: 3903:>::type
        -: 3904:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 3905:{
        -: 3906:    shared_ptr(__r).swap(*this);
        -: 3907:    return *this;
        -: 3908:}
        -: 3909:
        -: 3910:template<class _Tp>
        -: 3911:inline
        -: 3912:shared_ptr<_Tp>&
        -: 3913:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 3914:{
        -: 3915:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3916:    return *this;
        -: 3917:}
        -: 3918:
        -: 3919:template<class _Tp>
        -: 3920:template<class _Yp>
        -: 3921:inline
        -: 3922:typename enable_if
        -: 3923:<
        -: 3924:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3925:    shared_ptr<_Tp>&
        -: 3926:>::type
        -: 3927:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 3928:{
        -: 3929:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3930:    return *this;
        -: 3931:}
        -: 3932:
        -: 3933:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3934:template<class _Tp>
        -: 3935:template<class _Yp>
        -: 3936:inline
        -: 3937:typename enable_if
        -: 3938:<
        -: 3939:    !is_array<_Yp>::value &&
        -: 3940:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 3941:    shared_ptr<_Tp>
        -: 3942:>::type&
        -: 3943:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 3944:{
        -: 3945:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3946:    return *this;
        -: 3947:}
        -: 3948:#endif
        -: 3949:
        -: 3950:template<class _Tp>
        -: 3951:template <class _Yp, class _Dp>
        -: 3952:inline
        -: 3953:typename enable_if
        -: 3954:<
        -: 3955:    !is_array<_Yp>::value &&
        -: 3956:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 3957:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 3958:    shared_ptr<_Tp>&
        -: 3959:>::type
        -: 3960:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 3961:{
        -: 3962:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 3963:    return *this;
        -: 3964:}
        -: 3965:
        -: 3966:template<class _Tp>
        -: 3967:inline
        -: 3968:void
        -: 3969:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 3970:{
        -: 3971:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 3972:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 3973:}
        -: 3974:
        -: 3975:template<class _Tp>
        -: 3976:inline
        -: 3977:void
        -: 3978:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 3979:{
        -: 3980:    shared_ptr().swap(*this);
        -: 3981:}
        -: 3982:
        -: 3983:template<class _Tp>
        -: 3984:template<class _Yp>
        -: 3985:inline
        -: 3986:typename enable_if
        -: 3987:<
        -: 3988:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 3989:    void
        -: 3990:>::type
        -: 3991:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 3992:{
        -: 3993:    shared_ptr(__p).swap(*this);
        -: 3994:}
        -: 3995:
        -: 3996:template<class _Tp>
        -: 3997:template<class _Yp, class _Dp>
        -: 3998:inline
        -: 3999:typename enable_if
        -: 4000:<
        -: 4001:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 4002:    void
        -: 4003:>::type
        -: 4004:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4005:{
        -: 4006:    shared_ptr(__p, __d).swap(*this);
        -: 4007:}
        -: 4008:
        -: 4009:template<class _Tp>
        -: 4010:template<class _Yp, class _Dp, class _Alloc>
        -: 4011:inline
        -: 4012:typename enable_if
        -: 4013:<
        -: 4014:    __compatible_with<_Yp, typename shared_ptr<_Tp>::element_type>::value,
        -: 4015:    void
        -: 4016:>::type
        -: 4017:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4018:{
        -: 4019:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4020:}
        -: 4021:
        -: 4022:template<class _Tp, class ..._Args>
        -: 4023:inline _LIBCPP_INLINE_VISIBILITY
        -: 4024:typename enable_if
        -: 4025:<
        -: 4026:    !is_array<_Tp>::value,
        -: 4027:    shared_ptr<_Tp>
        -: 4028:>::type
        -: 4029:make_shared(_Args&& ...__args)
        -: 4030:{
        -: 4031:    static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared");
        -: 4032:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4033:    typedef allocator<_CntrlBlk> _A2;
        -: 4034:    typedef __allocator_destructor<_A2> _D2;
        -: 4035:
        -: 4036:    _A2 __a2;
        -: 4037:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4038:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
        -: 4039:
        -: 4040:    _Tp *__ptr = __hold2.get()->get();
        -: 4041:    return shared_ptr<_Tp>::__create_with_control_block(__ptr, __hold2.release());
        -: 4042:}
        -: 4043:
        -: 4044:template<class _Tp, class _Alloc, class ..._Args>
        -: 4045:inline _LIBCPP_INLINE_VISIBILITY
        -: 4046:typename enable_if
        -: 4047:<
        -: 4048:    !is_array<_Tp>::value,
        -: 4049:    shared_ptr<_Tp>
        -: 4050:>::type
        -: 4051:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4052:{
        -: 4053:    static_assert( is_constructible<_Tp, _Args...>::value, "Can't construct object in allocate_shared");
        -: 4054:
        -: 4055:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4056:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4057:    typedef __allocator_destructor<_A2> _D2;
        -: 4058:
        -: 4059:    _A2 __a2(__a);
        -: 4060:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4061:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4062:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4063:
        -: 4064:    typename shared_ptr<_Tp>::element_type *__p = __hold2.get()->get();
        -: 4065:    return shared_ptr<_Tp>::__create_with_control_block(__p, _VSTD::addressof(*__hold2.release()));
        -: 4066:}
        -: 4067:
        -: 4068:template<class _Tp, class _Up>
        -: 4069:inline _LIBCPP_INLINE_VISIBILITY
        -: 4070:bool
        -: 4071:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4072:{
        -: 4073:    return __x.get() == __y.get();
        -: 4074:}
        -: 4075:
        -: 4076:template<class _Tp, class _Up>
        -: 4077:inline _LIBCPP_INLINE_VISIBILITY
        -: 4078:bool
        -: 4079:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4080:{
        -: 4081:    return !(__x == __y);
        -: 4082:}
        -: 4083:
        -: 4084:template<class _Tp, class _Up>
        -: 4085:inline _LIBCPP_INLINE_VISIBILITY
        -: 4086:bool
        -: 4087:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4088:{
        -: 4089:#if _LIBCPP_STD_VER <= 11
        -: 4090:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4091:    return less<_Vp>()(__x.get(), __y.get());
        -: 4092:#else
        -: 4093:    return less<>()(__x.get(), __y.get());
        -: 4094:#endif
        -: 4095:
        -: 4096:}
        -: 4097:
        -: 4098:template<class _Tp, class _Up>
        -: 4099:inline _LIBCPP_INLINE_VISIBILITY
        -: 4100:bool
        -: 4101:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4102:{
        -: 4103:    return __y < __x;
        -: 4104:}
        -: 4105:
        -: 4106:template<class _Tp, class _Up>
        -: 4107:inline _LIBCPP_INLINE_VISIBILITY
        -: 4108:bool
        -: 4109:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4110:{
        -: 4111:    return !(__y < __x);
        -: 4112:}
        -: 4113:
        -: 4114:template<class _Tp, class _Up>
        -: 4115:inline _LIBCPP_INLINE_VISIBILITY
        -: 4116:bool
        -: 4117:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4118:{
        -: 4119:    return !(__x < __y);
        -: 4120:}
        -: 4121:
        -: 4122:template<class _Tp>
        -: 4123:inline _LIBCPP_INLINE_VISIBILITY
        -: 4124:bool
        -: 4125:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4126:{
        -: 4127:    return !__x;
        -: 4128:}
        -: 4129:
        -: 4130:template<class _Tp>
        -: 4131:inline _LIBCPP_INLINE_VISIBILITY
        -: 4132:bool
        -: 4133:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4134:{
        -: 4135:    return !__x;
        -: 4136:}
        -: 4137:
        -: 4138:template<class _Tp>
        -: 4139:inline _LIBCPP_INLINE_VISIBILITY
        -: 4140:bool
        -: 4141:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4142:{
        -: 4143:    return static_cast<bool>(__x);
        -: 4144:}
        -: 4145:
        -: 4146:template<class _Tp>
        -: 4147:inline _LIBCPP_INLINE_VISIBILITY
        -: 4148:bool
        -: 4149:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4150:{
        -: 4151:    return static_cast<bool>(__x);
        -: 4152:}
        -: 4153:
        -: 4154:template<class _Tp>
        -: 4155:inline _LIBCPP_INLINE_VISIBILITY
        -: 4156:bool
        -: 4157:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4158:{
        -: 4159:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4160:}
        -: 4161:
        -: 4162:template<class _Tp>
        -: 4163:inline _LIBCPP_INLINE_VISIBILITY
        -: 4164:bool
        -: 4165:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4166:{
        -: 4167:    return less<_Tp*>()(nullptr, __x.get());
        -: 4168:}
        -: 4169:
        -: 4170:template<class _Tp>
        -: 4171:inline _LIBCPP_INLINE_VISIBILITY
        -: 4172:bool
        -: 4173:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4174:{
        -: 4175:    return nullptr < __x;
        -: 4176:}
        -: 4177:
        -: 4178:template<class _Tp>
        -: 4179:inline _LIBCPP_INLINE_VISIBILITY
        -: 4180:bool
        -: 4181:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4182:{
        -: 4183:    return __x < nullptr;
        -: 4184:}
        -: 4185:
        -: 4186:template<class _Tp>
        -: 4187:inline _LIBCPP_INLINE_VISIBILITY
        -: 4188:bool
        -: 4189:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4190:{
        -: 4191:    return !(nullptr < __x);
        -: 4192:}
        -: 4193:
        -: 4194:template<class _Tp>
        -: 4195:inline _LIBCPP_INLINE_VISIBILITY
        -: 4196:bool
        -: 4197:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4198:{
        -: 4199:    return !(__x < nullptr);
        -: 4200:}
        -: 4201:
        -: 4202:template<class _Tp>
        -: 4203:inline _LIBCPP_INLINE_VISIBILITY
        -: 4204:bool
        -: 4205:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4206:{
        -: 4207:    return !(__x < nullptr);
        -: 4208:}
        -: 4209:
        -: 4210:template<class _Tp>
        -: 4211:inline _LIBCPP_INLINE_VISIBILITY
        -: 4212:bool
        -: 4213:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4214:{
        -: 4215:    return !(nullptr < __x);
        -: 4216:}
        -: 4217:
        -: 4218:template<class _Tp>
        -: 4219:inline _LIBCPP_INLINE_VISIBILITY
        -: 4220:void
        -: 4221:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 4222:{
        -: 4223:    __x.swap(__y);
        -: 4224:}
        -: 4225:
        -: 4226:template<class _Tp, class _Up>
        -: 4227:inline _LIBCPP_INLINE_VISIBILITY
        -: 4228:shared_ptr<_Tp>
        -: 4229:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4230:{
        -: 4231:    return shared_ptr<_Tp>(__r,
        -: 4232:                           static_cast<
        -: 4233:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 4234:}
        -: 4235:
        -: 4236:template<class _Tp, class _Up>
        -: 4237:inline _LIBCPP_INLINE_VISIBILITY
        -: 4238:shared_ptr<_Tp>
        -: 4239:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4240:{
        -: 4241:    typedef typename shared_ptr<_Tp>::element_type _ET;
        -: 4242:    _ET* __p = dynamic_cast<_ET*>(__r.get());
        -: 4243:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 4244:}
        -: 4245:
        -: 4246:template<class _Tp, class _Up>
        -: 4247:shared_ptr<_Tp>
        -: 4248:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4249:{
        -: 4250:    typedef typename shared_ptr<_Tp>::element_type _RTp;
        -: 4251:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 4252:}
        -: 4253:
        -: 4254:template<class _Tp, class _Up>
        -: 4255:shared_ptr<_Tp>
        -: 4256:reinterpret_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4257:{
        -: 4258:    return shared_ptr<_Tp>(__r,
        -: 4259:                           reinterpret_cast<
        -: 4260:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 4261:}
        -: 4262:
        -: 4263:#ifndef _LIBCPP_NO_RTTI
        -: 4264:
        -: 4265:template<class _Dp, class _Tp>
        -: 4266:inline _LIBCPP_INLINE_VISIBILITY
        -: 4267:_Dp*
        -: 4268:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 4269:{
        -: 4270:    return __p.template __get_deleter<_Dp>();
        -: 4271:}
        -: 4272:
        -: 4273:#endif  // _LIBCPP_NO_RTTI
        -: 4274:
        -: 4275:template<class _Tp>
        -: 4276:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS weak_ptr
        -: 4277:{
        -: 4278:public:
        -: 4279:    typedef _Tp element_type;
        -: 4280:private:
        -: 4281:    element_type*        __ptr_;
        -: 4282:    __shared_weak_count* __cntrl_;
        -: 4283:
        -: 4284:public:
        -: 4285:    _LIBCPP_INLINE_VISIBILITY
        -: 4286:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 4287:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 4288:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4289:                        _NOEXCEPT;
        -: 4290:    _LIBCPP_INLINE_VISIBILITY
        -: 4291:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 4292:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 4293:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4294:                         _NOEXCEPT;
        -: 4295:
        -: 4296:    _LIBCPP_INLINE_VISIBILITY
        -: 4297:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 4298:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 4299:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4300:                         _NOEXCEPT;
        -: 4301:    ~weak_ptr();
        -: 4302:
        -: 4303:    _LIBCPP_INLINE_VISIBILITY
        -: 4304:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 4305:    template<class _Yp>
        -: 4306:        typename enable_if
        -: 4307:        <
        -: 4308:            is_convertible<_Yp*, element_type*>::value,
        -: 4309:            weak_ptr&
        -: 4310:        >::type
        -: 4311:        _LIBCPP_INLINE_VISIBILITY
        -: 4312:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 4313:
        -: 4314:    _LIBCPP_INLINE_VISIBILITY
        -: 4315:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 4316:    template<class _Yp>
        -: 4317:        typename enable_if
        -: 4318:        <
        -: 4319:            is_convertible<_Yp*, element_type*>::value,
        -: 4320:            weak_ptr&
        -: 4321:        >::type
        -: 4322:        _LIBCPP_INLINE_VISIBILITY
        -: 4323:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 4324:
        -: 4325:    template<class _Yp>
        -: 4326:        typename enable_if
        -: 4327:        <
        -: 4328:            is_convertible<_Yp*, element_type*>::value,
        -: 4329:            weak_ptr&
        -: 4330:        >::type
        -: 4331:        _LIBCPP_INLINE_VISIBILITY
        -: 4332:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 4333:
        -: 4334:    _LIBCPP_INLINE_VISIBILITY
        -: 4335:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 4336:    _LIBCPP_INLINE_VISIBILITY
        -: 4337:    void reset() _NOEXCEPT;
        -: 4338:
        -: 4339:    _LIBCPP_INLINE_VISIBILITY
        -: 4340:    long use_count() const _NOEXCEPT
        -: 4341:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 4342:    _LIBCPP_INLINE_VISIBILITY
        -: 4343:    bool expired() const _NOEXCEPT
        -: 4344:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 4345:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 4346:    template<class _Up>
        -: 4347:        _LIBCPP_INLINE_VISIBILITY
        -: 4348:        bool owner_before(const shared_ptr<_Up>& __r) const _NOEXCEPT
        -: 4349:        {return __cntrl_ < __r.__cntrl_;}
        -: 4350:    template<class _Up>
        -: 4351:        _LIBCPP_INLINE_VISIBILITY
        -: 4352:        bool owner_before(const weak_ptr<_Up>& __r) const _NOEXCEPT
        -: 4353:        {return __cntrl_ < __r.__cntrl_;}
        -: 4354:
        -: 4355:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 4356:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 4357:};
        -: 4358:
        -: 4359:#ifndef _LIBCPP_HAS_NO_DEDUCTION_GUIDES
        -: 4360:template<class _Tp>
        -: 4361:weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;
        -: 4362:#endif
        -: 4363:
        -: 4364:template<class _Tp>
        -: 4365:inline
        -: 4366:_LIBCPP_CONSTEXPR
        -: 4367:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 4368:    : __ptr_(0),
        -: 4369:      __cntrl_(0)
        -: 4370:{
        -: 4371:}
        -: 4372:
        -: 4373:template<class _Tp>
        -: 4374:inline
        -: 4375:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 4376:    : __ptr_(__r.__ptr_),
        -: 4377:      __cntrl_(__r.__cntrl_)
        -: 4378:{
        -: 4379:    if (__cntrl_)
        -: 4380:        __cntrl_->__add_weak();
        -: 4381:}
        -: 4382:
        -: 4383:template<class _Tp>
        -: 4384:template<class _Yp>
        -: 4385:inline
        -: 4386:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 4387:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4388:                         _NOEXCEPT
        -: 4389:    : __ptr_(__r.__ptr_),
        -: 4390:      __cntrl_(__r.__cntrl_)
        -: 4391:{
        -: 4392:    if (__cntrl_)
        -: 4393:        __cntrl_->__add_weak();
        -: 4394:}
        -: 4395:
        -: 4396:template<class _Tp>
        -: 4397:template<class _Yp>
        -: 4398:inline
        -: 4399:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 4400:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4401:         _NOEXCEPT
        -: 4402:    : __ptr_(__r.__ptr_),
        -: 4403:      __cntrl_(__r.__cntrl_)
        -: 4404:{
        -: 4405:    if (__cntrl_)
        -: 4406:        __cntrl_->__add_weak();
        -: 4407:}
        -: 4408:
        -: 4409:template<class _Tp>
        -: 4410:inline
        -: 4411:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 4412:    : __ptr_(__r.__ptr_),
        -: 4413:      __cntrl_(__r.__cntrl_)
        -: 4414:{
        -: 4415:    __r.__ptr_ = 0;
        -: 4416:    __r.__cntrl_ = 0;
        -: 4417:}
        -: 4418:
        -: 4419:template<class _Tp>
        -: 4420:template<class _Yp>
        -: 4421:inline
        -: 4422:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 4423:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4424:         _NOEXCEPT
        -: 4425:    : __ptr_(__r.__ptr_),
        -: 4426:      __cntrl_(__r.__cntrl_)
        -: 4427:{
        -: 4428:    __r.__ptr_ = 0;
        -: 4429:    __r.__cntrl_ = 0;
        -: 4430:}
        -: 4431:
        -: 4432:template<class _Tp>
        -: 4433:weak_ptr<_Tp>::~weak_ptr()
        -: 4434:{
        -: 4435:    if (__cntrl_)
        -: 4436:        __cntrl_->__release_weak();
        -: 4437:}
        -: 4438:
        -: 4439:template<class _Tp>
        -: 4440:inline
        -: 4441:weak_ptr<_Tp>&
        -: 4442:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 4443:{
        -: 4444:    weak_ptr(__r).swap(*this);
        -: 4445:    return *this;
        -: 4446:}
        -: 4447:
        -: 4448:template<class _Tp>
        -: 4449:template<class _Yp>
        -: 4450:inline
        -: 4451:typename enable_if
        -: 4452:<
        -: 4453:    is_convertible<_Yp*, _Tp*>::value,
        -: 4454:    weak_ptr<_Tp>&
        -: 4455:>::type
        -: 4456:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 4457:{
        -: 4458:    weak_ptr(__r).swap(*this);
        -: 4459:    return *this;
        -: 4460:}
        -: 4461:
        -: 4462:template<class _Tp>
        -: 4463:inline
        -: 4464:weak_ptr<_Tp>&
        -: 4465:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 4466:{
        -: 4467:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 4468:    return *this;
        -: 4469:}
        -: 4470:
        -: 4471:template<class _Tp>
        -: 4472:template<class _Yp>
        -: 4473:inline
        -: 4474:typename enable_if
        -: 4475:<
        -: 4476:    is_convertible<_Yp*, _Tp*>::value,
        -: 4477:    weak_ptr<_Tp>&
        -: 4478:>::type
        -: 4479:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 4480:{
        -: 4481:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 4482:    return *this;
        -: 4483:}
        -: 4484:
        -: 4485:template<class _Tp>
        -: 4486:template<class _Yp>
        -: 4487:inline
        -: 4488:typename enable_if
        -: 4489:<
        -: 4490:    is_convertible<_Yp*, _Tp*>::value,
        -: 4491:    weak_ptr<_Tp>&
        -: 4492:>::type
        -: 4493:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 4494:{
        -: 4495:    weak_ptr(__r).swap(*this);
        -: 4496:    return *this;
        -: 4497:}
        -: 4498:
        -: 4499:template<class _Tp>
        -: 4500:inline
        -: 4501:void
        -: 4502:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 4503:{
        -: 4504:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4505:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4506:}
        -: 4507:
        -: 4508:template<class _Tp>
        -: 4509:inline _LIBCPP_INLINE_VISIBILITY
        -: 4510:void
        -: 4511:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 4512:{
        -: 4513:    __x.swap(__y);
        -: 4514:}
        -: 4515:
        -: 4516:template<class _Tp>
        -: 4517:inline
        -: 4518:void
        -: 4519:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 4520:{
        -: 4521:    weak_ptr().swap(*this);
        -: 4522:}
        -: 4523:
        -: 4524:template<class _Tp>
        -: 4525:template<class _Yp>
        -: 4526:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 4527:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4528:    : __ptr_(__r.__ptr_),
        -: 4529:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 4530:{
        -: 4531:    if (__cntrl_ == 0)
        -: 4532:        __throw_bad_weak_ptr();
        -: 4533:}
        -: 4534:
        -: 4535:template<class _Tp>
        -: 4536:shared_ptr<_Tp>
        -: 4537:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 4538:{
        -: 4539:    shared_ptr<_Tp> __r;
        -: 4540:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 4541:    if (__r.__cntrl_)
        -: 4542:        __r.__ptr_ = __ptr_;
        -: 4543:    return __r;
        -: 4544:}
        -: 4545:
        -: 4546:#if _LIBCPP_STD_VER > 14
        -: 4547:template <class _Tp = void> struct owner_less;
        -: 4548:#else
        -: 4549:template <class _Tp> struct owner_less;
        -: 4550:#endif
        -: 4551:
        -: 4552:template <class _Tp>
        -: 4553:struct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >
        -: 4554:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 4555:{
        -: 4556:    typedef bool result_type;
        -: 4557:    _LIBCPP_INLINE_VISIBILITY
        -: 4558:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4559:        {return __x.owner_before(__y);}
        -: 4560:    _LIBCPP_INLINE_VISIBILITY
        -: 4561:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4562:        {return __x.owner_before(__y);}
        -: 4563:    _LIBCPP_INLINE_VISIBILITY
        -: 4564:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4565:        {return __x.owner_before(__y);}
        -: 4566:};
        -: 4567:
        -: 4568:template <class _Tp>
        -: 4569:struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >
        -: 4570:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 4571:{
        -: 4572:    typedef bool result_type;
        -: 4573:    _LIBCPP_INLINE_VISIBILITY
        -: 4574:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4575:        {return __x.owner_before(__y);}
        -: 4576:    _LIBCPP_INLINE_VISIBILITY
        -: 4577:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4578:        {return __x.owner_before(__y);}
        -: 4579:    _LIBCPP_INLINE_VISIBILITY
        -: 4580:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4581:        {return __x.owner_before(__y);}
        -: 4582:};
        -: 4583:
        -: 4584:#if _LIBCPP_STD_VER > 14
        -: 4585:template <>
        -: 4586:struct _LIBCPP_TEMPLATE_VIS owner_less<void>
        -: 4587:{
        -: 4588:    template <class _Tp, class _Up>
        -: 4589:    _LIBCPP_INLINE_VISIBILITY
        -: 4590:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4591:        {return __x.owner_before(__y);}
        -: 4592:    template <class _Tp, class _Up>
        -: 4593:    _LIBCPP_INLINE_VISIBILITY
        -: 4594:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4595:        {return __x.owner_before(__y);}
        -: 4596:    template <class _Tp, class _Up>
        -: 4597:    _LIBCPP_INLINE_VISIBILITY
        -: 4598:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4599:        {return __x.owner_before(__y);}
        -: 4600:    template <class _Tp, class _Up>
        -: 4601:    _LIBCPP_INLINE_VISIBILITY
        -: 4602:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4603:        {return __x.owner_before(__y);}
        -: 4604:    typedef void is_transparent;
        -: 4605:};
        -: 4606:#endif
        -: 4607:
        -: 4608:template<class _Tp>
        -: 4609:class _LIBCPP_TEMPLATE_VIS enable_shared_from_this
        -: 4610:{
        -: 4611:    mutable weak_ptr<_Tp> __weak_this_;
        -: 4612:protected:
        -: 4613:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4614:    enable_shared_from_this() _NOEXCEPT {}
        -: 4615:    _LIBCPP_INLINE_VISIBILITY
        -: 4616:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 4617:    _LIBCPP_INLINE_VISIBILITY
        -: 4618:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 4619:        {return *this;}
        -: 4620:    _LIBCPP_INLINE_VISIBILITY
        -: 4621:    ~enable_shared_from_this() {}
        -: 4622:public:
        -: 4623:    _LIBCPP_INLINE_VISIBILITY
        -: 4624:    shared_ptr<_Tp> shared_from_this()
        -: 4625:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 4626:    _LIBCPP_INLINE_VISIBILITY
        -: 4627:    shared_ptr<_Tp const> shared_from_this() const
        -: 4628:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 4629:
        -: 4630:#if _LIBCPP_STD_VER > 14
        -: 4631:    _LIBCPP_INLINE_VISIBILITY
        -: 4632:    weak_ptr<_Tp> weak_from_this() _NOEXCEPT
        -: 4633:       { return __weak_this_; }
        -: 4634:
        -: 4635:    _LIBCPP_INLINE_VISIBILITY
        -: 4636:    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT
        -: 4637:        { return __weak_this_; }
        -: 4638:#endif // _LIBCPP_STD_VER > 14
        -: 4639:
        -: 4640:    template <class _Up> friend class shared_ptr;
        -: 4641:};
        -: 4642:
        -: 4643:template <class _Tp>
        -: 4644:struct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >
        -: 4645:{
        -: 4646:    typedef shared_ptr<_Tp>      argument_type;
        -: 4647:    typedef size_t               result_type;
        -: 4648:
        -: 4649:    _LIBCPP_INLINE_VISIBILITY
        -: 4650:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 4651:    {
        -: 4652:        return hash<typename shared_ptr<_Tp>::element_type*>()(__ptr.get());
        -: 4653:    }
        -: 4654:};
        -: 4655:
        -: 4656:template<class _CharT, class _Traits, class _Yp>
        -: 4657:inline _LIBCPP_INLINE_VISIBILITY
        -: 4658:basic_ostream<_CharT, _Traits>&
        -: 4659:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 4660:
        -: 4661:
        -: 4662:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 4663:
        -: 4664:class _LIBCPP_TYPE_VIS __sp_mut
        -: 4665:{
        -: 4666:    void* __lx;
        -: 4667:public:
        -: 4668:    void lock() _NOEXCEPT;
        -: 4669:    void unlock() _NOEXCEPT;
        -: 4670:
        -: 4671:private:
        -: 4672:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 4673:    __sp_mut(const __sp_mut&);
        -: 4674:    __sp_mut& operator=(const __sp_mut&);
        -: 4675:
        -: 4676:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 4677:};
        -: 4678:
        -: 4679:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4680:__sp_mut& __get_sp_mut(const void*);
        -: 4681:
        -: 4682:template <class _Tp>
        -: 4683:inline _LIBCPP_INLINE_VISIBILITY
        -: 4684:bool
        -: 4685:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 4686:{
        -: 4687:    return false;
        -: 4688:}
        -: 4689:
        -: 4690:template <class _Tp>
        -: 4691:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4692:shared_ptr<_Tp>
        -: 4693:atomic_load(const shared_ptr<_Tp>* __p)
        -: 4694:{
        -: 4695:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4696:    __m.lock();
        -: 4697:    shared_ptr<_Tp> __q = *__p;
        -: 4698:    __m.unlock();
        -: 4699:    return __q;
        -: 4700:}
        -: 4701:
        -: 4702:template <class _Tp>
        -: 4703:inline _LIBCPP_INLINE_VISIBILITY
        -: 4704:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4705:shared_ptr<_Tp>
        -: 4706:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 4707:{
        -: 4708:    return atomic_load(__p);
        -: 4709:}
        -: 4710:
        -: 4711:template <class _Tp>
        -: 4712:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4713:void
        -: 4714:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 4715:{
        -: 4716:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4717:    __m.lock();
        -: 4718:    __p->swap(__r);
        -: 4719:    __m.unlock();
        -: 4720:}
        -: 4721:
        -: 4722:template <class _Tp>
        -: 4723:inline _LIBCPP_INLINE_VISIBILITY
        -: 4724:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4725:void
        -: 4726:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 4727:{
        -: 4728:    atomic_store(__p, __r);
        -: 4729:}
        -: 4730:
        -: 4731:template <class _Tp>
        -: 4732:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4733:shared_ptr<_Tp>
        -: 4734:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 4735:{
        -: 4736:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4737:    __m.lock();
        -: 4738:    __p->swap(__r);
        -: 4739:    __m.unlock();
        -: 4740:    return __r;
        -: 4741:}
        -: 4742:
        -: 4743:template <class _Tp>
        -: 4744:inline _LIBCPP_INLINE_VISIBILITY
        -: 4745:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4746:shared_ptr<_Tp>
        -: 4747:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 4748:{
        -: 4749:    return atomic_exchange(__p, __r);
        -: 4750:}
        -: 4751:
        -: 4752:template <class _Tp>
        -: 4753:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4754:bool
        -: 4755:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 4756:{
        -: 4757:    shared_ptr<_Tp> __temp;
        -: 4758:    __sp_mut& __m = __get_sp_mut(__p);
        -: 4759:    __m.lock();
        -: 4760:    if (__p->__owner_equivalent(*__v))
        -: 4761:    {
        -: 4762:        _VSTD::swap(__temp, *__p);
        -: 4763:        *__p = __w;
        -: 4764:        __m.unlock();
        -: 4765:        return true;
        -: 4766:    }
        -: 4767:    _VSTD::swap(__temp, *__v);
        -: 4768:    *__v = *__p;
        -: 4769:    __m.unlock();
        -: 4770:    return false;
        -: 4771:}
        -: 4772:
        -: 4773:template <class _Tp>
        -: 4774:inline _LIBCPP_INLINE_VISIBILITY
        -: 4775:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4776:bool
        -: 4777:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 4778:{
        -: 4779:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 4780:}
        -: 4781:
        -: 4782:template <class _Tp>
        -: 4783:inline _LIBCPP_INLINE_VISIBILITY
        -: 4784:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4785:bool
        -: 4786:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 4787:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 4788:{
        -: 4789:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 4790:}
        -: 4791:
        -: 4792:template <class _Tp>
        -: 4793:inline _LIBCPP_INLINE_VISIBILITY
        -: 4794:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 4795:bool
        -: 4796:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 4797:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 4798:{
        -: 4799:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 4800:}
        -: 4801:
        -: 4802:#endif  // !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 4803:
        -: 4804://enum class
        -: 4805:#if defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE)
        -: 4806:# ifndef _LIBCPP_CXX03_LANG
        -: 4807:enum class pointer_safety : unsigned char {
        -: 4808:  relaxed,
        -: 4809:  preferred,
        -: 4810:  strict
        -: 4811:};
        -: 4812:# endif
        -: 4813:#else
        -: 4814:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 4815:{
        -: 4816:    enum __lx
        -: 4817:    {
        -: 4818:        relaxed,
        -: 4819:        preferred,
        -: 4820:        strict
        -: 4821:    };
        -: 4822:
        -: 4823:    __lx __v_;
        -: 4824:
        -: 4825:    _LIBCPP_INLINE_VISIBILITY
        -: 4826:    pointer_safety() : __v_() {}
        -: 4827:
        -: 4828:    _LIBCPP_INLINE_VISIBILITY
        -: 4829:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 4830:    _LIBCPP_INLINE_VISIBILITY
        -: 4831:    operator int() const {return __v_;}
        -: 4832:};
        -: 4833:#endif
        -: 4834:
        -: 4835:#if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) && \
        -: 4836:    defined(_LIBCPP_BUILDING_LIBRARY)
        -: 4837:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 4838:#else
        -: 4839:// This function is only offered in C++03 under ABI v1.
        -: 4840:# if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) || !defined(_LIBCPP_CXX03_LANG)
        -: 4841:inline _LIBCPP_INLINE_VISIBILITY
        -: 4842:pointer_safety get_pointer_safety() _NOEXCEPT {
        -: 4843:  return pointer_safety::relaxed;
        -: 4844:}
        -: 4845:# endif
        -: 4846:#endif
        -: 4847:
        -: 4848:
        -: 4849:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 4850:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 4851:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 4852:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 4853:
        -: 4854:template <class _Tp>
        -: 4855:inline _LIBCPP_INLINE_VISIBILITY
        -: 4856:_Tp*
        -: 4857:undeclare_reachable(_Tp* __p)
        -: 4858:{
        -: 4859:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 4860:}
        -: 4861:
        -: 4862:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 4863:
        -: 4864:// --- Helper for container swap --
        -: 4865:template <typename _Alloc>
        -: 4866:inline _LIBCPP_INLINE_VISIBILITY
        -: 4867:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 4868:#if _LIBCPP_STD_VER >= 14
        -: 4869:    _NOEXCEPT
        -: 4870:#else
        -: 4871:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 4872:#endif
        -: 4873:{
        -: 4874:    __swap_allocator(__a1, __a2,
        -: 4875:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
        -: 4876:}
        -: 4877:
        -: 4878:template <typename _Alloc>
        -: 4879:_LIBCPP_INLINE_VISIBILITY
        -: 4880:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 4881:#if _LIBCPP_STD_VER >= 14
        -: 4882:    _NOEXCEPT
        -: 4883:#else
        -: 4884:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 4885:#endif
        -: 4886:{
        -: 4887:    using _VSTD::swap;
        -: 4888:    swap(__a1, __a2);
        -: 4889:}
        -: 4890:
        -: 4891:template <typename _Alloc>
        -: 4892:inline _LIBCPP_INLINE_VISIBILITY
        -: 4893:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 4894:
        -: 4895:template <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >
        -: 4896:struct __noexcept_move_assign_container : public integral_constant<bool,
        -: 4897:    _Traits::propagate_on_container_move_assignment::value
        -: 4898:#if _LIBCPP_STD_VER > 14
        -: 4899:        || _Traits::is_always_equal::value
        -: 4900:#else
        -: 4901:        && is_nothrow_move_assignable<_Alloc>::value
        -: 4902:#endif
        -: 4903:    > {};
        -: 4904:
        -: 4905:
        -: 4906:template <class _Tp, class _Alloc>
        -: 4907:struct __temp_value {
        -: 4908:    typedef allocator_traits<_Alloc> _Traits;
        -: 4909:
        -: 4910:    typename aligned_storage<sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)>::type __v;
        -: 4911:    _Alloc &__a;
        -: 4912:
        -: 4913:    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }
        -: 4914:    _Tp &   get() { return *__addr(); }
        -: 4915:
        -: 4916:    template<class... _Args>
        -: 4917:    _LIBCPP_NO_CFI
        -: 4918:    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc) {
        -: 4919:      _Traits::construct(__a, reinterpret_cast<_Tp*>(addressof(__v)),
        -: 4920:                         _VSTD::forward<_Args>(__args)...);
        -: 4921:    }
        -: 4922:
        -: 4923:    ~__temp_value() { _Traits::destroy(__a, __addr()); }
        -: 4924:    };
        -: 4925:
        -: 4926:template<typename _Alloc, typename = void, typename = void>
        -: 4927:struct __is_allocator : false_type {};
        -: 4928:
        -: 4929:template<typename _Alloc>
        -: 4930:struct __is_allocator<_Alloc,
        -: 4931:       typename __void_t<typename _Alloc::value_type>::type,
        -: 4932:       typename __void_t<decltype(_VSTD::declval<_Alloc&>().allocate(size_t(0)))>::type
        -: 4933:     >
        -: 4934:   : true_type {};
        -: 4935:
        -: 4936:// __builtin_new_allocator -- A non-templated helper for allocating and
        -: 4937:// deallocating memory using __builtin_operator_new and
        -: 4938:// __builtin_operator_delete. It should be used in preference to
        -: 4939:// `std::allocator<T>` to avoid additional instantiations.
        -: 4940:struct __builtin_new_allocator {
        -: 4941:  struct __builtin_new_deleter {
        -: 4942:    typedef void* pointer_type;
        -: 4943:
        -: 4944:    _LIBCPP_CONSTEXPR explicit __builtin_new_deleter(size_t __size, size_t __align)
        -: 4945:        : __size_(__size), __align_(__align) {}
        -: 4946:
        -: 4947:    void operator()(void* p) const _NOEXCEPT {
        -: 4948:        std::__libcpp_deallocate(p, __size_, __align_);
        -: 4949:    }
        -: 4950:
        -: 4951:   private:
        -: 4952:    size_t __size_;
        -: 4953:    size_t __align_;
        -: 4954:  };
        -: 4955:
        -: 4956:  typedef unique_ptr<void, __builtin_new_deleter> __holder_t;
        -: 4957:
        -: 4958:  static __holder_t __allocate_bytes(size_t __s, size_t __align) {
        -: 4959:      return __holder_t(std::__libcpp_allocate(__s, __align),
        -: 4960:                     __builtin_new_deleter(__s, __align));
        -: 4961:  }
        -: 4962:
        -: 4963:  static void __deallocate_bytes(void* __p, size_t __s,
        -: 4964:                                 size_t __align) _NOEXCEPT {
        -: 4965:      std::__libcpp_deallocate(__p, __s, __align);
        -: 4966:  }
        -: 4967:
        -: 4968:  template <class _Tp>
        -: 4969:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 4970:  static __holder_t __allocate_type(size_t __n) {
        -: 4971:      return __allocate_bytes(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 4972:  }
        -: 4973:
        -: 4974:  template <class _Tp>
        -: 4975:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 4976:  static void __deallocate_type(void* __p, size_t __n) _NOEXCEPT {
        -: 4977:      __deallocate_bytes(__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 4978:  }
        -: 4979:};
        -: 4980:
        -: 4981:
        -: 4982:_LIBCPP_END_NAMESPACE_STD
        -: 4983:
        -: 4984:_LIBCPP_POP_MACROS
        -: 4985:
        -: 4986:#if defined(_LIBCPP_HAS_PARALLEL_ALGORITHMS) && _LIBCPP_STD_VER >= 17
        -: 4987:#   include <__pstl_memory>
        -: 4988:#endif
        -: 4989:
        -: 4990:#endif  // _LIBCPP_MEMORY
