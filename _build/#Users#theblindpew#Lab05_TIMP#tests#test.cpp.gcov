        -:    0:Source:/Users/theblindpew/Lab05_TIMP/tests/test.cpp
        -:    0:Graph:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/bank_tests.dir/tests/test.cpp.gcno
        -:    0:Data:/Users/theblindpew/Lab05_TIMP/_build/CMakeFiles/bank_tests.dir/tests/test.cpp.gcda
        -:    0:Runs:38
        -:    0:Programs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:#include <gmock/gmock.h>
        -:    3:#include <Account.h>
        -:    4:#include <Transaction.h>
        -:    5:
        -:    6:
       92:    7:TEST(Account, Exceptions)
        -:    8:{
        9:    9:	Account a1(1, 1000);
       18:   10:    EXPECT_ANY_THROW(a1.ChangeBalance(1));
        9:   11:	a1.Lock();
       18:   12:    EXPECT_ANY_THROW(a1.Lock());
        9:   13:    a1.ChangeBalance(1);
        9:   14:	a1.Unlock();
        9:   15:	int balance = a1.GetBalance();
        9:   16:	EXPECT_EQ(balance, 1001);
       27:   17:}
        -:   18:
       54:   19:class MockAccount: public Account {
        -:   20:public:
       54:   21:    MockAccount(int id, int balance)
       81:   22:        : Account(id, balance) {}
       18:   23:    MOCK_METHOD0(GetBalance, int());
       36:   24:    MOCK_METHOD1(ChangeBalance, void(int));
       45:   25:    MOCK_METHOD0(Lock, void());
       45:   26:    MOCK_METHOD0(Unlock, void());
        -:   27:};
        -:   28:
       92:   29:TEST(Account, MockAcc)
        -:   30:{
        9:   31:	MockAccount account1(5, 7000);
        9:   32:	EXPECT_CALL(account1, ChangeBalance(1)).Times(1);
        9:   33:    EXPECT_CALL(account1, Lock()).Times(1);
        9:   34:    EXPECT_CALL(account1, Unlock()).Times(1);
        9:   35:    EXPECT_CALL(account1, GetBalance()).Times(1).WillOnce(testing::Return(7000));
        9:   36:    account1.Lock();
        9:   37:    account1.ChangeBalance(1);
        9:   38:    account1.Unlock();
        9:   39:    account1.GetBalance();
        -:   40:                
        9:   41:}
        -:   42:
       92:   43:TEST(Transaction, WithMock) {
        9:   44:    MockAccount account1(5, 7000);
        9:   45:    MockAccount account2(6, 20000);
        -:   46:    
        -:   47://    EXPECT_CALL(account1, ChangeBalance(2000)).Times(1);
        9:   48:    EXPECT_CALL(account1, Lock()).Times(1);
        9:   49:    EXPECT_CALL(account1, Unlock()).Times(1);
        -:   50://    EXPECT_CALL(account1, GetBalance()).Times(1);
        -:   51:    
        -:   52://    EXPECT_CALL(account2, ChangeBalance(2000)).Times(testing::AnyNumber());
        -:   53://    EXPECT_CALL(account2, Lock()).Times(1);
        -:   54://    EXPECT_CALL(account2, Unlock()).Times(1);
        -:   55://    EXPECT_CALL(account2, GetBalance()).Times(1);
        -:   56:    
        9:   57:    Transaction tr;
        9:   58:    tr.set_fee(100);
        9:   59:    EXPECT_EQ(tr.fee(), 100);
        9:   60:    tr.Make(account1, account2, 2000);
        -:   61:    //tr.SaveToDataBase(account1, account2, 2000);
        9:   62:}
        -:   63:
       92:   64:TEST(Transaction, Exceptions) {
        9:   65:    Account account1(5, 7000);
        9:   66:    Account account2(6, 20000);
        9:   67:    Transaction tr;
        9:   68:    tr.set_fee(10);
       18:   69:    EXPECT_ANY_THROW(tr.Make(account1, account1, 500));
       18:   70:    EXPECT_ANY_THROW(tr.Make(account1, account2, 90));
       18:   71:    EXPECT_ANY_THROW(tr.Make(account1, account2, 10));
       36:   72:}
        -:   73:
       38:   74:int main(int argc, char *argv[])
        -:   75:{
       38:   76:	::testing::InitGoogleTest(&argc, argv);
       38:   77:	return RUN_ALL_TESTS();
        -:   78:}
